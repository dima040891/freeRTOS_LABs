
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000957c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009764  08009764  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009764  08009764  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009764  08009764  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009768  08009768  00019768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800976c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e0  20000180  080098ec  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002560  080098ec  00022560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d281  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ec1  00000000  00000000  0003d42a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001030  00000000  00000000  000424f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b4ea  00000000  00000000  00043528  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013176  00000000  00000000  0005ea12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e460  00000000  00000000  00071b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fffe8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  00100064  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	08009674 	.word	0x08009674

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	08009674 	.word	0x08009674

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

//#include "FreeRTOS.h"
//#include "task.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fcb0 	bl	8000ad0 <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fcbd 	bl	8000b00 <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:

uint16_t Delay_LED;
const uint16_t *pDelay_LED;

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8
	Delay_LED = 500; //
 8000196:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <freeRTOS_Tasks_Ini+0x34>)
 8000198:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800019c:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 800019e:	4b0a      	ldr	r3, [pc, #40]	; (80001c8 <freeRTOS_Tasks_Ini+0x38>)
 80001a0:	4a08      	ldr	r2, [pc, #32]	; (80001c4 <freeRTOS_Tasks_Ini+0x34>)
 80001a2:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_PCB_LED_Toggle, "Task_PCB_LED_Toggle", 40, (void*) pDelay_LED, 1, NULL); // Название задачи (функции), Название задачи для отладки, размер стекка задачи,
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <freeRTOS_Tasks_Ini+0x38>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	2300      	movs	r3, #0
 80001aa:	9301      	str	r3, [sp, #4]
 80001ac:	2301      	movs	r3, #1
 80001ae:	9300      	str	r3, [sp, #0]
 80001b0:	4613      	mov	r3, r2
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	4905      	ldr	r1, [pc, #20]	; (80001cc <freeRTOS_Tasks_Ini+0x3c>)
 80001b6:	4806      	ldr	r0, [pc, #24]	; (80001d0 <freeRTOS_Tasks_Ini+0x40>)
 80001b8:	f007 f83d 	bl	8007236 <xTaskCreate>
																				  // параметры передаваемые в задачу, приоритет, хэндл (ссылка) на задачу.
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	20001ccc 	.word	0x20001ccc
 80001c8:	20001cc8 	.word	0x20001cc8
 80001cc:	0800968c 	.word	0x0800968c
 80001d0:	080001d5 	.word	0x080001d5

080001d4 <vTask_PCB_LED_Toggle>:



void vTask_PCB_LED_Toggle(void *pvParameters)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters;
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 80001e0:	f7ff ffca 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED);
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	4618      	mov	r0, r3
 80001ea:	f007 f95f 	bl	80074ac <vTaskDelay>
	PCB_LED_Toggle();
 80001ee:	f7ff ffc3 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters);
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	881b      	ldrh	r3, [r3, #0]
 80001f6:	4618      	mov	r0, r3
 80001f8:	f007 f958 	bl	80074ac <vTaskDelay>
	PCB_LED_Toggle();
 80001fc:	e7f0      	b.n	80001e0 <vTask_PCB_LED_Toggle+0xc>
	...

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000204:	f000 f99a 	bl	800053c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000208:	f000 f816 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020c:	f000 f86e 	bl	80002ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000210:	f006 f8c4 	bl	800639c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <main+0x2c>)
 8000216:	2100      	movs	r1, #0
 8000218:	4805      	ldr	r0, [pc, #20]	; (8000230 <main+0x30>)
 800021a:	f006 f925 	bl	8006468 <osThreadNew>
 800021e:	4602      	mov	r2, r0
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <main+0x34>)
 8000222:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000224:	f006 f8ec 	bl	8006400 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x28>
 800022a:	bf00      	nop
 800022c:	08009730 	.word	0x08009730
 8000230:	08000385 	.word	0x08000385
 8000234:	20001cd0 	.word	0x20001cd0

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b094      	sub	sp, #80	; 0x50
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f009 fa0b 	bl	8009662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	f107 0314 	add.w	r3, r7, #20
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
 800025a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	2301      	movs	r3, #1
 8000278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027a:	2302      	movs	r3, #2
 800027c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000284:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028e:	4618      	mov	r0, r3
 8000290:	f001 ffd2 	bl	8002238 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029a:	f000 f8bb 	bl	8000414 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b4:	f107 0314 	add.w	r3, r7, #20
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f002 fa3c 	bl	8002738 <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c6:	f000 f8a5 	bl	8000414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ca:	2310      	movs	r3, #16
 80002cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 fb99 	bl	8002a0c <HAL_RCCEx_PeriphCLKConfig>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e0:	f000 f898 	bl	8000414 <Error_Handler>
  }
}
 80002e4:	bf00      	nop
 80002e6:	3750      	adds	r7, #80	; 0x50
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a1d      	ldr	r2, [pc, #116]	; (800037c <MX_GPIO_Init+0x90>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <MX_GPIO_Init+0x90>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_GPIO_Init+0x90>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_GPIO_Init+0x90>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a11      	ldr	r2, [pc, #68]	; (800037c <MX_GPIO_Init+0x90>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_GPIO_Init+0x90>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <MX_GPIO_Init+0x94>)
 8000350:	f000 fbbe 	bl	8000ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000354:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	4804      	ldr	r0, [pc, #16]	; (8000380 <MX_GPIO_Init+0x94>)
 800036e:	f000 fa55 	bl	800081c <HAL_GPIO_Init>

}
 8000372:	bf00      	nop
 8000374:	3720      	adds	r7, #32
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40011000 	.word	0x40011000

08000384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000384:	b590      	push	{r4, r7, lr}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */

	sprintf(USB_Tx_Buf, "Hi from VCP\r\n");
 800038c:	4a1e      	ldr	r2, [pc, #120]	; (8000408 <StartDefaultTask+0x84>)
 800038e:	4b1f      	ldr	r3, [pc, #124]	; (800040c <StartDefaultTask+0x88>)
 8000390:	4614      	mov	r4, r2
 8000392:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000394:	6020      	str	r0, [r4, #0]
 8000396:	6061      	str	r1, [r4, #4]
 8000398:	60a2      	str	r2, [r4, #8]
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	81a3      	strh	r3, [r4, #12]

	//-------------------------------------------------------------------------------------------------------------------
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80003ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2302      	movs	r3, #2
 80003bc:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	f107 0308 	add.w	r3, r7, #8
 80003c2:	4619      	mov	r1, r3
 80003c4:	4812      	ldr	r0, [pc, #72]	; (8000410 <StartDefaultTask+0x8c>)
 80003c6:	f000 fa29 	bl	800081c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80003ca:	2200      	movs	r2, #0
 80003cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d0:	480f      	ldr	r0, [pc, #60]	; (8000410 <StartDefaultTask+0x8c>)
 80003d2:	f000 fb7d 	bl	8000ad0 <HAL_GPIO_WritePin>

	  osDelay(2000);
 80003d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003da:	f006 f8ef 	bl	80065bc <osDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80003de:	f008 fc75 	bl	8008ccc <MX_USB_DEVICE_Init>

	  //-------------------------------------------------------------------------------------------------------------------

  PCB_Init();
 80003e2:	f7ff febd 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80003e6:	f7ff fed3 	bl	8000190 <freeRTOS_Tasks_Ini>

  /* Infinite loop */
  for(;;)
  {
//	  PCB_LED_Toggle();
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <StartDefaultTask+0x84>)
 80003ec:	f7ff feb0 	bl	8000150 <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29b      	uxth	r3, r3
 80003f4:	4619      	mov	r1, r3
 80003f6:	4804      	ldr	r0, [pc, #16]	; (8000408 <StartDefaultTask+0x84>)
 80003f8:	f008 fd26 	bl	8008e48 <CDC_Transmit_FS>
	  osDelay(500);
 80003fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000400:	f006 f8dc 	bl	80065bc <osDelay>
	  CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 8000404:	e7f1      	b.n	80003ea <StartDefaultTask+0x66>
 8000406:	bf00      	nop
 8000408:	20001cd4 	.word	0x20001cd4
 800040c:	080096ac 	.word	0x080096ac
 8000410:	40010800 	.word	0x40010800

08000414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000418:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041a:	e7fe      	b.n	800041a <Error_Handler+0x6>

0800041c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <HAL_MspInit+0x68>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <HAL_MspInit+0x68>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6193      	str	r3, [r2, #24]
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_MspInit+0x68>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x68>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <HAL_MspInit+0x68>)
 8000440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x68>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000452:	2200      	movs	r2, #0
 8000454:	210f      	movs	r1, #15
 8000456:	f06f 0001 	mvn.w	r0, #1
 800045a:	f000 f9a8 	bl	80007ae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <HAL_MspInit+0x6c>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_MspInit+0x6c>)
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	40010000 	.word	0x40010000

0800048c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000490:	e7fe      	b.n	8000490 <NMI_Handler+0x4>

08000492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000496:	e7fe      	b.n	8000496 <HardFault_Handler+0x4>

08000498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800049c:	e7fe      	b.n	800049c <MemManage_Handler+0x4>

0800049e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <BusFault_Handler+0x4>

080004a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <UsageFault_Handler+0x4>

080004aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b6:	b580      	push	{r7, lr}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ba:	f000 f885 	bl	80005c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004be:	f007 fc67 	bl	8007d90 <xTaskGetSchedulerState>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d001      	beq.n	80004cc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004c8:	f008 f9ae 	bl	8008828 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80004d6:	f000 fc5d 	bl	8000d94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20002274 	.word	0x20002274

080004e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004f2:	e003      	b.n	80004fc <LoopCopyDataInit>

080004f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004fa:	3104      	adds	r1, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000500:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000502:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000504:	d3f6      	bcc.n	80004f4 <CopyDataInit>
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000508:	e002      	b.n	8000510 <LoopFillZerobss>

0800050a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800050c:	f842 3b04 	str.w	r3, [r2], #4

08000510 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000512:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000514:	d3f9      	bcc.n	800050a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000516:	f7ff ffe5 	bl	80004e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051a:	f009 f873 	bl	8009604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fe6f 	bl	8000200 <main>
  bx lr
 8000522:	4770      	bx	lr
  ldr r3, =_sidata
 8000524:	0800976c 	.word	0x0800976c
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800052c:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000530:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000534:	20002560 	.word	0x20002560

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x28>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a07      	ldr	r2, [pc, #28]	; (8000564 <HAL_Init+0x28>)
 8000546:	f043 0310 	orr.w	r3, r3, #16
 800054a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 f923 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	200f      	movs	r0, #15
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f7ff ff60 	bl	800041c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40022000 	.word	0x40022000

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 f93b 	bl	8000802 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 f903 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000008 	.word	0x20000008
 80005c4:	20000004 	.word	0x20000004

080005c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <HAL_IncTick+0x1c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <HAL_IncTick+0x20>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x20>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20001cec 	.word	0x20001cec

080005ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  return uwTick;
 80005f0:	4b02      	ldr	r3, [pc, #8]	; (80005fc <HAL_GetTick+0x10>)
 80005f2:	681b      	ldr	r3, [r3, #0]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr
 80005fc:	20001cec 	.word	0x20001cec

08000600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800061c:	4013      	ands	r3, r2
 800061e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <__NVIC_SetPriorityGrouping+0x44>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	60d3      	str	r3, [r2, #12]
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000ed00 	.word	0xe000ed00

08000648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800064c:	4b04      	ldr	r3, [pc, #16]	; (8000660 <__NVIC_GetPriorityGrouping+0x18>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	0a1b      	lsrs	r3, r3, #8
 8000652:	f003 0307 	and.w	r3, r3, #7
}
 8000656:	4618      	mov	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	2b00      	cmp	r3, #0
 8000674:	db0b      	blt.n	800068e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 021f 	and.w	r2, r3, #31
 800067c:	4906      	ldr	r1, [pc, #24]	; (8000698 <__NVIC_EnableIRQ+0x34>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	095b      	lsrs	r3, r3, #5
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff90 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff2d 	bl	8000600 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff42 	bl	8000648 <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff90 	bl	80006f0 <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5f 	bl	800069c <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff35 	bl	8000664 <__NVIC_EnableIRQ>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffa2 	bl	8000754 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b08b      	sub	sp, #44	; 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e127      	b.n	8000a80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000830:	2201      	movs	r2, #1
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 8116 	bne.w	8000a7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b12      	cmp	r3, #18
 8000854:	d034      	beq.n	80008c0 <HAL_GPIO_Init+0xa4>
 8000856:	2b12      	cmp	r3, #18
 8000858:	d80d      	bhi.n	8000876 <HAL_GPIO_Init+0x5a>
 800085a:	2b02      	cmp	r3, #2
 800085c:	d02b      	beq.n	80008b6 <HAL_GPIO_Init+0x9a>
 800085e:	2b02      	cmp	r3, #2
 8000860:	d804      	bhi.n	800086c <HAL_GPIO_Init+0x50>
 8000862:	2b00      	cmp	r3, #0
 8000864:	d031      	beq.n	80008ca <HAL_GPIO_Init+0xae>
 8000866:	2b01      	cmp	r3, #1
 8000868:	d01c      	beq.n	80008a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800086a:	e048      	b.n	80008fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800086c:	2b03      	cmp	r3, #3
 800086e:	d043      	beq.n	80008f8 <HAL_GPIO_Init+0xdc>
 8000870:	2b11      	cmp	r3, #17
 8000872:	d01b      	beq.n	80008ac <HAL_GPIO_Init+0x90>
          break;
 8000874:	e043      	b.n	80008fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000876:	4a89      	ldr	r2, [pc, #548]	; (8000a9c <HAL_GPIO_Init+0x280>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d026      	beq.n	80008ca <HAL_GPIO_Init+0xae>
 800087c:	4a87      	ldr	r2, [pc, #540]	; (8000a9c <HAL_GPIO_Init+0x280>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d806      	bhi.n	8000890 <HAL_GPIO_Init+0x74>
 8000882:	4a87      	ldr	r2, [pc, #540]	; (8000aa0 <HAL_GPIO_Init+0x284>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d020      	beq.n	80008ca <HAL_GPIO_Init+0xae>
 8000888:	4a86      	ldr	r2, [pc, #536]	; (8000aa4 <HAL_GPIO_Init+0x288>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d01d      	beq.n	80008ca <HAL_GPIO_Init+0xae>
          break;
 800088e:	e036      	b.n	80008fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000890:	4a85      	ldr	r2, [pc, #532]	; (8000aa8 <HAL_GPIO_Init+0x28c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d019      	beq.n	80008ca <HAL_GPIO_Init+0xae>
 8000896:	4a85      	ldr	r2, [pc, #532]	; (8000aac <HAL_GPIO_Init+0x290>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d016      	beq.n	80008ca <HAL_GPIO_Init+0xae>
 800089c:	4a84      	ldr	r2, [pc, #528]	; (8000ab0 <HAL_GPIO_Init+0x294>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d013      	beq.n	80008ca <HAL_GPIO_Init+0xae>
          break;
 80008a2:	e02c      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	623b      	str	r3, [r7, #32]
          break;
 80008aa:	e028      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	3304      	adds	r3, #4
 80008b2:	623b      	str	r3, [r7, #32]
          break;
 80008b4:	e023      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	68db      	ldr	r3, [r3, #12]
 80008ba:	3308      	adds	r3, #8
 80008bc:	623b      	str	r3, [r7, #32]
          break;
 80008be:	e01e      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	330c      	adds	r3, #12
 80008c6:	623b      	str	r3, [r7, #32]
          break;
 80008c8:	e019      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d102      	bne.n	80008d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008d2:	2304      	movs	r3, #4
 80008d4:	623b      	str	r3, [r7, #32]
          break;
 80008d6:	e012      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d105      	bne.n	80008ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e0:	2308      	movs	r3, #8
 80008e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	611a      	str	r2, [r3, #16]
          break;
 80008ea:	e008      	b.n	80008fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008ec:	2308      	movs	r3, #8
 80008ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	69fa      	ldr	r2, [r7, #28]
 80008f4:	615a      	str	r2, [r3, #20]
          break;
 80008f6:	e002      	b.n	80008fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	2bff      	cmp	r3, #255	; 0xff
 8000902:	d801      	bhi.n	8000908 <HAL_GPIO_Init+0xec>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	e001      	b.n	800090c <HAL_GPIO_Init+0xf0>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3304      	adds	r3, #4
 800090c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	2bff      	cmp	r3, #255	; 0xff
 8000912:	d802      	bhi.n	800091a <HAL_GPIO_Init+0xfe>
 8000914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	e002      	b.n	8000920 <HAL_GPIO_Init+0x104>
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	3b08      	subs	r3, #8
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	210f      	movs	r1, #15
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	fa01 f303 	lsl.w	r3, r1, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	401a      	ands	r2, r3
 8000932:	6a39      	ldr	r1, [r7, #32]
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	431a      	orrs	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000948:	2b00      	cmp	r3, #0
 800094a:	f000 8096 	beq.w	8000a7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <HAL_GPIO_Init+0x298>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a58      	ldr	r2, [pc, #352]	; (8000ab4 <HAL_GPIO_Init+0x298>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b56      	ldr	r3, [pc, #344]	; (8000ab4 <HAL_GPIO_Init+0x298>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000966:	4a54      	ldr	r2, [pc, #336]	; (8000ab8 <HAL_GPIO_Init+0x29c>)
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	3302      	adds	r3, #2
 800096e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000972:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4b      	ldr	r2, [pc, #300]	; (8000abc <HAL_GPIO_Init+0x2a0>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d013      	beq.n	80009ba <HAL_GPIO_Init+0x19e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4a      	ldr	r2, [pc, #296]	; (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d00d      	beq.n	80009b6 <HAL_GPIO_Init+0x19a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a49      	ldr	r2, [pc, #292]	; (8000ac4 <HAL_GPIO_Init+0x2a8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d007      	beq.n	80009b2 <HAL_GPIO_Init+0x196>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a48      	ldr	r2, [pc, #288]	; (8000ac8 <HAL_GPIO_Init+0x2ac>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_GPIO_Init+0x192>
 80009aa:	2303      	movs	r3, #3
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x1a0>
 80009ae:	2304      	movs	r3, #4
 80009b0:	e004      	b.n	80009bc <HAL_GPIO_Init+0x1a0>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x1a0>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x1a0>
 80009ba:	2300      	movs	r3, #0
 80009bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009be:	f002 0203 	and.w	r2, r2, #3
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009cc:	493a      	ldr	r1, [pc, #232]	; (8000ab8 <HAL_GPIO_Init+0x29c>)
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009e6:	4b39      	ldr	r3, [pc, #228]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4938      	ldr	r1, [pc, #224]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	600b      	str	r3, [r1, #0]
 80009f2:	e006      	b.n	8000a02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f4:	4b35      	ldr	r3, [pc, #212]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	43db      	mvns	r3, r3
 80009fc:	4933      	ldr	r1, [pc, #204]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 80009fe:	4013      	ands	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	492e      	ldr	r1, [pc, #184]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	604b      	str	r3, [r1, #4]
 8000a1a:	e006      	b.n	8000a2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4929      	ldr	r1, [pc, #164]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a38:	689a      	ldr	r2, [r3, #8]
 8000a3a:	4924      	ldr	r1, [pc, #144]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	608b      	str	r3, [r1, #8]
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4b21      	ldr	r3, [pc, #132]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	491f      	ldr	r1, [pc, #124]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a60:	68da      	ldr	r2, [r3, #12]
 8000a62:	491a      	ldr	r1, [pc, #104]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	60cb      	str	r3, [r1, #12]
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	4915      	ldr	r1, [pc, #84]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f47f aed0 	bne.w	8000830 <HAL_GPIO_Init+0x14>
  }
}
 8000a90:	bf00      	nop
 8000a92:	372c      	adds	r7, #44	; 0x2c
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	10210000 	.word	0x10210000
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	10120000 	.word	0x10120000
 8000aa8:	10310000 	.word	0x10310000
 8000aac:	10320000 	.word	0x10320000
 8000ab0:	10220000 	.word	0x10220000
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	40010400 	.word	0x40010400

08000ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
 8000adc:	4613      	mov	r3, r2
 8000ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae0:	787b      	ldrb	r3, [r7, #1]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ae6:	887a      	ldrh	r2, [r7, #2]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000aec:	e003      	b.n	8000af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aee:	887b      	ldrh	r3, [r7, #2]
 8000af0:	041a      	lsls	r2, r3, #16
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	611a      	str	r2, [r3, #16]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4013      	ands	r3, r2
 8000b18:	041a      	lsls	r2, r3, #16
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43d9      	mvns	r1, r3
 8000b1e:	887b      	ldrh	r3, [r7, #2]
 8000b20:	400b      	ands	r3, r1
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	611a      	str	r2, [r3, #16]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b34:	b08b      	sub	sp, #44	; 0x2c
 8000b36:	af06      	add	r7, sp, #24
 8000b38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e0fd      	b.n	8000d40 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d106      	bne.n	8000b5e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f008 faa9 	bl	80090b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2203      	movs	r2, #3
 8000b62:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f002 f82a 	bl	8002bc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	687e      	ldr	r6, [r7, #4]
 8000b78:	466d      	mov	r5, sp
 8000b7a:	f106 0410 	add.w	r4, r6, #16
 8000b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b82:	6823      	ldr	r3, [r4, #0]
 8000b84:	602b      	str	r3, [r5, #0]
 8000b86:	1d33      	adds	r3, r6, #4
 8000b88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f001 fff4 	bl	8002b78 <USB_CoreInit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d005      	beq.n	8000ba2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2202      	movs	r2, #2
 8000b9a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e0ce      	b.n	8000d40 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 f825 	bl	8002bf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e04c      	b.n	8000c4e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	4613      	mov	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	440b      	add	r3, r1
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	1c5a      	adds	r2, r3, #1
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4413      	add	r3, r2
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	7bfa      	ldrb	r2, [r7, #15]
 8000bdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	b298      	uxth	r0, r3
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3336      	adds	r3, #54	; 0x36
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3303      	adds	r3, #3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	4613      	mov	r3, r2
 8000c12:	009b      	lsls	r3, r3, #2
 8000c14:	4413      	add	r3, r2
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	440b      	add	r3, r1
 8000c1a:	3338      	adds	r3, #56	; 0x38
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	333c      	adds	r3, #60	; 0x3c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	440b      	add	r3, r1
 8000c42:	3340      	adds	r3, #64	; 0x40
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3ad      	bcc.n	8000bb4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c58:	2300      	movs	r3, #0
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e044      	b.n	8000ce8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	4413      	add	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000c86:	7bfa      	ldrb	r2, [r7, #15]
 8000c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	440b      	add	r3, r1
 8000c98:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d3b5      	bcc.n	8000c5e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	687e      	ldr	r6, [r7, #4]
 8000cfa:	466d      	mov	r5, sp
 8000cfc:	f106 0410 	add.w	r4, r6, #16
 8000d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d04:	6823      	ldr	r3, [r4, #0]
 8000d06:	602b      	str	r3, [r5, #0]
 8000d08:	1d33      	adds	r3, r6, #4
 8000d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d0c:	6838      	ldr	r0, [r7, #0]
 8000d0e:	f001 ff7f 	bl	8002c10 <USB_DevInit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d005      	beq.n	8000d24 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e00d      	b.n	8000d40 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f003 ff19 	bl	8004b70 <USB_DevDisconnect>

  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d101      	bne.n	8000d5e <HAL_PCD_Start+0x16>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	e016      	b.n	8000d8c <HAL_PCD_Start+0x44>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2201      	movs	r2, #1
 8000d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f001 ff14 	bl	8002b98 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000d70:	2101      	movs	r1, #1
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f008 fc0f 	bl	8009596 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 feed 	bl	8004b5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 feef 	bl	8004b84 <USB_ReadInterrupts>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000db0:	d102      	bne.n	8000db8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f000 fb61 	bl	800147a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f003 fee1 	bl	8004b84 <USB_ReadInterrupts>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dcc:	d112      	bne.n	8000df4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000de0:	b292      	uxth	r2, r2
 8000de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f008 f9dd 	bl	80091a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000dec:	2100      	movs	r1, #0
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 f925 	bl	800103e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f003 fec3 	bl	8004b84 <USB_ReadInterrupts>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e08:	d10b      	bne.n	8000e22 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e1c:	b292      	uxth	r2, r2
 8000e1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f003 feac 	bl	8004b84 <USB_ReadInterrupts>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e36:	d10b      	bne.n	8000e50 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fe95 	bl	8004b84 <USB_ReadInterrupts>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e64:	d126      	bne.n	8000eb4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0204 	bic.w	r2, r2, #4
 8000e78:	b292      	uxth	r2, r2
 8000e7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0208 	bic.w	r2, r2, #8
 8000e90:	b292      	uxth	r2, r2
 8000e92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f008 f9be 	bl	8009218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eae:	b292      	uxth	r2, r2
 8000eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f003 fe63 	bl	8004b84 <USB_ReadInterrupts>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ec8:	f040 8084 	bne.w	8000fd4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	77fb      	strb	r3, [r7, #31]
 8000ed0:	e011      	b.n	8000ef6 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	7ffb      	ldrb	r3, [r7, #31]
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	441a      	add	r2, r3
 8000ede:	7ffb      	ldrb	r3, [r7, #31]
 8000ee0:	8812      	ldrh	r2, [r2, #0]
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	f107 0120 	add.w	r1, r7, #32
 8000eea:	440b      	add	r3, r1
 8000eec:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000ef0:	7ffb      	ldrb	r3, [r7, #31]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	77fb      	strb	r3, [r7, #31]
 8000ef6:	7ffb      	ldrb	r3, [r7, #31]
 8000ef8:	2b07      	cmp	r3, #7
 8000efa:	d9ea      	bls.n	8000ed2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f042 0201 	orr.w	r2, r2, #1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0201 	bic.w	r2, r2, #1
 8000f26:	b292      	uxth	r2, r2
 8000f28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f2c:	bf00      	nop
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f6      	beq.n	8000f2e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f52:	b292      	uxth	r2, r2
 8000f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	77fb      	strb	r3, [r7, #31]
 8000f5c:	e010      	b.n	8000f80 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000f5e:	7ffb      	ldrb	r3, [r7, #31]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6812      	ldr	r2, [r2, #0]
 8000f64:	4611      	mov	r1, r2
 8000f66:	7ffa      	ldrb	r2, [r7, #31]
 8000f68:	0092      	lsls	r2, r2, #2
 8000f6a:	440a      	add	r2, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	f107 0120 	add.w	r1, r7, #32
 8000f72:	440b      	add	r3, r1
 8000f74:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000f78:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000f7a:	7ffb      	ldrb	r3, [r7, #31]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	77fb      	strb	r3, [r7, #31]
 8000f80:	7ffb      	ldrb	r3, [r7, #31]
 8000f82:	2b07      	cmp	r3, #7
 8000f84:	d9eb      	bls.n	8000f5e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f042 0208 	orr.w	r2, r2, #8
 8000f98:	b292      	uxth	r2, r2
 8000f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fb0:	b292      	uxth	r2, r2
 8000fb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0204 	orr.w	r2, r2, #4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f008 f908 	bl	80091e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fdd3 	bl	8004b84 <USB_ReadInterrupts>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fe8:	d10e      	bne.n	8001008 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ffc:	b292      	uxth	r2, r2
 8000ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f008 f8c1 	bl	800918a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fdb9 	bl	8004b84 <USB_ReadInterrupts>
 8001012:	4603      	mov	r3, r0
 8001014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800101c:	d10b      	bne.n	8001036 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001030:	b292      	uxth	r2, r2
 8001032:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_PCD_SetAddress+0x1a>
 8001054:	2302      	movs	r3, #2
 8001056:	e013      	b.n	8001080 <HAL_PCD_SetAddress+0x42>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	78fa      	ldrb	r2, [r7, #3]
 8001064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fd60 	bl	8004b36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	4608      	mov	r0, r1
 8001092:	4611      	mov	r1, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4603      	mov	r3, r0
 8001098:	70fb      	strb	r3, [r7, #3]
 800109a:	460b      	mov	r3, r1
 800109c:	803b      	strh	r3, [r7, #0]
 800109e:	4613      	mov	r3, r2
 80010a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	da0e      	bge.n	80010cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	1c5a      	adds	r2, r3, #1
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2201      	movs	r2, #1
 80010c8:	705a      	strb	r2, [r3, #1]
 80010ca:	e00e      	b.n	80010ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	f003 0207 	and.w	r2, r3, #7
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80010f6:	883a      	ldrh	r2, [r7, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	78ba      	ldrb	r2, [r7, #2]
 8001100:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d004      	beq.n	8001114 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b29a      	uxth	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001114:	78bb      	ldrb	r3, [r7, #2]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d102      	bne.n	8001120 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_PCD_EP_Open+0xa6>
 800112a:	2302      	movs	r3, #2
 800112c:	e00e      	b.n	800114c <HAL_PCD_EP_Open+0xc4>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68f9      	ldr	r1, [r7, #12]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fd87 	bl	8002c50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800114a:	7afb      	ldrb	r3, [r7, #11]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001164:	2b00      	cmp	r3, #0
 8001166:	da0e      	bge.n	8001186 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	4613      	mov	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	705a      	strb	r2, [r3, #1]
 8001184:	e00e      	b.n	80011a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	f003 0207 	and.w	r2, r3, #7
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_PCD_EP_Close+0x6a>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e00e      	b.n	80011dc <HAL_PCD_EP_Close+0x88>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68f9      	ldr	r1, [r7, #12]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f002 f8a9 	bl	8003324 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	460b      	mov	r3, r1
 80011f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011f4:	7afb      	ldrb	r3, [r7, #11]
 80011f6:	f003 0207 	and.w	r2, r3, #7
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2200      	movs	r2, #0
 8001222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001224:	7afb      	ldrb	r3, [r7, #11]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	b2da      	uxtb	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6979      	ldr	r1, [r7, #20]
 8001240:	4618      	mov	r0, r3
 8001242:	f002 fa5b 	bl	80036fc <USB_EPStartXfer>
 8001246:	e005      	b.n	8001254 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6979      	ldr	r1, [r7, #20]
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fa54 	bl	80036fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800126a:	78fb      	ldrb	r3, [r7, #3]
 800126c:	f003 0207 	and.w	r2, r3, #7
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001280:	681b      	ldr	r3, [r3, #0]
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	460b      	mov	r3, r1
 800129a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800129c:	7afb      	ldrb	r3, [r7, #11]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2201      	movs	r2, #1
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2201      	movs	r2, #1
 80012d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012d8:	7afb      	ldrb	r3, [r7, #11]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d106      	bne.n	80012fc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6979      	ldr	r1, [r7, #20]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fa01 	bl	80036fc <USB_EPStartXfer>
 80012fa:	e005      	b.n	8001308 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6979      	ldr	r1, [r7, #20]
 8001302:	4618      	mov	r0, r3
 8001304:	f002 f9fa 	bl	80036fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f003 0207 	and.w	r2, r3, #7
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	d901      	bls.n	8001330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e04c      	b.n	80013ca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001334:	2b00      	cmp	r3, #0
 8001336:	da0e      	bge.n	8001356 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2201      	movs	r2, #1
 8001352:	705a      	strb	r2, [r3, #1]
 8001354:	e00c      	b.n	8001370 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001356:	78fa      	ldrb	r2, [r7, #3]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2200      	movs	r2, #0
 800136e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001376:	78fb      	ldrb	r3, [r7, #3]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	b2da      	uxtb	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001388:	2b01      	cmp	r3, #1
 800138a:	d101      	bne.n	8001390 <HAL_PCD_EP_SetStall+0x7e>
 800138c:	2302      	movs	r3, #2
 800138e:	e01c      	b.n	80013ca <HAL_PCD_EP_SetStall+0xb8>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2201      	movs	r2, #1
 8001394:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68f9      	ldr	r1, [r7, #12]
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 facc 	bl	800493c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013a4:	78fb      	ldrb	r3, [r7, #3]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f003 fbf1 	bl	8004ba2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	f003 020f 	and.w	r2, r3, #15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d901      	bls.n	80013f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e040      	b.n	8001472 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	da0e      	bge.n	8001416 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2201      	movs	r2, #1
 8001412:	705a      	strb	r2, [r3, #1]
 8001414:	e00e      	b.n	8001434 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001416:	78fb      	ldrb	r3, [r7, #3]
 8001418:	f003 0207 	and.w	r2, r3, #7
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001428:	687a      	ldr	r2, [r7, #4]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_PCD_EP_ClrStall+0x82>
 8001450:	2302      	movs	r3, #2
 8001452:	e00e      	b.n	8001472 <HAL_PCD_EP_ClrStall+0xa0>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68f9      	ldr	r1, [r7, #12]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 faba 	bl	80049dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b08e      	sub	sp, #56	; 0x38
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001482:	e2df      	b.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800148c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800148e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800149a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f040 8158 	bne.w	8001754 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014a6:	f003 0310 	and.w	r3, r3, #16
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d152      	bne.n	8001554 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014be:	81fb      	strh	r3, [r7, #14]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	89fb      	ldrh	r3, [r7, #14]
 80014c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3328      	adds	r3, #40	; 0x28
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	461a      	mov	r2, r3
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	3302      	adds	r3, #2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	441a      	add	r2, r3
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001512:	2100      	movs	r1, #0
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f007 fe1e 	bl	8009156 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 828e 	beq.w	8001a44 <PCD_EP_ISR_Handler+0x5ca>
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 8289 	bne.w	8001a44 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800153e:	b2da      	uxtb	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b292      	uxth	r2, r2
 8001546:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001552:	e277      	b.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001564:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156a:	2b00      	cmp	r3, #0
 800156c:	d034      	beq.n	80015d8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001576:	b29b      	uxth	r3, r3
 8001578:	461a      	mov	r2, r3
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	3306      	adds	r3, #6
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	f003 fb47 	bl	8004c40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015be:	4013      	ands	r3, r2
 80015c0:	823b      	strh	r3, [r7, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	8a3a      	ldrh	r2, [r7, #16]
 80015c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015cc:	b292      	uxth	r2, r2
 80015ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f007 fd93 	bl	80090fc <HAL_PCD_SetupStageCallback>
 80015d6:	e235      	b.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f280 8231 	bge.w	8001a44 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015ee:	4013      	ands	r3, r2
 80015f0:	83bb      	strh	r3, [r7, #28]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	8bba      	ldrh	r2, [r7, #28]
 80015f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015fc:	b292      	uxth	r2, r2
 80015fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001608:	b29b      	uxth	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	3306      	adds	r3, #6
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	4413      	add	r3, r2
 800161e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	69db      	ldr	r3, [r3, #28]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d019      	beq.n	8001668 <PCD_EP_ISR_Handler+0x1ee>
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d015      	beq.n	8001668 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6818      	ldr	r0, [r3, #0]
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	6959      	ldr	r1, [r3, #20]
 8001644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001646:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800164c:	b29b      	uxth	r3, r3
 800164e:	f003 faf7 	bl	8004c40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	441a      	add	r2, r3
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001660:	2100      	movs	r1, #0
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f007 fd5c 	bl	8009120 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001676:	b29b      	uxth	r3, r3
 8001678:	461a      	mov	r2, r3
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d112      	bne.n	80016b6 <PCD_EP_ISR_Handler+0x23c>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800169a:	b29a      	uxth	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	801a      	strh	r2, [r3, #0]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	801a      	strh	r2, [r3, #0]
 80016b4:	e02f      	b.n	8001716 <PCD_EP_ISR_Handler+0x29c>
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	2b3e      	cmp	r3, #62	; 0x3e
 80016bc:	d813      	bhi.n	80016e6 <PCD_EP_ISR_Handler+0x26c>
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	085b      	lsrs	r3, r3, #1
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <PCD_EP_ISR_Handler+0x25e>
 80016d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d4:	3301      	adds	r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
 80016d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016da:	b29b      	uxth	r3, r3
 80016dc:	029b      	lsls	r3, r3, #10
 80016de:	b29a      	uxth	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	801a      	strh	r2, [r3, #0]
 80016e4:	e017      	b.n	8001716 <PCD_EP_ISR_Handler+0x29c>
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	633b      	str	r3, [r7, #48]	; 0x30
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <PCD_EP_ISR_Handler+0x286>
 80016fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fc:	3b01      	subs	r3, #1
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	b29b      	uxth	r3, r3
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	b29b      	uxth	r3, r3
 8001708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800170c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001710:	b29a      	uxth	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001726:	827b      	strh	r3, [r7, #18]
 8001728:	8a7b      	ldrh	r3, [r7, #18]
 800172a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800172e:	827b      	strh	r3, [r7, #18]
 8001730:	8a7b      	ldrh	r3, [r7, #18]
 8001732:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001736:	827b      	strh	r3, [r7, #18]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	8a7b      	ldrh	r3, [r7, #18]
 800173e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174e:	b29b      	uxth	r3, r3
 8001750:	8013      	strh	r3, [r2, #0]
 8001752:	e177      	b.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001766:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800176a:	2b00      	cmp	r3, #0
 800176c:	f280 80ea 	bge.w	8001944 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29a      	uxth	r2, r3
 8001782:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001786:	4013      	ands	r3, r2
 8001788:	853b      	strh	r3, [r7, #40]	; 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800179a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800179e:	b292      	uxth	r2, r2
 80017a0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	7b1b      	ldrb	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d122      	bne.n	8001806 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4413      	add	r3, r2
 80017d4:	3306      	adds	r3, #6
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017e8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80017ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 8087 	beq.w	8001900 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	6959      	ldr	r1, [r3, #20]
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	88da      	ldrh	r2, [r3, #6]
 80017fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001800:	f003 fa1e 	bl	8004c40 <USB_ReadPMA>
 8001804:	e07c      	b.n	8001900 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	78db      	ldrb	r3, [r3, #3]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d108      	bne.n	8001820 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800180e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001810:	461a      	mov	r2, r3
 8001812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f923 	bl	8001a60 <HAL_PCD_EP_DB_Receive>
 800181a:	4603      	mov	r3, r0
 800181c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800181e:	e06f      	b.n	8001900 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183a:	847b      	strh	r3, [r7, #34]	; 0x22
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800184c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800185c:	b29b      	uxth	r3, r3
 800185e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d021      	beq.n	80018be <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001882:	b29b      	uxth	r3, r3
 8001884:	461a      	mov	r2, r3
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	3302      	adds	r3, #2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4413      	add	r3, r2
 8001898:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02a      	beq.n	8001900 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	6959      	ldr	r1, [r3, #20]
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	891a      	ldrh	r2, [r3, #8]
 80018b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018b8:	f003 f9c2 	bl	8004c40 <USB_ReadPMA>
 80018bc:	e020      	b.n	8001900 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	3306      	adds	r3, #6
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	6959      	ldr	r1, [r3, #20]
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	895a      	ldrh	r2, [r3, #10]
 80018fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018fc:	f003 f9a0 	bl	8004c40 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	69da      	ldr	r2, [r3, #28]
 8001904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001906:	441a      	add	r2, r3
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001912:	441a      	add	r2, r3
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <PCD_EP_ISR_Handler+0x4b0>
 8001920:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	429a      	cmp	r2, r3
 8001928:	d206      	bcs.n	8001938 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f007 fbf5 	bl	8009120 <HAL_PCD_DataOutStageCallback>
 8001936:	e005      	b.n	8001944 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800193e:	4618      	mov	r0, r3
 8001940:	f001 fedc 	bl	80036fc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001944:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194a:	2b00      	cmp	r3, #0
 800194c:	d07a      	beq.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 800194e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800197c:	843b      	strh	r3, [r7, #32]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	441a      	add	r2, r3
 800198c:	8c3b      	ldrh	r3, [r7, #32]
 800198e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001996:	b29b      	uxth	r3, r3
 8001998:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	78db      	ldrb	r3, [r3, #3]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d108      	bne.n	80019b4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d146      	bne.n	8001a38 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d141      	bne.n	8001a38 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	3302      	adds	r3, #2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019dc:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	8bfb      	ldrh	r3, [r7, #30]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d906      	bls.n	80019f6 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	8bfb      	ldrh	r3, [r7, #30]
 80019ee:	1ad2      	subs	r2, r2, r3
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	e002      	b.n	80019fc <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d106      	bne.n	8001a12 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f007 fba3 	bl	8009156 <HAL_PCD_DataInStageCallback>
 8001a10:	e018      	b.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	8bfb      	ldrh	r3, [r7, #30]
 8001a18:	441a      	add	r2, r3
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	8bfb      	ldrh	r3, [r7, #30]
 8001a24:	441a      	add	r2, r3
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fe63 	bl	80036fc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a36:	e005      	b.n	8001a44 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f91b 	bl	8001c7a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f6ff ad17 	blt.w	8001484 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3738      	adds	r7, #56	; 0x38
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b088      	sub	sp, #32
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d07e      	beq.n	8001b76 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aa0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	8b7b      	ldrh	r3, [r7, #26]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d306      	bcc.n	8001aba <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	699a      	ldr	r2, [r3, #24]
 8001ab0:	8b7b      	ldrh	r3, [r7, #26]
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	619a      	str	r2, [r3, #24]
 8001ab8:	e002      	b.n	8001ac0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d123      	bne.n	8001b10 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae2:	833b      	strh	r3, [r7, #24]
 8001ae4:	8b3b      	ldrh	r3, [r7, #24]
 8001ae6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001aea:	833b      	strh	r3, [r7, #24]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	441a      	add	r2, r3
 8001afa:	8b3b      	ldrh	r3, [r7, #24]
 8001afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d01f      	beq.n	8001b5a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b34:	82fb      	strh	r3, [r7, #22]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	441a      	add	r2, r3
 8001b44:	8afb      	ldrh	r3, [r7, #22]
 8001b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b5a:	8b7b      	ldrh	r3, [r7, #26]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8087 	beq.w	8001c70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	891a      	ldrh	r2, [r3, #8]
 8001b6e:	8b7b      	ldrh	r3, [r7, #26]
 8001b70:	f003 f866 	bl	8004c40 <USB_ReadPMA>
 8001b74:	e07c      	b.n	8001c70 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3306      	adds	r3, #6
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b9e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	8b7b      	ldrh	r3, [r7, #26]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d306      	bcc.n	8001bb8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	8b7b      	ldrh	r3, [r7, #26]
 8001bb0:	1ad2      	subs	r2, r2, r3
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	619a      	str	r2, [r3, #24]
 8001bb6:	e002      	b.n	8001bbe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d123      	bne.n	8001c0e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be0:	83fb      	strh	r3, [r7, #30]
 8001be2:	8bfb      	ldrh	r3, [r7, #30]
 8001be4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001be8:	83fb      	strh	r3, [r7, #30]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	441a      	add	r2, r3
 8001bf8:	8bfb      	ldrh	r3, [r7, #30]
 8001bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11f      	bne.n	8001c58 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c32:	83bb      	strh	r3, [r7, #28]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	441a      	add	r2, r3
 8001c42:	8bbb      	ldrh	r3, [r7, #28]
 8001c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c58:	8b7b      	ldrh	r3, [r7, #26]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	6959      	ldr	r1, [r3, #20]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	895a      	ldrh	r2, [r3, #10]
 8001c6a:	8b7b      	ldrh	r3, [r7, #26]
 8001c6c:	f002 ffe8 	bl	8004c40 <USB_ReadPMA>
    }
  }

  return count;
 8001c70:	8b7b      	ldrh	r3, [r7, #26]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b092      	sub	sp, #72	; 0x48
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	4613      	mov	r3, r2
 8001c86:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8132 	beq.w	8001ef8 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cb6:	881b      	ldrh	r3, [r3, #0]
 8001cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cbc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d906      	bls.n	8001cd6 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001cce:	1ad2      	subs	r2, r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	619a      	str	r2, [r3, #24]
 8001cd4:	e002      	b.n	8001cdc <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d12c      	bne.n	8001d3e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f007 fa33 	bl	8009156 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 822f 	beq.w	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d16:	827b      	strh	r3, [r7, #18]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	441a      	add	r2, r3
 8001d26:	8a7b      	ldrh	r3, [r7, #18]
 8001d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	8013      	strh	r3, [r2, #0]
 8001d3c:	e20d      	b.n	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01f      	beq.n	8001d88 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d62:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	441a      	add	r2, r3
 8001d72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	f040 81e3 	bne.w	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d9a:	441a      	add	r2, r3
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001da6:	441a      	add	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d309      	bcc.n	8001dcc <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	1ad2      	subs	r2, r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	621a      	str	r2, [r3, #32]
 8001dca:	e014      	b.n	8001df6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d106      	bne.n	8001de2 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001dd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dd6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001de0:	e009      	b.n	8001df6 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d155      	bne.n	8001eaa <HAL_PCD_EP_DB_Transmit+0x230>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4413      	add	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	011a      	lsls	r2, r3, #4
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d112      	bne.n	8001e52 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	801a      	strh	r2, [r3, #0]
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	801a      	strh	r2, [r3, #0]
 8001e50:	e047      	b.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	2b3e      	cmp	r3, #62	; 0x3e
 8001e56:	d811      	bhi.n	8001e7c <HAL_PCD_EP_DB_Transmit+0x202>
 8001e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e032      	b.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d102      	bne.n	8001e92 <HAL_PCD_EP_DB_Transmit+0x218>
 8001e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	e01b      	b.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	785b      	ldrb	r3, [r3, #1]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d117      	bne.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	623b      	str	r3, [r7, #32]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	623b      	str	r3, [r7, #32]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	011a      	lsls	r2, r3, #4
 8001ed0:	6a3b      	ldr	r3, [r7, #32]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	6959      	ldr	r1, [r3, #20]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	891a      	ldrh	r2, [r3, #8]
 8001eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	f002 fe61 	bl	8004bb8 <USB_WritePMA>
 8001ef6:	e130      	b.n	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3306      	adds	r3, #6
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f20:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d306      	bcc.n	8001f3a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f32:	1ad2      	subs	r2, r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	619a      	str	r2, [r3, #24]
 8001f38:	e002      	b.n	8001f40 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d12c      	bne.n	8001fa2 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f007 f901 	bl	8009156 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 80fd 	bne.w	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	441a      	add	r2, r3
 8001f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	8013      	strh	r3, [r2, #0]
 8001fa0:	e0db      	b.n	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d11f      	bne.n	8001fec <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	441a      	add	r2, r3
 8001fd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001fd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fe0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	f040 80b1 	bne.w	800215a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	695a      	ldr	r2, [r3, #20]
 8001ffc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ffe:	441a      	add	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	69da      	ldr	r2, [r3, #28]
 8002008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800200a:	441a      	add	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6a1a      	ldr	r2, [r3, #32]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d309      	bcc.n	8002030 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002028:	1ad2      	subs	r2, r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	621a      	str	r2, [r3, #32]
 800202e:	e014      	b.n	800205a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002038:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800203a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002044:	e009      	b.n	800205a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d155      	bne.n	8002114 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002076:	b29b      	uxth	r3, r3
 8002078:	461a      	mov	r2, r3
 800207a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207c:	4413      	add	r3, r2
 800207e:	647b      	str	r3, [r7, #68]	; 0x44
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	011a      	lsls	r2, r3, #4
 8002086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002088:	4413      	add	r3, r2
 800208a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800208e:	643b      	str	r3, [r7, #64]	; 0x40
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	2b00      	cmp	r3, #0
 8002094:	d112      	bne.n	80020bc <HAL_PCD_EP_DB_Transmit+0x442>
 8002096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a8:	881b      	ldrh	r3, [r3, #0]
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b8:	801a      	strh	r2, [r3, #0]
 80020ba:	e044      	b.n	8002146 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020be:	2b3e      	cmp	r3, #62	; 0x3e
 80020c0:	d811      	bhi.n	80020e6 <HAL_PCD_EP_DB_Transmit+0x46c>
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d002      	beq.n	80020d8 <HAL_PCD_EP_DB_Transmit+0x45e>
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	3301      	adds	r3, #1
 80020d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020da:	b29b      	uxth	r3, r3
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	b29a      	uxth	r2, r3
 80020e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e2:	801a      	strh	r2, [r3, #0]
 80020e4:	e02f      	b.n	8002146 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020e8:	095b      	lsrs	r3, r3, #5
 80020ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_PCD_EP_DB_Transmit+0x482>
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	3b01      	subs	r3, #1
 80020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fe:	b29b      	uxth	r3, r3
 8002100:	029b      	lsls	r3, r3, #10
 8002102:	b29b      	uxth	r3, r3
 8002104:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002108:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800210c:	b29a      	uxth	r2, r3
 800210e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002110:	801a      	strh	r2, [r3, #0]
 8002112:	e018      	b.n	8002146 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	785b      	ldrb	r3, [r3, #1]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d114      	bne.n	8002146 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800212a:	4413      	add	r3, r2
 800212c:	637b      	str	r3, [r7, #52]	; 0x34
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	011a      	lsls	r2, r3, #4
 8002134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002136:	4413      	add	r3, r2
 8002138:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002140:	b29a      	uxth	r2, r3
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	6959      	ldr	r1, [r3, #20]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	895a      	ldrh	r2, [r3, #10]
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002154:	b29b      	uxth	r3, r3
 8002156:	f002 fd2f 	bl	8004bb8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002174:	823b      	strh	r3, [r7, #16]
 8002176:	8a3b      	ldrh	r3, [r7, #16]
 8002178:	f083 0310 	eor.w	r3, r3, #16
 800217c:	823b      	strh	r3, [r7, #16]
 800217e:	8a3b      	ldrh	r3, [r7, #16]
 8002180:	f083 0320 	eor.w	r3, r3, #32
 8002184:	823b      	strh	r3, [r7, #16]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	441a      	add	r2, r3
 8002194:	8a3b      	ldrh	r3, [r7, #16]
 8002196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800219a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800219e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	817b      	strh	r3, [r7, #10]
 80021c2:	4613      	mov	r3, r2
 80021c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e009      	b.n	80021fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021ea:	897a      	ldrh	r2, [r7, #10]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80021fe:	893b      	ldrh	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2200      	movs	r2, #0
 8002208:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	b29a      	uxth	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	80da      	strh	r2, [r3, #6]
 8002212:	e00b      	b.n	800222c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2201      	movs	r2, #1
 8002218:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	b29a      	uxth	r2, r3
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	b29a      	uxth	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e26c      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 8087 	beq.w	8002366 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002258:	4b92      	ldr	r3, [pc, #584]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 030c 	and.w	r3, r3, #12
 8002260:	2b04      	cmp	r3, #4
 8002262:	d00c      	beq.n	800227e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002264:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d112      	bne.n	8002296 <HAL_RCC_OscConfig+0x5e>
 8002270:	4b8c      	ldr	r3, [pc, #560]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800227c:	d10b      	bne.n	8002296 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d06c      	beq.n	8002364 <HAL_RCC_OscConfig+0x12c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d168      	bne.n	8002364 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e246      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x76>
 80022a0:	4b80      	ldr	r3, [pc, #512]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a7f      	ldr	r2, [pc, #508]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	e02e      	b.n	800230c <HAL_RCC_OscConfig+0xd4>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x98>
 80022b6:	4b7b      	ldr	r3, [pc, #492]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a7a      	ldr	r2, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	4b78      	ldr	r3, [pc, #480]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a77      	ldr	r2, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xd4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0xbc>
 80022da:	4b72      	ldr	r3, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a71      	ldr	r2, [pc, #452]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b6f      	ldr	r3, [pc, #444]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6e      	ldr	r2, [pc, #440]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xd4>
 80022f4:	4b6b      	ldr	r3, [pc, #428]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a6a      	ldr	r2, [pc, #424]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a67      	ldr	r2, [pc, #412]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800230a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe f96a 	bl	80005ec <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7fe f966 	bl	80005ec <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	; 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1fa      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xe4>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe f956 	bl	80005ec <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7fe f952 	bl	80005ec <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	; 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e1e6      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002356:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x10c>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d063      	beq.n	800243a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002372:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00b      	beq.n	8002396 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800237e:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b08      	cmp	r3, #8
 8002388:	d11c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x18c>
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d116      	bne.n	80023c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d005      	beq.n	80023ae <HAL_RCC_OscConfig+0x176>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d001      	beq.n	80023ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e1ba      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4939      	ldr	r1, [pc, #228]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023c2:	e03a      	b.n	800243a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023cc:	4b36      	ldr	r3, [pc, #216]	; (80024a8 <HAL_RCC_OscConfig+0x270>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe f90b 	bl	80005ec <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023da:	f7fe f907 	bl	80005ec <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e19b      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ec:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4927      	ldr	r1, [pc, #156]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]
 800240c:	e015      	b.n	800243a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_RCC_OscConfig+0x270>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe f8ea 	bl	80005ec <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241c:	f7fe f8e6 	bl	80005ec <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e17a      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d03a      	beq.n	80024bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d019      	beq.n	8002482 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_RCC_OscConfig+0x274>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002454:	f7fe f8ca 	bl	80005ec <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245c:	f7fe f8c6 	bl	80005ec <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e15a      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCC_OscConfig+0x26c>)
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800247a:	2001      	movs	r0, #1
 800247c:	f000 faa8 	bl	80029d0 <RCC_Delay>
 8002480:	e01c      	b.n	80024bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_RCC_OscConfig+0x274>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002488:	f7fe f8b0 	bl	80005ec <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248e:	e00f      	b.n	80024b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002490:	f7fe f8ac 	bl	80005ec <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d908      	bls.n	80024b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e140      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	42420000 	.word	0x42420000
 80024ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b0:	4b9e      	ldr	r3, [pc, #632]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e9      	bne.n	8002490 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80a6 	beq.w	8002616 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ce:	4b97      	ldr	r3, [pc, #604]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10d      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024da:	4b94      	ldr	r3, [pc, #592]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4a93      	ldr	r2, [pc, #588]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e4:	61d3      	str	r3, [r2, #28]
 80024e6:	4b91      	ldr	r3, [pc, #580]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024f2:	2301      	movs	r3, #1
 80024f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	4b8e      	ldr	r3, [pc, #568]	; (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d118      	bne.n	8002534 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002502:	4b8b      	ldr	r3, [pc, #556]	; (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250e:	f7fe f86d 	bl	80005ec <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe f869 	bl	80005ec <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b64      	cmp	r3, #100	; 0x64
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0fd      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x4f8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x312>
 800253c:	4b7b      	ldr	r3, [pc, #492]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a7a      	ldr	r2, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	e02d      	b.n	80025a6 <HAL_RCC_OscConfig+0x36e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x334>
 8002552:	4b76      	ldr	r3, [pc, #472]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a75      	ldr	r2, [pc, #468]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a72      	ldr	r2, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6213      	str	r3, [r2, #32]
 800256a:	e01c      	b.n	80025a6 <HAL_RCC_OscConfig+0x36e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b05      	cmp	r3, #5
 8002572:	d10c      	bne.n	800258e <HAL_RCC_OscConfig+0x356>
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	4a6c      	ldr	r2, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 800257a:	f043 0304 	orr.w	r3, r3, #4
 800257e:	6213      	str	r3, [r2, #32]
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a69      	ldr	r2, [pc, #420]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	e00b      	b.n	80025a6 <HAL_RCC_OscConfig+0x36e>
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	4a66      	ldr	r2, [pc, #408]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6213      	str	r3, [r2, #32]
 800259a:	4b64      	ldr	r3, [pc, #400]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a63      	ldr	r2, [pc, #396]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	f023 0304 	bic.w	r3, r3, #4
 80025a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d015      	beq.n	80025da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ae:	f7fe f81d 	bl	80005ec <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7fe f819 	bl	80005ec <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0ab      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b57      	ldr	r3, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ee      	beq.n	80025b6 <HAL_RCC_OscConfig+0x37e>
 80025d8:	e014      	b.n	8002604 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025da:	f7fe f807 	bl	80005ec <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025e0:	e00a      	b.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7fe f803 	bl	80005ec <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e095      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	4b4c      	ldr	r3, [pc, #304]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1ee      	bne.n	80025e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002604:	7dfb      	ldrb	r3, [r7, #23]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b48      	ldr	r3, [pc, #288]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4a47      	ldr	r2, [pc, #284]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 8081 	beq.w	8002722 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d061      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d146      	bne.n	80026c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002634:	4b3f      	ldr	r3, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x4fc>)
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263a:	f7fd ffd7 	bl	80005ec <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7fd ffd3 	bl	80005ec <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e067      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002654:	4b35      	ldr	r3, [pc, #212]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002668:	d108      	bne.n	800267c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	492d      	ldr	r1, [pc, #180]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002678:	4313      	orrs	r3, r2
 800267a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267c:	4b2b      	ldr	r3, [pc, #172]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a19      	ldr	r1, [r3, #32]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	430b      	orrs	r3, r1
 800268e:	4927      	ldr	r1, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <HAL_RCC_OscConfig+0x4fc>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fd ffa7 	bl	80005ec <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fd ffa3 	bl	80005ec <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e037      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x46a>
 80026c0:	e02f      	b.n	8002722 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	4b1c      	ldr	r3, [pc, #112]	; (8002734 <HAL_RCC_OscConfig+0x4fc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fd ff90 	bl	80005ec <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fd ff8c 	bl	80005ec <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e020      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x498>
 80026ee:	e018      	b.n	8002722 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e013      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d001      	beq.n	8002722 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	40007000 	.word	0x40007000
 8002734:	42420060 	.word	0x42420060

08002738 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0d0      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800274c:	4b6a      	ldr	r3, [pc, #424]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	429a      	cmp	r2, r3
 8002758:	d910      	bls.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275a:	4b67      	ldr	r3, [pc, #412]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	4965      	ldr	r1, [pc, #404]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	4313      	orrs	r3, r2
 8002768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800279e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d040      	beq.n	8002858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d115      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f6:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e073      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002806:	4b3d      	ldr	r3, [pc, #244]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e06b      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002816:	4b39      	ldr	r3, [pc, #228]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f023 0203 	bic.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4936      	ldr	r1, [pc, #216]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	4313      	orrs	r3, r2
 8002826:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002828:	f7fd fee0 	bl	80005ec <HAL_GetTick>
 800282c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	e00a      	b.n	8002846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002830:	f7fd fedc 	bl	80005ec <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	; 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e053      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 020c 	and.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d1eb      	bne.n	8002830 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d210      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4922      	ldr	r1, [pc, #136]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e032      	b.n	80028ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028c6:	f000 f821 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ca:	4601      	mov	r1, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	5cd3      	ldrb	r3, [r2, r3]
 80028da:	fa21 f303 	lsr.w	r3, r1, r3
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1cc>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe3e 	bl	8000568 <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40022000 	.word	0x40022000
 80028fc:	40021000 	.word	0x40021000
 8002900:	08009754 	.word	0x08009754
 8002904:	20000000 	.word	0x20000000
 8002908:	20000004 	.word	0x20000004

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b490      	push	{r4, r7}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002914:	1d3c      	adds	r4, r7, #4
 8002916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800291c:	4b28      	ldr	r3, [pc, #160]	; (80029c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
 800292e:	2300      	movs	r3, #0
 8002930:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002936:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x40>
 8002946:	2b08      	cmp	r3, #8
 8002948:	d003      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x46>
 800294a:	e02d      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800294e:	623b      	str	r3, [r7, #32]
      break;
 8002950:	e02d      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	0c9b      	lsrs	r3, r3, #18
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800295e:	4413      	add	r3, r2
 8002960:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002964:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0c5b      	lsrs	r3, r3, #17
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800297e:	4413      	add	r3, r2
 8002980:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002984:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800298a:	fb02 f203 	mul.w	r2, r2, r3
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
 8002996:	e004      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 800299c:	fb02 f303 	mul.w	r3, r2, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	623b      	str	r3, [r7, #32]
      break;
 80029a6:	e002      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029aa:	623b      	str	r3, [r7, #32]
      break;
 80029ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3728      	adds	r7, #40	; 0x28
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc90      	pop	{r4, r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	080096bc 	.word	0x080096bc
 80029c0:	080096cc 	.word	0x080096cc
 80029c4:	40021000 	.word	0x40021000
 80029c8:	007a1200 	.word	0x007a1200
 80029cc:	003d0900 	.word	0x003d0900

080029d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <RCC_Delay+0x34>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	; (8002a08 <RCC_Delay+0x38>)
 80029de:	fba2 2303 	umull	r2, r3, r2, r3
 80029e2:	0a5b      	lsrs	r3, r3, #9
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029ec:	bf00      	nop
  }
  while (Delay --);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	60fa      	str	r2, [r7, #12]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <RCC_Delay+0x1c>
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000
 8002a08:	10624dd3 	.word	0x10624dd3

08002a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d07d      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2c:	4b4f      	ldr	r3, [pc, #316]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a42:	61d3      	str	r3, [r2, #28]
 8002a44:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a50:	2301      	movs	r3, #1
 8002a52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d118      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a60:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a6c:	f7fd fdbe 	bl	80005ec <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	e008      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a74:	f7fd fdba 	bl	80005ec <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e06d      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a92:	4b36      	ldr	r3, [pc, #216]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d02e      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d027      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ab0:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
 8002ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aba:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac0:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ac6:	4a29      	ldr	r2, [pc, #164]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d014      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fd fd89 	bl	80005ec <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fd fd85 	bl	80005ec <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e036      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ee      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4917      	ldr	r1, [pc, #92]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d105      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	490b      	ldr	r1, [pc, #44]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b4e:	4b07      	ldr	r3, [pc, #28]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4904      	ldr	r1, [pc, #16]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40007000 	.word	0x40007000
 8002b74:	42420440 	.word	0x42420440

08002b78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002b78:	b084      	sub	sp, #16
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	f107 0014 	add.w	r0, r7, #20
 8002b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	b004      	add	sp, #16
 8002b96:	4770      	bx	lr

08002b98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002ba8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr

08002bc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bcc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4013      	ands	r3, r2
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc80      	pop	{r7}
 8002bf6:	4770      	bx	lr

08002bf8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c10:	b084      	sub	sp, #16
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
 8002c1a:	f107 0014 	add.w	r0, r7, #20
 8002c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	b004      	add	sp, #16
 8002c4e:	4770      	bx	lr

08002c50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b09b      	sub	sp, #108	; 0x6c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	881b      	ldrh	r3, [r3, #0]
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	78db      	ldrb	r3, [r3, #3]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d81f      	bhi.n	8002cc2 <USB_ActivateEndpoint+0x72>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <USB_ActivateEndpoint+0x38>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002cb5 	.word	0x08002cb5
 8002c90:	08002ccb 	.word	0x08002ccb
 8002c94:	08002ca7 	.word	0x08002ca7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002c98:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002c9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ca4:	e012      	b.n	8002ccc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002ca6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002caa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002cae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002cb2:	e00b      	b.n	8002ccc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002cb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cbc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002cc0:	e004      	b.n	8002ccc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002cc8:	e000      	b.n	8002ccc <USB_ActivateEndpoint+0x7c>
      break;
 8002cca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	441a      	add	r2, r3
 8002cd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	441a      	add	r2, r3
 8002d1c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7b1b      	ldrb	r3, [r3, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 8149 	bne.w	8002fd0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8084 	beq.w	8002e50 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	4413      	add	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	011a      	lsls	r2, r3, #4
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	88db      	ldrh	r3, [r3, #6]
 8002d70:	085b      	lsrs	r3, r3, #1
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	81fb      	strh	r3, [r7, #14]
 8002d8a:	89fb      	ldrh	r3, [r7, #14]
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01b      	beq.n	8002dcc <USB_ActivateEndpoint+0x17c>
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	81bb      	strh	r3, [r7, #12]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	89bb      	ldrh	r3, [r7, #12]
 8002db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	78db      	ldrb	r3, [r3, #3]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d020      	beq.n	8002e16 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dea:	813b      	strh	r3, [r7, #8]
 8002dec:	893b      	ldrh	r3, [r7, #8]
 8002dee:	f083 0320 	eor.w	r3, r3, #32
 8002df2:	813b      	strh	r3, [r7, #8]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	893b      	ldrh	r3, [r7, #8]
 8002e00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	8013      	strh	r3, [r2, #0]
 8002e14:	e27f      	b.n	8003316 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2c:	817b      	strh	r3, [r7, #10]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	897b      	ldrh	r3, [r7, #10]
 8002e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	8013      	strh	r3, [r2, #0]
 8002e4e:	e262      	b.n	8003316 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	4413      	add	r3, r2
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	011a      	lsls	r2, r3, #4
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	88db      	ldrh	r3, [r3, #6]
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	4413      	add	r3, r2
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	011a      	lsls	r2, r3, #4
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d112      	bne.n	8002ed6 <USB_ActivateEndpoint+0x286>
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	801a      	strh	r2, [r3, #0]
 8002ed4:	e02f      	b.n	8002f36 <USB_ActivateEndpoint+0x2e6>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b3e      	cmp	r3, #62	; 0x3e
 8002edc:	d813      	bhi.n	8002f06 <USB_ActivateEndpoint+0x2b6>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <USB_ActivateEndpoint+0x2a8>
 8002ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	029b      	lsls	r3, r3, #10
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e017      	b.n	8002f36 <USB_ActivateEndpoint+0x2e6>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d102      	bne.n	8002f20 <USB_ActivateEndpoint+0x2d0>
 8002f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	029b      	lsls	r3, r3, #10
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	83fb      	strh	r3, [r7, #30]
 8002f44:	8bfb      	ldrh	r3, [r7, #30]
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01b      	beq.n	8002f86 <USB_ActivateEndpoint+0x336>
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	881b      	ldrh	r3, [r3, #0]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f64:	83bb      	strh	r3, [r7, #28]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	8bbb      	ldrh	r3, [r7, #28]
 8002f72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9c:	837b      	strh	r3, [r7, #26]
 8002f9e:	8b7b      	ldrh	r3, [r7, #26]
 8002fa0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fa4:	837b      	strh	r3, [r7, #26]
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
 8002fa8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002fac:	837b      	strh	r3, [r7, #26]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	441a      	add	r2, r3
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]
 8002fce:	e1a2      	b.n	8003316 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	441a      	add	r2, r3
 8002ff4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003000:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003008:	b29b      	uxth	r3, r3
 800300a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003016:	b29b      	uxth	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301c:	4413      	add	r3, r2
 800301e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	011a      	lsls	r2, r3, #4
 8003026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003028:	4413      	add	r3, r2
 800302a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800302e:	657b      	str	r3, [r7, #84]	; 0x54
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	891b      	ldrh	r3, [r3, #8]
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	b29b      	uxth	r3, r3
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	653b      	str	r3, [r7, #80]	; 0x50
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800304a:	b29b      	uxth	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003050:	4413      	add	r3, r2
 8003052:	653b      	str	r3, [r7, #80]	; 0x50
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	011a      	lsls	r2, r3, #4
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	4413      	add	r3, r2
 800305e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	895b      	ldrh	r3, [r3, #10]
 8003068:	085b      	lsrs	r3, r3, #1
 800306a:	b29b      	uxth	r3, r3
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003072:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f040 8091 	bne.w	80031a0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800308c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800308e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01b      	beq.n	80030ce <USB_ActivateEndpoint+0x47e>
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	441a      	add	r2, r3
 80030b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80030ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	873b      	strh	r3, [r7, #56]	; 0x38
 80030dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01b      	beq.n	800311e <USB_ActivateEndpoint+0x4ce>
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	881b      	ldrh	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	441a      	add	r2, r3
 8003108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800310a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003116:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800311a:	b29b      	uxth	r3, r3
 800311c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003134:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003136:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003138:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800313c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800313e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003140:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003144:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	441a      	add	r2, r3
 8003150:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	b29b      	uxth	r3, r3
 8003164:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	b29b      	uxth	r3, r3
 8003174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317c:	867b      	strh	r3, [r7, #50]	; 0x32
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	441a      	add	r2, r3
 8003188:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800318a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800318e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800319a:	b29b      	uxth	r3, r3
 800319c:	8013      	strh	r3, [r2, #0]
 800319e:	e0ba      	b.n	8003316 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d01d      	beq.n	80031f8 <USB_ActivateEndpoint+0x5a8>
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	441a      	add	r2, r3
 80031e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80031e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003208:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800320c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003210:	2b00      	cmp	r3, #0
 8003212:	d01d      	beq.n	8003250 <USB_ActivateEndpoint+0x600>
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800323c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003248:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800324c:	b29b      	uxth	r3, r3
 800324e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	78db      	ldrb	r3, [r3, #3]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d024      	beq.n	80032a2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800326e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003272:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003276:	f083 0320 	eor.w	r3, r3, #32
 800327a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800328c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329c:	b29b      	uxth	r3, r3
 800329e:	8013      	strh	r3, [r2, #0]
 80032a0:	e01d      	b.n	80032de <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	441a      	add	r2, r3
 80032c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80032ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	441a      	add	r2, r3
 8003300:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800330a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800330e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003312:	b29b      	uxth	r3, r3
 8003314:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003316:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800331a:	4618      	mov	r0, r3
 800331c:	376c      	adds	r7, #108	; 0x6c
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003324:	b480      	push	{r7}
 8003326:	b08d      	sub	sp, #52	; 0x34
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	7b1b      	ldrb	r3, [r3, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	f040 808e 	bne.w	8003454 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d044      	beq.n	80033ca <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	81bb      	strh	r3, [r7, #12]
 800334e:	89bb      	ldrh	r3, [r7, #12]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d01b      	beq.n	8003390 <USB_DeactivateEndpoint+0x6c>
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	881b      	ldrh	r3, [r3, #0]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	817b      	strh	r3, [r7, #10]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	441a      	add	r2, r3
 800337a:	897b      	ldrh	r3, [r7, #10]
 800337c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003388:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800338c:	b29b      	uxth	r3, r3
 800338e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	881b      	ldrh	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a6:	813b      	strh	r3, [r7, #8]
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	441a      	add	r2, r3
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
 80033c8:	e192      	b.n	80036f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	881b      	ldrh	r3, [r3, #0]
 80033d6:	827b      	strh	r3, [r7, #18]
 80033d8:	8a7b      	ldrh	r3, [r7, #18]
 80033da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01b      	beq.n	800341a <USB_DeactivateEndpoint+0xf6>
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f8:	823b      	strh	r3, [r7, #16]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	441a      	add	r2, r3
 8003404:	8a3b      	ldrh	r3, [r7, #16]
 8003406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800340a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800340e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003416:	b29b      	uxth	r3, r3
 8003418:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	81fb      	strh	r3, [r7, #14]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	89fb      	ldrh	r3, [r7, #14]
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
 8003452:	e14d      	b.n	80036f0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	785b      	ldrb	r3, [r3, #1]
 8003458:	2b00      	cmp	r3, #0
 800345a:	f040 80a5 	bne.w	80035a8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	843b      	strh	r3, [r7, #32]
 800346c:	8c3b      	ldrh	r3, [r7, #32]
 800346e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d01b      	beq.n	80034ae <USB_DeactivateEndpoint+0x18a>
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348c:	83fb      	strh	r3, [r7, #30]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	441a      	add	r2, r3
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800349e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	83bb      	strh	r3, [r7, #28]
 80034bc:	8bbb      	ldrh	r3, [r7, #28]
 80034be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d01b      	beq.n	80034fe <USB_DeactivateEndpoint+0x1da>
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	837b      	strh	r3, [r7, #26]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	8b7b      	ldrh	r3, [r7, #26]
 80034ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003514:	833b      	strh	r3, [r7, #24]
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	441a      	add	r2, r3
 8003520:	8b3b      	ldrh	r3, [r7, #24]
 8003522:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003526:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800352a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003532:	b29b      	uxth	r3, r3
 8003534:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b29b      	uxth	r3, r3
 8003544:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354c:	82fb      	strh	r3, [r7, #22]
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	441a      	add	r2, r3
 8003558:	8afb      	ldrh	r3, [r7, #22]
 800355a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800355e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800356a:	b29b      	uxth	r3, r3
 800356c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	b29b      	uxth	r3, r3
 800357c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003584:	82bb      	strh	r3, [r7, #20]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	441a      	add	r2, r3
 8003590:	8abb      	ldrh	r3, [r7, #20]
 8003592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800359a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	8013      	strh	r3, [r2, #0]
 80035a6:	e0a3      	b.n	80036f0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	881b      	ldrh	r3, [r3, #0]
 80035b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <USB_DeactivateEndpoint+0x2d4>
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80035e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003606:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01b      	beq.n	8003648 <USB_DeactivateEndpoint+0x324>
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	881b      	ldrh	r3, [r3, #0]
 800361c:	b29b      	uxth	r3, r3
 800361e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003626:	853b      	strh	r3, [r7, #40]	; 0x28
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	441a      	add	r2, r3
 8003632:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003640:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003644:	b29b      	uxth	r3, r3
 8003646:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800366c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367c:	b29b      	uxth	r3, r3
 800367e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003696:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	441a      	add	r2, r3
 80036a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3734      	adds	r7, #52	; 0x34
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b0c4      	sub	sp, #272	; 0x110
 8003700:	af00      	add	r7, sp, #0
 8003702:	1d3b      	adds	r3, r7, #4
 8003704:	6018      	str	r0, [r3, #0]
 8003706:	463b      	mov	r3, r7
 8003708:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800370a:	463b      	mov	r3, r7
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 8557 	bne.w	80041c4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003716:	463b      	mov	r3, r7
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	463b      	mov	r3, r7
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	429a      	cmp	r2, r3
 8003724:	d905      	bls.n	8003732 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003726:	463b      	mov	r3, r7
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003730:	e004      	b.n	800373c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003732:	463b      	mov	r3, r7
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800373c:	463b      	mov	r3, r7
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	7b1b      	ldrb	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d12c      	bne.n	80037a0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003746:	463b      	mov	r3, r7
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6959      	ldr	r1, [r3, #20]
 800374c:	463b      	mov	r3, r7
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	88da      	ldrh	r2, [r3, #6]
 8003752:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003756:	b29b      	uxth	r3, r3
 8003758:	1d38      	adds	r0, r7, #4
 800375a:	6800      	ldr	r0, [r0, #0]
 800375c:	f001 fa2c 	bl	8004bb8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800376e:	b29b      	uxth	r3, r3
 8003770:	461a      	mov	r2, r3
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	463b      	mov	r3, r7
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	011a      	lsls	r2, r3, #4
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	4413      	add	r3, r2
 8003784:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003788:	f107 0310 	add.w	r3, r7, #16
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003792:	b29a      	uxth	r2, r3
 8003794:	f107 0310 	add.w	r3, r7, #16
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	f000 bcdd 	b.w	800415a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037a0:	463b      	mov	r3, r7
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	78db      	ldrb	r3, [r3, #3]
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	f040 8347 	bne.w	8003e3a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037ac:	463b      	mov	r3, r7
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6a1a      	ldr	r2, [r3, #32]
 80037b2:	463b      	mov	r3, r7
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f240 82eb 	bls.w	8003d94 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	463b      	mov	r3, r7
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	463b      	mov	r3, r7
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80037ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80037fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003802:	463b      	mov	r3, r7
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800380c:	1ad2      	subs	r2, r2, r3
 800380e:	463b      	mov	r3, r7
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003814:	1d3b      	adds	r3, r7, #4
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	463b      	mov	r3, r7
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	881b      	ldrh	r3, [r3, #0]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8159 	beq.w	8003ae2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
 8003836:	463b      	mov	r3, r7
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	785b      	ldrb	r3, [r3, #1]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d164      	bne.n	800390a <USB_EPStartXfer+0x20e>
 8003840:	1d3b      	adds	r3, r7, #4
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003846:	1d3b      	adds	r3, r7, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384e:	b29b      	uxth	r3, r3
 8003850:	461a      	mov	r2, r3
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	4413      	add	r3, r2
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003858:	463b      	mov	r3, r7
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	011a      	lsls	r2, r3, #4
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	4413      	add	r3, r2
 8003864:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d112      	bne.n	8003898 <USB_EPStartXfer+0x19c>
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	881b      	ldrh	r3, [r3, #0]
 8003876:	b29b      	uxth	r3, r3
 8003878:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800387c:	b29a      	uxth	r2, r3
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800388c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003890:	b29a      	uxth	r2, r3
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	e054      	b.n	8003942 <USB_EPStartXfer+0x246>
 8003898:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800389c:	2b3e      	cmp	r3, #62	; 0x3e
 800389e:	d817      	bhi.n	80038d0 <USB_EPStartXfer+0x1d4>
 80038a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <USB_EPStartXfer+0x1c4>
 80038b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ba:	3301      	adds	r3, #1
 80038bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	e038      	b.n	8003942 <USB_EPStartXfer+0x246>
 80038d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <USB_EPStartXfer+0x1f4>
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ea:	3b01      	subs	r3, #1
 80038ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	029b      	lsls	r3, r3, #10
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003902:	b29a      	uxth	r2, r3
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	e01b      	b.n	8003942 <USB_EPStartXfer+0x246>
 800390a:	463b      	mov	r3, r7
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d116      	bne.n	8003942 <USB_EPStartXfer+0x246>
 8003914:	1d3b      	adds	r3, r7, #4
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800391c:	b29b      	uxth	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	4413      	add	r3, r2
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	463b      	mov	r3, r7
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	011a      	lsls	r2, r3, #4
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	4413      	add	r3, r2
 8003932:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003936:	633b      	str	r3, [r7, #48]	; 0x30
 8003938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393c:	b29a      	uxth	r2, r3
 800393e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003940:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003942:	463b      	mov	r3, r7
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	895b      	ldrh	r3, [r3, #10]
 8003948:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800394c:	463b      	mov	r3, r7
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6959      	ldr	r1, [r3, #20]
 8003952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003956:	b29b      	uxth	r3, r3
 8003958:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 800395c:	1d38      	adds	r0, r7, #4
 800395e:	6800      	ldr	r0, [r0, #0]
 8003960:	f001 f92a 	bl	8004bb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8003964:	463b      	mov	r3, r7
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695a      	ldr	r2, [r3, #20]
 800396a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396e:	441a      	add	r2, r3
 8003970:	463b      	mov	r3, r7
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003976:	463b      	mov	r3, r7
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a1a      	ldr	r2, [r3, #32]
 800397c:	463b      	mov	r3, r7
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	429a      	cmp	r2, r3
 8003984:	d909      	bls.n	800399a <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003986:	463b      	mov	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1a      	ldr	r2, [r3, #32]
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	1ad2      	subs	r2, r2, r3
 8003992:	463b      	mov	r3, r7
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	621a      	str	r2, [r3, #32]
 8003998:	e008      	b.n	80039ac <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800399a:	463b      	mov	r3, r7
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80039a4:	463b      	mov	r3, r7
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039ac:	463b      	mov	r3, r7
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d164      	bne.n	8003a80 <USB_EPStartXfer+0x384>
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	61fb      	str	r3, [r7, #28]
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	4413      	add	r3, r2
 80039cc:	61fb      	str	r3, [r7, #28]
 80039ce:	463b      	mov	r3, r7
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	011a      	lsls	r2, r3, #4
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039de:	61bb      	str	r3, [r7, #24]
 80039e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d112      	bne.n	8003a0e <USB_EPStartXfer+0x312>
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	801a      	strh	r2, [r3, #0]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	e057      	b.n	8003abe <USB_EPStartXfer+0x3c2>
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a12:	2b3e      	cmp	r3, #62	; 0x3e
 8003a14:	d817      	bhi.n	8003a46 <USB_EPStartXfer+0x34a>
 8003a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a1a:	085b      	lsrs	r3, r3, #1
 8003a1c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d004      	beq.n	8003a36 <USB_EPStartXfer+0x33a>
 8003a2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a30:	3301      	adds	r3, #1
 8003a32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	029b      	lsls	r3, r3, #10
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	801a      	strh	r2, [r3, #0]
 8003a44:	e03b      	b.n	8003abe <USB_EPStartXfer+0x3c2>
 8003a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <USB_EPStartXfer+0x36a>
 8003a5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a60:	3b01      	subs	r3, #1
 8003a62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	029b      	lsls	r3, r3, #10
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	e01e      	b.n	8003abe <USB_EPStartXfer+0x3c2>
 8003a80:	463b      	mov	r3, r7
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	785b      	ldrb	r3, [r3, #1]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d119      	bne.n	8003abe <USB_EPStartXfer+0x3c2>
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a90:	1d3b      	adds	r3, r7, #4
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	4413      	add	r3, r2
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	011a      	lsls	r2, r3, #4
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	4413      	add	r3, r2
 8003aae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ab2:	623b      	str	r3, [r7, #32]
 8003ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003abe:	463b      	mov	r3, r7
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	891b      	ldrh	r3, [r3, #8]
 8003ac4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ac8:	463b      	mov	r3, r7
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6959      	ldr	r1, [r3, #20]
 8003ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ad8:	1d38      	adds	r0, r7, #4
 8003ada:	6800      	ldr	r0, [r0, #0]
 8003adc:	f001 f86c 	bl	8004bb8 <USB_WritePMA>
 8003ae0:	e33b      	b.n	800415a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003ae2:	463b      	mov	r3, r7
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d164      	bne.n	8003bb6 <USB_EPStartXfer+0x4ba>
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af2:	1d3b      	adds	r3, r7, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	4413      	add	r3, r2
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	463b      	mov	r3, r7
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	011a      	lsls	r2, r3, #4
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0e:	4413      	add	r3, r2
 8003b10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d112      	bne.n	8003b44 <USB_EPStartXfer+0x448>
 8003b1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b20:	881b      	ldrh	r3, [r3, #0]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	e057      	b.n	8003bf4 <USB_EPStartXfer+0x4f8>
 8003b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b48:	2b3e      	cmp	r3, #62	; 0x3e
 8003b4a:	d817      	bhi.n	8003b7c <USB_EPStartXfer+0x480>
 8003b4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <USB_EPStartXfer+0x470>
 8003b62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b66:	3301      	adds	r3, #1
 8003b68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e03b      	b.n	8003bf4 <USB_EPStartXfer+0x4f8>
 8003b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <USB_EPStartXfer+0x4a0>
 8003b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b96:	3b01      	subs	r3, #1
 8003b98:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	029b      	lsls	r3, r3, #10
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	e01e      	b.n	8003bf4 <USB_EPStartXfer+0x4f8>
 8003bb6:	463b      	mov	r3, r7
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	785b      	ldrb	r3, [r3, #1]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d119      	bne.n	8003bf4 <USB_EPStartXfer+0x4f8>
 8003bc0:	1d3b      	adds	r3, r7, #4
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc6:	1d3b      	adds	r3, r7, #4
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd4:	4413      	add	r3, r2
 8003bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd8:	463b      	mov	r3, r7
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	011a      	lsls	r2, r3, #4
 8003be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be2:	4413      	add	r3, r2
 8003be4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003be8:	653b      	str	r3, [r7, #80]	; 0x50
 8003bea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bf4:	463b      	mov	r3, r7
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	891b      	ldrh	r3, [r3, #8]
 8003bfa:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bfe:	463b      	mov	r3, r7
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6959      	ldr	r1, [r3, #20]
 8003c04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c0e:	1d38      	adds	r0, r7, #4
 8003c10:	6800      	ldr	r0, [r0, #0]
 8003c12:	f000 ffd1 	bl	8004bb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8003c16:	463b      	mov	r3, r7
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	441a      	add	r2, r3
 8003c22:	463b      	mov	r3, r7
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c28:	463b      	mov	r3, r7
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a1a      	ldr	r2, [r3, #32]
 8003c2e:	463b      	mov	r3, r7
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d909      	bls.n	8003c4c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003c38:	463b      	mov	r3, r7
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a1a      	ldr	r2, [r3, #32]
 8003c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c42:	1ad2      	subs	r2, r2, r3
 8003c44:	463b      	mov	r3, r7
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	621a      	str	r2, [r3, #32]
 8003c4a:	e008      	b.n	8003c5e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c4c:	463b      	mov	r3, r7
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003c56:	463b      	mov	r3, r7
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c5e:	1d3b      	adds	r3, r7, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	647b      	str	r3, [r7, #68]	; 0x44
 8003c64:	463b      	mov	r3, r7
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d164      	bne.n	8003d38 <USB_EPStartXfer+0x63c>
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c82:	4413      	add	r3, r2
 8003c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c86:	463b      	mov	r3, r7
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	011a      	lsls	r2, r3, #4
 8003c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c90:	4413      	add	r3, r2
 8003c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d112      	bne.n	8003cc6 <USB_EPStartXfer+0x5ca>
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	801a      	strh	r2, [r3, #0]
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e054      	b.n	8003d70 <USB_EPStartXfer+0x674>
 8003cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cca:	2b3e      	cmp	r3, #62	; 0x3e
 8003ccc:	d817      	bhi.n	8003cfe <USB_EPStartXfer+0x602>
 8003cce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d004      	beq.n	8003cee <USB_EPStartXfer+0x5f2>
 8003ce4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ce8:	3301      	adds	r3, #1
 8003cea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003cee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	e038      	b.n	8003d70 <USB_EPStartXfer+0x674>
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0c:	f003 031f 	and.w	r3, r3, #31
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <USB_EPStartXfer+0x622>
 8003d14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	029b      	lsls	r3, r3, #10
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e01b      	b.n	8003d70 <USB_EPStartXfer+0x674>
 8003d38:	463b      	mov	r3, r7
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d116      	bne.n	8003d70 <USB_EPStartXfer+0x674>
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d50:	4413      	add	r3, r2
 8003d52:	647b      	str	r3, [r7, #68]	; 0x44
 8003d54:	463b      	mov	r3, r7
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	011a      	lsls	r2, r3, #4
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5e:	4413      	add	r3, r2
 8003d60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d64:	643b      	str	r3, [r7, #64]	; 0x40
 8003d66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d70:	463b      	mov	r3, r7
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	895b      	ldrh	r3, [r3, #10]
 8003d76:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d7a:	463b      	mov	r3, r7
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6959      	ldr	r1, [r3, #20]
 8003d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d8a:	1d38      	adds	r0, r7, #4
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f000 ff13 	bl	8004bb8 <USB_WritePMA>
 8003d92:	e1e2      	b.n	800415a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003d94:	463b      	mov	r3, r7
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	463b      	mov	r3, r7
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003dbc:	1d3b      	adds	r3, r7, #4
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	441a      	add	r2, r3
 8003dca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	663b      	str	r3, [r7, #96]	; 0x60
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	461a      	mov	r2, r3
 8003df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003df6:	4413      	add	r3, r2
 8003df8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	011a      	lsls	r2, r3, #4
 8003e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e04:	4413      	add	r3, r2
 8003e06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e16:	463b      	mov	r3, r7
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	891b      	ldrh	r3, [r3, #8]
 8003e1c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e20:	463b      	mov	r3, r7
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6959      	ldr	r1, [r3, #20]
 8003e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e30:	1d38      	adds	r0, r7, #4
 8003e32:	6800      	ldr	r0, [r0, #0]
 8003e34:	f000 fec0 	bl	8004bb8 <USB_WritePMA>
 8003e38:	e18f      	b.n	800415a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	463b      	mov	r3, r7
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 808f 	beq.w	8003f74 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	785b      	ldrb	r3, [r3, #1]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d164      	bne.n	8003f30 <USB_EPStartXfer+0x834>
 8003e66:	1d3b      	adds	r3, r7, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e6c:	1d3b      	adds	r3, r7, #4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e7a:	4413      	add	r3, r2
 8003e7c:	673b      	str	r3, [r7, #112]	; 0x70
 8003e7e:	463b      	mov	r3, r7
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	011a      	lsls	r2, r3, #4
 8003e86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e88:	4413      	add	r3, r2
 8003e8a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d112      	bne.n	8003ebe <USB_EPStartXfer+0x7c2>
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea6:	801a      	strh	r2, [r3, #0]
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eba:	801a      	strh	r2, [r3, #0]
 8003ebc:	e054      	b.n	8003f68 <USB_EPStartXfer+0x86c>
 8003ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ec4:	d817      	bhi.n	8003ef6 <USB_EPStartXfer+0x7fa>
 8003ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <USB_EPStartXfer+0x7ea>
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	029b      	lsls	r3, r3, #10
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	e038      	b.n	8003f68 <USB_EPStartXfer+0x86c>
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d104      	bne.n	8003f16 <USB_EPStartXfer+0x81a>
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	3b01      	subs	r3, #1
 8003f12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2c:	801a      	strh	r2, [r3, #0]
 8003f2e:	e01b      	b.n	8003f68 <USB_EPStartXfer+0x86c>
 8003f30:	463b      	mov	r3, r7
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d116      	bne.n	8003f68 <USB_EPStartXfer+0x86c>
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	461a      	mov	r2, r3
 8003f46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f48:	4413      	add	r3, r2
 8003f4a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	011a      	lsls	r2, r3, #4
 8003f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f56:	4413      	add	r3, r2
 8003f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f5c:	677b      	str	r3, [r7, #116]	; 0x74
 8003f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003f68:	463b      	mov	r3, r7
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	895b      	ldrh	r3, [r3, #10]
 8003f6e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003f72:	e097      	b.n	80040a4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003f74:	463b      	mov	r3, r7
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d168      	bne.n	8004050 <USB_EPStartXfer+0x954>
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f96:	4413      	add	r3, r2
 8003f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f9c:	463b      	mov	r3, r7
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	011a      	lsls	r2, r3, #4
 8003fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fa8:	4413      	add	r3, r2
 8003faa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d112      	bne.n	8003fde <USB_EPStartXfer+0x8e2>
 8003fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fc6:	801a      	strh	r2, [r3, #0]
 8003fc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fca:	881b      	ldrh	r3, [r3, #0]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fda:	801a      	strh	r2, [r3, #0]
 8003fdc:	e05d      	b.n	800409a <USB_EPStartXfer+0x99e>
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe4:	d817      	bhi.n	8004016 <USB_EPStartXfer+0x91a>
 8003fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fea:	085b      	lsrs	r3, r3, #1
 8003fec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <USB_EPStartXfer+0x90a>
 8003ffc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004000:	3301      	adds	r3, #1
 8004002:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004006:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800400a:	b29b      	uxth	r3, r3
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	b29a      	uxth	r2, r3
 8004010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004012:	801a      	strh	r2, [r3, #0]
 8004014:	e041      	b.n	800409a <USB_EPStartXfer+0x99e>
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004020:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2b00      	cmp	r3, #0
 800402a:	d104      	bne.n	8004036 <USB_EPStartXfer+0x93a>
 800402c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004030:	3b01      	subs	r3, #1
 8004032:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004036:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800403a:	b29b      	uxth	r3, r3
 800403c:	029b      	lsls	r3, r3, #10
 800403e:	b29b      	uxth	r3, r3
 8004040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004048:	b29a      	uxth	r2, r3
 800404a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800404c:	801a      	strh	r2, [r3, #0]
 800404e:	e024      	b.n	800409a <USB_EPStartXfer+0x99e>
 8004050:	463b      	mov	r3, r7
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	785b      	ldrb	r3, [r3, #1]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d11f      	bne.n	800409a <USB_EPStartXfer+0x99e>
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406a:	b29b      	uxth	r3, r3
 800406c:	461a      	mov	r2, r3
 800406e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004072:	4413      	add	r3, r2
 8004074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004078:	463b      	mov	r3, r7
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	011a      	lsls	r2, r3, #4
 8004080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004084:	4413      	add	r3, r2
 8004086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800408a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004092:	b29a      	uxth	r2, r3
 8004094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004098:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800409a:	463b      	mov	r3, r7
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	891b      	ldrh	r3, [r3, #8]
 80040a0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040a4:	463b      	mov	r3, r7
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6959      	ldr	r1, [r3, #20]
 80040aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80040b4:	1d38      	adds	r0, r7, #4
 80040b6:	6800      	ldr	r0, [r0, #0]
 80040b8:	f000 fd7e 	bl	8004bb8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80040bc:	463b      	mov	r3, r7
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	785b      	ldrb	r3, [r3, #1]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d122      	bne.n	800410c <USB_EPStartXfer+0xa10>
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	463b      	mov	r3, r7
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	463b      	mov	r3, r7
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	441a      	add	r2, r3
 80040f2:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80040f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004102:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004106:	b29b      	uxth	r3, r3
 8004108:	8013      	strh	r3, [r2, #0]
 800410a:	e026      	b.n	800415a <USB_EPStartXfer+0xa5e>
 800410c:	463b      	mov	r3, r7
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	785b      	ldrb	r3, [r3, #1]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d121      	bne.n	800415a <USB_EPStartXfer+0xa5e>
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	463b      	mov	r3, r7
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800412c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004130:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	463b      	mov	r3, r7
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004156:	b29b      	uxth	r3, r3
 8004158:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	463b      	mov	r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f107 020e 	add.w	r2, r7, #14
 8004170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004178:	8013      	strh	r3, [r2, #0]
 800417a:	f107 030e 	add.w	r3, r7, #14
 800417e:	f107 020e 	add.w	r2, r7, #14
 8004182:	8812      	ldrh	r2, [r2, #0]
 8004184:	f082 0210 	eor.w	r2, r2, #16
 8004188:	801a      	strh	r2, [r3, #0]
 800418a:	f107 030e 	add.w	r3, r7, #14
 800418e:	f107 020e 	add.w	r2, r7, #14
 8004192:	8812      	ldrh	r2, [r2, #0]
 8004194:	f082 0220 	eor.w	r2, r2, #32
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	463b      	mov	r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	441a      	add	r2, r3
 80041a8:	f107 030e 	add.w	r3, r7, #14
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041be:	b29b      	uxth	r3, r3
 80041c0:	8013      	strh	r3, [r2, #0]
 80041c2:	e3b5      	b.n	8004930 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80041c4:	463b      	mov	r3, r7
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	7b1b      	ldrb	r3, [r3, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 8090 	bne.w	80042f0 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80041d0:	463b      	mov	r3, r7
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	463b      	mov	r3, r7
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d90e      	bls.n	80041fe <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80041e0:	463b      	mov	r3, r7
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80041ea:	463b      	mov	r3, r7
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	463b      	mov	r3, r7
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	619a      	str	r2, [r3, #24]
 80041fc:	e008      	b.n	8004210 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80041fe:	463b      	mov	r3, r7
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004208:	463b      	mov	r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2200      	movs	r2, #0
 800420e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004228:	4413      	add	r3, r2
 800422a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800422e:	463b      	mov	r3, r7
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	011a      	lsls	r2, r3, #4
 8004236:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800423a:	4413      	add	r3, r2
 800423c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004240:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d116      	bne.n	800427a <USB_EPStartXfer+0xb7e>
 800424c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004258:	b29a      	uxth	r2, r3
 800425a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800425e:	801a      	strh	r2, [r3, #0]
 8004260:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800426c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004270:	b29a      	uxth	r2, r3
 8004272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004276:	801a      	strh	r2, [r3, #0]
 8004278:	e32c      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
 800427a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427e:	2b3e      	cmp	r3, #62	; 0x3e
 8004280:	d818      	bhi.n	80042b4 <USB_EPStartXfer+0xbb8>
 8004282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800428c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <USB_EPStartXfer+0xba6>
 8004298:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800429c:	3301      	adds	r3, #1
 800429e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	029b      	lsls	r3, r3, #10
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e30f      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
 80042b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b8:	095b      	lsrs	r3, r3, #5
 80042ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d104      	bne.n	80042d4 <USB_EPStartXfer+0xbd8>
 80042ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042ce:	3b01      	subs	r3, #1
 80042d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042d8:	b29b      	uxth	r3, r3
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	b29b      	uxth	r3, r3
 80042de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	e2f1      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80042f0:	463b      	mov	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78db      	ldrb	r3, [r3, #3]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	f040 818f 	bne.w	800461a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80042fc:	463b      	mov	r3, r7
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	785b      	ldrb	r3, [r3, #1]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d175      	bne.n	80043f2 <USB_EPStartXfer+0xcf6>
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800431e:	4413      	add	r3, r2
 8004320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004324:	463b      	mov	r3, r7
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	011a      	lsls	r2, r3, #4
 800432c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004330:	4413      	add	r3, r2
 8004332:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800433a:	463b      	mov	r3, r7
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d116      	bne.n	8004372 <USB_EPStartXfer+0xc76>
 8004344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004350:	b29a      	uxth	r2, r3
 8004352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004356:	801a      	strh	r2, [r3, #0]
 8004358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004368:	b29a      	uxth	r2, r3
 800436a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	e065      	b.n	800443e <USB_EPStartXfer+0xd42>
 8004372:	463b      	mov	r3, r7
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b3e      	cmp	r3, #62	; 0x3e
 800437a:	d81a      	bhi.n	80043b2 <USB_EPStartXfer+0xcb6>
 800437c:	463b      	mov	r3, r7
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004388:	463b      	mov	r3, r7
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d004      	beq.n	80043a0 <USB_EPStartXfer+0xca4>
 8004396:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800439a:	3301      	adds	r3, #1
 800439c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ae:	801a      	strh	r2, [r3, #0]
 80043b0:	e045      	b.n	800443e <USB_EPStartXfer+0xd42>
 80043b2:	463b      	mov	r3, r7
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043be:	463b      	mov	r3, r7
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <USB_EPStartXfer+0xcda>
 80043cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043da:	b29b      	uxth	r3, r3
 80043dc:	029b      	lsls	r3, r3, #10
 80043de:	b29b      	uxth	r3, r3
 80043e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	e025      	b.n	800443e <USB_EPStartXfer+0xd42>
 80043f2:	463b      	mov	r3, r7
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d120      	bne.n	800443e <USB_EPStartXfer+0xd42>
 80043fc:	1d3b      	adds	r3, r7, #4
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004404:	1d3b      	adds	r3, r7, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800440c:	b29b      	uxth	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004414:	4413      	add	r3, r2
 8004416:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800441a:	463b      	mov	r3, r7
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	011a      	lsls	r2, r3, #4
 8004422:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004426:	4413      	add	r3, r2
 8004428:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800442c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004430:	463b      	mov	r3, r7
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	b29a      	uxth	r2, r3
 8004438:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	1d3b      	adds	r3, r7, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004446:	463b      	mov	r3, r7
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d175      	bne.n	800453c <USB_EPStartXfer+0xe40>
 8004450:	1d3b      	adds	r3, r7, #4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004458:	1d3b      	adds	r3, r7, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004460:	b29b      	uxth	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004468:	4413      	add	r3, r2
 800446a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800446e:	463b      	mov	r3, r7
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	011a      	lsls	r2, r3, #4
 8004476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800447a:	4413      	add	r3, r2
 800447c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004484:	463b      	mov	r3, r7
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d116      	bne.n	80044bc <USB_EPStartXfer+0xdc0>
 800448e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	b29b      	uxth	r3, r3
 8004496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800449a:	b29a      	uxth	r2, r3
 800449c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a0:	801a      	strh	r2, [r3, #0]
 80044a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b8:	801a      	strh	r2, [r3, #0]
 80044ba:	e061      	b.n	8004580 <USB_EPStartXfer+0xe84>
 80044bc:	463b      	mov	r3, r7
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b3e      	cmp	r3, #62	; 0x3e
 80044c4:	d81a      	bhi.n	80044fc <USB_EPStartXfer+0xe00>
 80044c6:	463b      	mov	r3, r7
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	085b      	lsrs	r3, r3, #1
 80044ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044d2:	463b      	mov	r3, r7
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <USB_EPStartXfer+0xdee>
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e4:	3301      	adds	r3, #1
 80044e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e041      	b.n	8004580 <USB_EPStartXfer+0xe84>
 80044fc:	463b      	mov	r3, r7
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004508:	463b      	mov	r3, r7
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <USB_EPStartXfer+0xe24>
 8004516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800451a:	3b01      	subs	r3, #1
 800451c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004524:	b29b      	uxth	r3, r3
 8004526:	029b      	lsls	r3, r3, #10
 8004528:	b29b      	uxth	r3, r3
 800452a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800452e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004532:	b29a      	uxth	r2, r3
 8004534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e021      	b.n	8004580 <USB_EPStartXfer+0xe84>
 800453c:	463b      	mov	r3, r7
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d11c      	bne.n	8004580 <USB_EPStartXfer+0xe84>
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800454e:	b29b      	uxth	r3, r3
 8004550:	461a      	mov	r2, r3
 8004552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004556:	4413      	add	r3, r2
 8004558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	011a      	lsls	r2, r3, #4
 8004564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004568:	4413      	add	r3, r2
 800456a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800456e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004572:	463b      	mov	r3, r7
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	b29a      	uxth	r2, r3
 800457a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800457e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004580:	463b      	mov	r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 81a4 	beq.w	80048d4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	463b      	mov	r3, r7
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	881b      	ldrh	r3, [r3, #0]
 800459c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045a0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d005      	beq.n	80045b8 <USB_EPStartXfer+0xebc>
 80045ac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10d      	bne.n	80045d4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045b8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 8187 	bne.w	80048d4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 8180 	bne.w	80048d4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80045d4:	1d3b      	adds	r3, r7, #4
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	463b      	mov	r3, r7
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ee:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80045f2:	1d3b      	adds	r3, r7, #4
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	463b      	mov	r3, r7
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	441a      	add	r2, r3
 8004600:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004610:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]
 8004618:	e15c      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800461a:	463b      	mov	r3, r7
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	78db      	ldrb	r3, [r3, #3]
 8004620:	2b01      	cmp	r3, #1
 8004622:	f040 8155 	bne.w	80048d0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004626:	463b      	mov	r3, r7
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699a      	ldr	r2, [r3, #24]
 800462c:	463b      	mov	r3, r7
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	429a      	cmp	r2, r3
 8004634:	d90e      	bls.n	8004654 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004636:	463b      	mov	r3, r7
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004640:	463b      	mov	r3, r7
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699a      	ldr	r2, [r3, #24]
 8004646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464a:	1ad2      	subs	r2, r2, r3
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	619a      	str	r2, [r3, #24]
 8004652:	e008      	b.n	8004666 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004654:	463b      	mov	r3, r7
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2200      	movs	r2, #0
 8004664:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004666:	463b      	mov	r3, r7
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	785b      	ldrb	r3, [r3, #1]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d16f      	bne.n	8004750 <USB_EPStartXfer+0x1054>
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004680:	b29b      	uxth	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004688:	4413      	add	r3, r2
 800468a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800468e:	463b      	mov	r3, r7
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	011a      	lsls	r2, r3, #4
 8004696:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800469a:	4413      	add	r3, r2
 800469c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d116      	bne.n	80046da <USB_EPStartXfer+0xfde>
 80046ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	e05f      	b.n	800479a <USB_EPStartXfer+0x109e>
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046de:	2b3e      	cmp	r3, #62	; 0x3e
 80046e0:	d818      	bhi.n	8004714 <USB_EPStartXfer+0x1018>
 80046e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e6:	085b      	lsrs	r3, r3, #1
 80046e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <USB_EPStartXfer+0x1006>
 80046f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046fc:	3301      	adds	r3, #1
 80046fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004706:	b29b      	uxth	r3, r3
 8004708:	029b      	lsls	r3, r3, #10
 800470a:	b29a      	uxth	r2, r3
 800470c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004710:	801a      	strh	r2, [r3, #0]
 8004712:	e042      	b.n	800479a <USB_EPStartXfer+0x109e>
 8004714:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004718:	095b      	lsrs	r3, r3, #5
 800471a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800471e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <USB_EPStartXfer+0x1038>
 800472a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800472e:	3b01      	subs	r3, #1
 8004730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004738:	b29b      	uxth	r3, r3
 800473a:	029b      	lsls	r3, r3, #10
 800473c:	b29b      	uxth	r3, r3
 800473e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004746:	b29a      	uxth	r2, r3
 8004748:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	e024      	b.n	800479a <USB_EPStartXfer+0x109e>
 8004750:	463b      	mov	r3, r7
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	785b      	ldrb	r3, [r3, #1]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d11f      	bne.n	800479a <USB_EPStartXfer+0x109e>
 800475a:	1d3b      	adds	r3, r7, #4
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004772:	4413      	add	r3, r2
 8004774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004778:	463b      	mov	r3, r7
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	011a      	lsls	r2, r3, #4
 8004780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004784:	4413      	add	r3, r2
 8004786:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800478a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800478e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004792:	b29a      	uxth	r2, r3
 8004794:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	1d3b      	adds	r3, r7, #4
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047a2:	463b      	mov	r3, r7
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d16f      	bne.n	800488c <USB_EPStartXfer+0x1190>
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047b4:	1d3b      	adds	r3, r7, #4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047bc:	b29b      	uxth	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047c4:	4413      	add	r3, r2
 80047c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047ca:	463b      	mov	r3, r7
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	011a      	lsls	r2, r3, #4
 80047d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047d6:	4413      	add	r3, r2
 80047d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80047e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d116      	bne.n	8004816 <USB_EPStartXfer+0x111a>
 80047e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047ec:	881b      	ldrh	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047fa:	801a      	strh	r2, [r3, #0]
 80047fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800480c:	b29a      	uxth	r2, r3
 800480e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	e05e      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
 8004816:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481a:	2b3e      	cmp	r3, #62	; 0x3e
 800481c:	d818      	bhi.n	8004850 <USB_EPStartXfer+0x1154>
 800481e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004822:	085b      	lsrs	r3, r3, #1
 8004824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004828:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <USB_EPStartXfer+0x1142>
 8004834:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004838:	3301      	adds	r3, #1
 800483a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004842:	b29b      	uxth	r3, r3
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	b29a      	uxth	r2, r3
 8004848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	e041      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485e:	f003 031f 	and.w	r3, r3, #31
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <USB_EPStartXfer+0x1174>
 8004866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486a:	3b01      	subs	r3, #1
 800486c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004874:	b29b      	uxth	r3, r3
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	b29b      	uxth	r3, r3
 800487a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800487e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004882:	b29a      	uxth	r2, r3
 8004884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e023      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
 800488c:	463b      	mov	r3, r7
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	785b      	ldrb	r3, [r3, #1]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d11e      	bne.n	80048d4 <USB_EPStartXfer+0x11d8>
 8004896:	1d3b      	adds	r3, r7, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800489e:	b29b      	uxth	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048a6:	4413      	add	r3, r2
 80048a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048ac:	463b      	mov	r3, r7
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	011a      	lsls	r2, r3, #4
 80048b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048b8:	4413      	add	r3, r2
 80048ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	e001      	b.n	80048d4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e02e      	b.n	8004932 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048d4:	1d3b      	adds	r3, r7, #4
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	463b      	mov	r3, r7
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	4413      	add	r3, r2
 80048e2:	881b      	ldrh	r3, [r3, #0]
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80048f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80048fe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004902:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004906:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800490a:	1d3b      	adds	r3, r7, #4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	463b      	mov	r3, r7
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	441a      	add	r2, r3
 8004918:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800491c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492c:	b29b      	uxth	r3, r3
 800492e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d020      	beq.n	8004990 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29b      	uxth	r3, r3
 800495c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004964:	81bb      	strh	r3, [r7, #12]
 8004966:	89bb      	ldrh	r3, [r7, #12]
 8004968:	f083 0310 	eor.w	r3, r3, #16
 800496c:	81bb      	strh	r3, [r7, #12]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	89bb      	ldrh	r3, [r7, #12]
 800497a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498a:	b29b      	uxth	r3, r3
 800498c:	8013      	strh	r3, [r2, #0]
 800498e:	e01f      	b.n	80049d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	81fb      	strh	r3, [r7, #14]
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049ae:	81fb      	strh	r3, [r7, #14]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	441a      	add	r2, r3
 80049ba:	89fb      	ldrh	r3, [r7, #14]
 80049bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	7b1b      	ldrb	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f040 809d 	bne.w	8004b2a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	785b      	ldrb	r3, [r3, #1]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d04c      	beq.n	8004a92 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	823b      	strh	r3, [r7, #16]
 8004a06:	8a3b      	ldrh	r3, [r7, #16]
 8004a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01b      	beq.n	8004a48 <USB_EPClearStall+0x6c>
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a26:	81fb      	strh	r3, [r7, #14]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	89fb      	ldrh	r3, [r7, #14]
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	78db      	ldrb	r3, [r3, #3]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d06c      	beq.n	8004b2a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a66:	81bb      	strh	r3, [r7, #12]
 8004a68:	89bb      	ldrh	r3, [r7, #12]
 8004a6a:	f083 0320 	eor.w	r3, r3, #32
 8004a6e:	81bb      	strh	r3, [r7, #12]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	89bb      	ldrh	r3, [r7, #12]
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
 8004a90:	e04b      	b.n	8004b2a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	82fb      	strh	r3, [r7, #22]
 8004aa0:	8afb      	ldrh	r3, [r7, #22]
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01b      	beq.n	8004ae2 <USB_EPClearStall+0x106>
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	82bb      	strh	r3, [r7, #20]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	441a      	add	r2, r3
 8004acc:	8abb      	ldrh	r3, [r7, #20]
 8004ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af8:	827b      	strh	r3, [r7, #18]
 8004afa:	8a7b      	ldrh	r3, [r7, #18]
 8004afc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b00:	827b      	strh	r3, [r7, #18]
 8004b02:	8a7b      	ldrh	r3, [r7, #18]
 8004b04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b08:	827b      	strh	r3, [r7, #18]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	441a      	add	r2, r3
 8004b14:	8a7b      	ldrh	r3, [r7, #18]
 8004b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr

08004b36 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
 8004b3e:	460b      	mov	r3, r1
 8004b40:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2280      	movs	r2, #128	; 0x80
 8004b4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr

08004b5c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr

08004b70 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bc80      	pop	{r7}
 8004b82:	4770      	bx	lr

08004b84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004b96:	68fb      	ldr	r3, [r7, #12]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b08d      	sub	sp, #52	; 0x34
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	80fb      	strh	r3, [r7, #6]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004bce:	88bb      	ldrh	r3, [r7, #4]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	085b      	lsrs	r3, r3, #1
 8004bd4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	005a      	lsls	r2, r3, #1
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf0:	e01e      	b.n	8004c30 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1a:	3302      	adds	r3, #2
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	3302      	adds	r3, #2
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	3301      	adds	r3, #1
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1dd      	bne.n	8004bf2 <USB_WritePMA+0x3a>
  }
}
 8004c36:	bf00      	nop
 8004c38:	3734      	adds	r7, #52	; 0x34
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bc80      	pop	{r7}
 8004c3e:	4770      	bx	lr

08004c40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b08b      	sub	sp, #44	; 0x2c
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	460b      	mov	r3, r1
 8004c50:	80fb      	strh	r3, [r7, #6]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c56:	88bb      	ldrh	r3, [r7, #4]
 8004c58:	085b      	lsrs	r3, r3, #1
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c66:	88fb      	ldrh	r3, [r7, #6]
 8004c68:	005a      	lsls	r2, r3, #1
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c72:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	627b      	str	r3, [r7, #36]	; 0x24
 8004c78:	e01b      	b.n	8004cb2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	3302      	adds	r3, #2
 8004c86:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	3301      	adds	r3, #1
 8004c94:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	3302      	adds	r3, #2
 8004caa:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e0      	bne.n	8004c7a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004cb8:	88bb      	ldrh	r3, [r7, #4]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	881b      	ldrh	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	701a      	strb	r2, [r3, #0]
  }
}
 8004cd4:	bf00      	nop
 8004cd6:	372c      	adds	r7, #44	; 0x2c
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b084      	sub	sp, #16
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	7c1b      	ldrb	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d115      	bne.n	8004d22 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cf6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	2181      	movs	r1, #129	; 0x81
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f004 fb0d 	bl	800931e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d0e:	2202      	movs	r2, #2
 8004d10:	2101      	movs	r1, #1
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f004 fb03 	bl	800931e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004d20:	e012      	b.n	8004d48 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d22:	2340      	movs	r3, #64	; 0x40
 8004d24:	2202      	movs	r2, #2
 8004d26:	2181      	movs	r1, #129	; 0x81
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f004 faf8 	bl	800931e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	2202      	movs	r2, #2
 8004d38:	2101      	movs	r1, #1
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f004 faef 	bl	800931e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d48:	2308      	movs	r3, #8
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	2182      	movs	r1, #130	; 0x82
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f004 fae5 	bl	800931e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d5a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d5e:	f004 fc05 	bl	800956c <USBD_static_malloc>
 8004d62:	4602      	mov	r2, r0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	e026      	b.n	8004dc8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d80:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	7c1b      	ldrb	r3, [r3, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dae:	2101      	movs	r1, #1
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f004 fba5 	bl	8009500 <USBD_LL_PrepareReceive>
 8004db6:	e007      	b.n	8004dc8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dbe:	2340      	movs	r3, #64	; 0x40
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f004 fb9c 	bl	8009500 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b084      	sub	sp, #16
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004de2:	2181      	movs	r1, #129	; 0x81
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f004 fac0 	bl	800936a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004df0:	2101      	movs	r1, #1
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f004 fab9 	bl	800936a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e00:	2182      	movs	r1, #130	; 0x82
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f004 fab1 	bl	800936a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f004 fbab 	bl	8009584 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e50:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d039      	beq.n	8004ede <USBD_CDC_Setup+0x9e>
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d17c      	bne.n	8004f68 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	88db      	ldrh	r3, [r3, #6]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d029      	beq.n	8004eca <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b25b      	sxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	da11      	bge.n	8004ea4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004e8c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	88d2      	ldrh	r2, [r2, #6]
 8004e92:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004e94:	6939      	ldr	r1, [r7, #16]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	88db      	ldrh	r3, [r3, #6]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f001 f9f9 	bl	8006294 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004ea2:	e068      	b.n	8004f76 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	785a      	ldrb	r2, [r3, #1]
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	88db      	ldrh	r3, [r3, #6]
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004eba:	6939      	ldr	r1, [r7, #16]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	88db      	ldrh	r3, [r3, #6]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f001 fa14 	bl	80062f0 <USBD_CtlPrepareRx>
      break;
 8004ec8:	e055      	b.n	8004f76 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	7850      	ldrb	r0, [r2, #1]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	4798      	blx	r3
      break;
 8004edc:	e04b      	b.n	8004f76 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
 8004ee2:	2b0a      	cmp	r3, #10
 8004ee4:	d017      	beq.n	8004f16 <USBD_CDC_Setup+0xd6>
 8004ee6:	2b0b      	cmp	r3, #11
 8004ee8:	d029      	beq.n	8004f3e <USBD_CDC_Setup+0xfe>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d133      	bne.n	8004f56 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d107      	bne.n	8004f08 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	2202      	movs	r2, #2
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f001 f9c7 	bl	8006294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f06:	e02e      	b.n	8004f66 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f958 	bl	80061c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f10:	2302      	movs	r3, #2
 8004f12:	75fb      	strb	r3, [r7, #23]
          break;
 8004f14:	e027      	b.n	8004f66 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d107      	bne.n	8004f30 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f20:	f107 030f 	add.w	r3, r7, #15
 8004f24:	2201      	movs	r2, #1
 8004f26:	4619      	mov	r1, r3
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 f9b3 	bl	8006294 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f2e:	e01a      	b.n	8004f66 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f30:	6839      	ldr	r1, [r7, #0]
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 f944 	bl	80061c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f38:	2302      	movs	r3, #2
 8004f3a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f3c:	e013      	b.n	8004f66 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d00d      	beq.n	8004f64 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004f48:	6839      	ldr	r1, [r7, #0]
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f001 f938 	bl	80061c0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f50:	2302      	movs	r3, #2
 8004f52:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f54:	e006      	b.n	8004f64 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f001 f931 	bl	80061c0 <USBD_CtlError>
          ret = USBD_FAIL;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	75fb      	strb	r3, [r7, #23]
          break;
 8004f62:	e000      	b.n	8004f66 <USBD_CDC_Setup+0x126>
          break;
 8004f64:	bf00      	nop
      }
      break;
 8004f66:	e006      	b.n	8004f76 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 f928 	bl	80061c0 <USBD_CtlError>
      ret = USBD_FAIL;
 8004f70:	2302      	movs	r3, #2
 8004f72:	75fb      	strb	r3, [r7, #23]
      break;
 8004f74:	bf00      	nop
  }

  return ret;
 8004f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	460b      	mov	r3, r1
 8004f8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f9a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d03a      	beq.n	800501c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	331c      	adds	r3, #28
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d029      	beq.n	8005010 <USBD_CDC_DataIn+0x90>
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	331c      	adds	r3, #28
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	78f9      	ldrb	r1, [r7, #3]
 8004fd0:	68b8      	ldr	r0, [r7, #8]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4403      	add	r3, r0
 8004fdc:	3338      	adds	r3, #56	; 0x38
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fe4:	fb03 f301 	mul.w	r3, r3, r1
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d110      	bne.n	8005010 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	331c      	adds	r3, #28
 8004ffe:	2200      	movs	r2, #0
 8005000:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005002:	78f9      	ldrb	r1, [r7, #3]
 8005004:	2300      	movs	r3, #0
 8005006:	2200      	movs	r2, #0
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f004 fa56 	bl	80094ba <USBD_LL_Transmit>
 800500e:	e003      	b.n	8005018 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	e000      	b.n	800501e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800501c:	2302      	movs	r3, #2
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	460b      	mov	r3, r1
 8005030:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005038:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800503a:	78fb      	ldrb	r3, [r7, #3]
 800503c:	4619      	mov	r1, r3
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f004 fa81 	bl	8009546 <USBD_LL_GetRxDataSize>
 8005044:	4602      	mov	r2, r0
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00d      	beq.n	8005072 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800506a:	4611      	mov	r1, r2
 800506c:	4798      	blx	r3

    return USBD_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800508a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005092:	2b00      	cmp	r3, #0
 8005094:	d015      	beq.n	80050c2 <USBD_CDC_EP0_RxReady+0x46>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800509c:	2bff      	cmp	r3, #255	; 0xff
 800509e:	d010      	beq.n	80050c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80050ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050b6:	b292      	uxth	r2, r2
 80050b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2243      	movs	r2, #67	; 0x43
 80050d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80050da:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000094 	.word	0x20000094

080050ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2243      	movs	r2, #67	; 0x43
 80050f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80050fa:	4b03      	ldr	r3, [pc, #12]	; (8005108 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000050 	.word	0x20000050

0800510c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2243      	movs	r2, #67	; 0x43
 8005118:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800511a:	4b03      	ldr	r3, [pc, #12]	; (8005128 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	200000d8 	.word	0x200000d8

0800512c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	220a      	movs	r2, #10
 8005138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800513a:	4b03      	ldr	r3, [pc, #12]	; (8005148 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	2000000c 	.word	0x2000000c

0800514c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005156:	2302      	movs	r3, #2
 8005158:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	bc80      	pop	{r7}
 8005176:	4770      	bx	lr

08005178 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005178:	b480      	push	{r7}
 800517a:	b087      	sub	sp, #28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01c      	beq.n	8005224 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d115      	bne.n	8005220 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005212:	b29b      	uxth	r3, r3
 8005214:	2181      	movs	r1, #129	; 0x81
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f004 f94f 	bl	80094ba <USBD_LL_Transmit>

      return USBD_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	e002      	b.n	8005226 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d017      	beq.n	8005278 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7c1b      	ldrb	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800525a:	2101      	movs	r1, #1
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f004 f94f 	bl	8009500 <USBD_LL_PrepareReceive>
 8005262:	e007      	b.n	8005274 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800526a:	2340      	movs	r3, #64	; 0x40
 800526c:	2101      	movs	r1, #1
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f004 f946 	bl	8009500 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005296:	2302      	movs	r3, #2
 8005298:	e01a      	b.n	80052d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d003      	beq.n	80052ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f003 ffb3 	bl	8009234 <USBD_LL_Init>

  return USBD_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d006      	beq.n	80052fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e001      	b.n	80052fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80052fa:	2302      	movs	r3, #2
 80052fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f003 ffe8 	bl	80092e8 <USBD_LL_Start>

  return USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	bc80      	pop	{r7}
 8005334:	4770      	bx	lr

08005336 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005342:	2302      	movs	r3, #2
 8005344:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00c      	beq.n	800536a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	4611      	mov	r1, r2
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800536a:	7bfb      	ldrb	r3, [r7, #15]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	4611      	mov	r1, r2
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3

  return USBD_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
 80053a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fecb 	bl	8006148 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80053c0:	461a      	mov	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d00c      	beq.n	80053f0 <USBD_LL_SetupStage+0x56>
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d302      	bcc.n	80053e0 <USBD_LL_SetupStage+0x46>
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d010      	beq.n	8005400 <USBD_LL_SetupStage+0x66>
 80053de:	e017      	b.n	8005410 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f9cb 	bl	8005784 <USBD_StdDevReq>
      break;
 80053ee:	e01a      	b.n	8005426 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa2d 	bl	8005858 <USBD_StdItfReq>
      break;
 80053fe:	e012      	b.n	8005426 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fa6b 	bl	80058e4 <USBD_StdEPReq>
      break;
 800540e:	e00a      	b.n	8005426 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005416:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800541a:	b2db      	uxtb	r3, r3
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f003 ffc2 	bl	80093a8 <USBD_LL_StallEP>
      break;
 8005424:	bf00      	nop
  }

  return USBD_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	460b      	mov	r3, r1
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800543e:	7afb      	ldrb	r3, [r7, #11]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d14b      	bne.n	80054dc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800544a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005452:	2b03      	cmp	r3, #3
 8005454:	d134      	bne.n	80054c0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	429a      	cmp	r2, r3
 8005460:	d919      	bls.n	8005496 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005478:	429a      	cmp	r2, r3
 800547a:	d203      	bcs.n	8005484 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005480:	b29b      	uxth	r3, r3
 8005482:	e002      	b.n	800548a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005488:	b29b      	uxth	r3, r3
 800548a:	461a      	mov	r2, r3
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 ff4c 	bl	800632c <USBD_CtlContinueRx>
 8005494:	e038      	b.n	8005508 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00a      	beq.n	80054b8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d105      	bne.n	80054b8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 ff49 	bl	8006350 <USBD_CtlSendStatus>
 80054be:	e023      	b.n	8005508 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d11e      	bne.n	8005508 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80054d2:	2100      	movs	r1, #0
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f003 ff67 	bl	80093a8 <USBD_LL_StallEP>
 80054da:	e015      	b.n	8005508 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d00d      	beq.n	8005504 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d108      	bne.n	8005504 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	7afa      	ldrb	r2, [r7, #11]
 80054fc:	4611      	mov	r1, r2
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	4798      	blx	r3
 8005502:	e001      	b.n	8005508 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005504:	2302      	movs	r3, #2
 8005506:	e000      	b.n	800550a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b086      	sub	sp, #24
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	460b      	mov	r3, r1
 800551c:	607a      	str	r2, [r7, #4]
 800551e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005520:	7afb      	ldrb	r3, [r7, #11]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d17f      	bne.n	8005626 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3314      	adds	r3, #20
 800552a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005532:	2b02      	cmp	r3, #2
 8005534:	d15c      	bne.n	80055f0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	429a      	cmp	r2, r3
 8005540:	d915      	bls.n	800556e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	68da      	ldr	r2, [r3, #12]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	1ad2      	subs	r2, r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	b29b      	uxth	r3, r3
 8005556:	461a      	mov	r2, r3
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 feb6 	bl	80062cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005560:	2300      	movs	r3, #0
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f003 ffca 	bl	8009500 <USBD_LL_PrepareReceive>
 800556c:	e04e      	b.n	800560c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	6912      	ldr	r2, [r2, #16]
 8005576:	fbb3 f1f2 	udiv	r1, r3, r2
 800557a:	fb02 f201 	mul.w	r2, r2, r1
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11c      	bne.n	80055be <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800558c:	429a      	cmp	r2, r3
 800558e:	d316      	bcc.n	80055be <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800559a:	429a      	cmp	r2, r3
 800559c:	d20f      	bcs.n	80055be <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 fe92 	bl	80062cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055b0:	2300      	movs	r3, #0
 80055b2:	2200      	movs	r2, #0
 80055b4:	2100      	movs	r1, #0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f003 ffa2 	bl	8009500 <USBD_LL_PrepareReceive>
 80055bc:	e026      	b.n	800560c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d105      	bne.n	80055e0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80055e0:	2180      	movs	r1, #128	; 0x80
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f003 fee0 	bl	80093a8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fec4 	bl	8006376 <USBD_CtlReceiveStatus>
 80055ee:	e00d      	b.n	800560c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d004      	beq.n	8005604 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f003 fece 	bl	80093a8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005612:	2b01      	cmp	r3, #1
 8005614:	d11d      	bne.n	8005652 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff fe83 	bl	8005322 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005624:	e015      	b.n	8005652 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00d      	beq.n	800564e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005638:	2b03      	cmp	r3, #3
 800563a:	d108      	bne.n	800564e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	7afa      	ldrb	r2, [r7, #11]
 8005646:	4611      	mov	r1, r2
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	4798      	blx	r3
 800564c:	e001      	b.n	8005652 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800564e:	2302      	movs	r3, #2
 8005650:	e000      	b.n	8005654 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	2200      	movs	r2, #0
 8005668:	2100      	movs	r1, #0
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f003 fe57 	bl	800931e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	2200      	movs	r2, #0
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f003 fe49 	bl	800931e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2240      	movs	r2, #64	; 0x40
 8005696:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d009      	beq.n	80056d4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6852      	ldr	r2, [r2, #4]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	4611      	mov	r1, r2
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
  }

  return USBD_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	78fa      	ldrb	r2, [r7, #3]
 80056ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2204      	movs	r2, #4
 8005714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005732:	2b04      	cmp	r3, #4
 8005734:	d105      	bne.n	8005742 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b082      	sub	sp, #8
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575c:	2b03      	cmp	r3, #3
 800575e:	d10b      	bne.n	8005778 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005772:	69db      	ldr	r3, [r3, #28]
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800579a:	2b20      	cmp	r3, #32
 800579c:	d004      	beq.n	80057a8 <USBD_StdDevReq+0x24>
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d002      	beq.n	80057a8 <USBD_StdDevReq+0x24>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d008      	beq.n	80057b8 <USBD_StdDevReq+0x34>
 80057a6:	e04c      	b.n	8005842 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4798      	blx	r3
      break;
 80057b6:	e049      	b.n	800584c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b09      	cmp	r3, #9
 80057be:	d83a      	bhi.n	8005836 <USBD_StdDevReq+0xb2>
 80057c0:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <USBD_StdDevReq+0x44>)
 80057c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c6:	bf00      	nop
 80057c8:	08005819 	.word	0x08005819
 80057cc:	0800582d 	.word	0x0800582d
 80057d0:	08005837 	.word	0x08005837
 80057d4:	08005823 	.word	0x08005823
 80057d8:	08005837 	.word	0x08005837
 80057dc:	080057fb 	.word	0x080057fb
 80057e0:	080057f1 	.word	0x080057f1
 80057e4:	08005837 	.word	0x08005837
 80057e8:	0800580f 	.word	0x0800580f
 80057ec:	08005805 	.word	0x08005805
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057f0:	6839      	ldr	r1, [r7, #0]
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f9d4 	bl	8005ba0 <USBD_GetDescriptor>
          break;
 80057f8:	e022      	b.n	8005840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb37 	bl	8005e70 <USBD_SetAddress>
          break;
 8005802:	e01d      	b.n	8005840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fb74 	bl	8005ef4 <USBD_SetConfig>
          break;
 800580c:	e018      	b.n	8005840 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fbfd 	bl	8006010 <USBD_GetConfig>
          break;
 8005816:	e013      	b.n	8005840 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fc2c 	bl	8006078 <USBD_GetStatus>
          break;
 8005820:	e00e      	b.n	8005840 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fc5a 	bl	80060de <USBD_SetFeature>
          break;
 800582a:	e009      	b.n	8005840 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fc69 	bl	8006106 <USBD_ClrFeature>
          break;
 8005834:	e004      	b.n	8005840 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005836:	6839      	ldr	r1, [r7, #0]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fcc1 	bl	80061c0 <USBD_CtlError>
          break;
 800583e:	bf00      	nop
      }
      break;
 8005840:	e004      	b.n	800584c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fcbb 	bl	80061c0 <USBD_CtlError>
      break;
 800584a:	bf00      	nop
  }

  return ret;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop

08005858 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005862:	2300      	movs	r3, #0
 8005864:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800586e:	2b20      	cmp	r3, #32
 8005870:	d003      	beq.n	800587a <USBD_StdItfReq+0x22>
 8005872:	2b40      	cmp	r3, #64	; 0x40
 8005874:	d001      	beq.n	800587a <USBD_StdItfReq+0x22>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d12a      	bne.n	80058d0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005880:	3b01      	subs	r3, #1
 8005882:	2b02      	cmp	r3, #2
 8005884:	d81d      	bhi.n	80058c2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	889b      	ldrh	r3, [r3, #4]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d813      	bhi.n	80058b8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	4798      	blx	r3
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	88db      	ldrh	r3, [r3, #6]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d110      	bne.n	80058cc <USBD_StdItfReq+0x74>
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fd4d 	bl	8006350 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058b6:	e009      	b.n	80058cc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fc80 	bl	80061c0 <USBD_CtlError>
          break;
 80058c0:	e004      	b.n	80058cc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fc7b 	bl	80061c0 <USBD_CtlError>
          break;
 80058ca:	e000      	b.n	80058ce <USBD_StdItfReq+0x76>
          break;
 80058cc:	bf00      	nop
      }
      break;
 80058ce:	e004      	b.n	80058da <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc74 	bl	80061c0 <USBD_CtlError>
      break;
 80058d8:	bf00      	nop
  }

  return USBD_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	889b      	ldrh	r3, [r3, #4]
 80058f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005900:	2b20      	cmp	r3, #32
 8005902:	d004      	beq.n	800590e <USBD_StdEPReq+0x2a>
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d002      	beq.n	800590e <USBD_StdEPReq+0x2a>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <USBD_StdEPReq+0x3a>
 800590c:	e13d      	b.n	8005b8a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
      break;
 800591c:	e13a      	b.n	8005b94 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005926:	2b20      	cmp	r3, #32
 8005928:	d10a      	bne.n	8005940 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	e12a      	b.n	8005b96 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d03e      	beq.n	80059c6 <USBD_StdEPReq+0xe2>
 8005948:	2b03      	cmp	r3, #3
 800594a:	d002      	beq.n	8005952 <USBD_StdEPReq+0x6e>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d070      	beq.n	8005a32 <USBD_StdEPReq+0x14e>
 8005950:	e115      	b.n	8005b7e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005958:	2b02      	cmp	r3, #2
 800595a:	d002      	beq.n	8005962 <USBD_StdEPReq+0x7e>
 800595c:	2b03      	cmp	r3, #3
 800595e:	d015      	beq.n	800598c <USBD_StdEPReq+0xa8>
 8005960:	e02b      	b.n	80059ba <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00c      	beq.n	8005982 <USBD_StdEPReq+0x9e>
 8005968:	7bbb      	ldrb	r3, [r7, #14]
 800596a:	2b80      	cmp	r3, #128	; 0x80
 800596c:	d009      	beq.n	8005982 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800596e:	7bbb      	ldrb	r3, [r7, #14]
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f003 fd18 	bl	80093a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005978:	2180      	movs	r1, #128	; 0x80
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f003 fd14 	bl	80093a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005980:	e020      	b.n	80059c4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fc1b 	bl	80061c0 <USBD_CtlError>
              break;
 800598a:	e01b      	b.n	80059c4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	885b      	ldrh	r3, [r3, #2]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10e      	bne.n	80059b2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <USBD_StdEPReq+0xce>
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b80      	cmp	r3, #128	; 0x80
 800599e:	d008      	beq.n	80059b2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	88db      	ldrh	r3, [r3, #6]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80059a8:	7bbb      	ldrb	r3, [r7, #14]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f003 fcfb 	bl	80093a8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fccc 	bl	8006350 <USBD_CtlSendStatus>

              break;
 80059b8:	e004      	b.n	80059c4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fbff 	bl	80061c0 <USBD_CtlError>
              break;
 80059c2:	bf00      	nop
          }
          break;
 80059c4:	e0e0      	b.n	8005b88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d002      	beq.n	80059d6 <USBD_StdEPReq+0xf2>
 80059d0:	2b03      	cmp	r3, #3
 80059d2:	d015      	beq.n	8005a00 <USBD_StdEPReq+0x11c>
 80059d4:	e026      	b.n	8005a24 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00c      	beq.n	80059f6 <USBD_StdEPReq+0x112>
 80059dc:	7bbb      	ldrb	r3, [r7, #14]
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d009      	beq.n	80059f6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f003 fcde 	bl	80093a8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059ec:	2180      	movs	r1, #128	; 0x80
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f003 fcda 	bl	80093a8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059f4:	e01c      	b.n	8005a30 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80059f6:	6839      	ldr	r1, [r7, #0]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fbe1 	bl	80061c0 <USBD_CtlError>
              break;
 80059fe:	e017      	b.n	8005a30 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	885b      	ldrh	r3, [r3, #2]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d112      	bne.n	8005a2e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f003 fce5 	bl	80093e6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fc97 	bl	8006350 <USBD_CtlSendStatus>
              }
              break;
 8005a22:	e004      	b.n	8005a2e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fbca 	bl	80061c0 <USBD_CtlError>
              break;
 8005a2c:	e000      	b.n	8005a30 <USBD_StdEPReq+0x14c>
              break;
 8005a2e:	bf00      	nop
          }
          break;
 8005a30:	e0aa      	b.n	8005b88 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d002      	beq.n	8005a42 <USBD_StdEPReq+0x15e>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d032      	beq.n	8005aa6 <USBD_StdEPReq+0x1c2>
 8005a40:	e097      	b.n	8005b72 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <USBD_StdEPReq+0x174>
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d004      	beq.n	8005a58 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fbb5 	bl	80061c0 <USBD_CtlError>
                break;
 8005a56:	e091      	b.n	8005b7c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da0b      	bge.n	8005a78 <USBD_StdEPReq+0x194>
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	3310      	adds	r3, #16
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4413      	add	r3, r2
 8005a74:	3304      	adds	r3, #4
 8005a76:	e00b      	b.n	8005a90 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fbf8 	bl	8006294 <USBD_CtlSendData>
              break;
 8005aa4:	e06a      	b.n	8005b7c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da11      	bge.n	8005ad2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3318      	adds	r3, #24
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d117      	bne.n	8005af8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fb78 	bl	80061c0 <USBD_CtlError>
                  break;
 8005ad0:	e054      	b.n	8005b7c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	f003 020f 	and.w	r2, r3, #15
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb65 	bl	80061c0 <USBD_CtlError>
                  break;
 8005af6:	e041      	b.n	8005b7c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0b      	bge.n	8005b18 <USBD_StdEPReq+0x234>
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3310      	adds	r3, #16
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	e00b      	b.n	8005b30 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <USBD_StdEPReq+0x25a>
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d103      	bne.n	8005b46 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	e00e      	b.n	8005b64 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b46:	7bbb      	ldrb	r3, [r7, #14]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f003 fc6a 	bl	8009424 <USBD_LL_IsStallEP>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e002      	b.n	8005b64 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2202      	movs	r2, #2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fb92 	bl	8006294 <USBD_CtlSendData>
              break;
 8005b70:	e004      	b.n	8005b7c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb23 	bl	80061c0 <USBD_CtlError>
              break;
 8005b7a:	bf00      	nop
          }
          break;
 8005b7c:	e004      	b.n	8005b88 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb1d 	bl	80061c0 <USBD_CtlError>
          break;
 8005b86:	bf00      	nop
      }
      break;
 8005b88:	e004      	b.n	8005b94 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb17 	bl	80061c0 <USBD_CtlError>
      break;
 8005b92:	bf00      	nop
  }

  return ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	f200 8128 	bhi.w	8005e16 <USBD_GetDescriptor+0x276>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <USBD_GetDescriptor+0x2c>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be9 	.word	0x08005be9
 8005bd0:	08005c01 	.word	0x08005c01
 8005bd4:	08005c41 	.word	0x08005c41
 8005bd8:	08005e17 	.word	0x08005e17
 8005bdc:	08005e17 	.word	0x08005e17
 8005be0:	08005db7 	.word	0x08005db7
 8005be4:	08005de3 	.word	0x08005de3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	7c12      	ldrb	r2, [r2, #16]
 8005bf4:	f107 0108 	add.w	r1, r7, #8
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	60f8      	str	r0, [r7, #12]
      break;
 8005bfe:	e112      	b.n	8005e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7c1b      	ldrb	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10d      	bne.n	8005c24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f107 0208 	add.w	r2, r7, #8
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c22:	e100      	b.n	8005e26 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	f107 0208 	add.w	r2, r7, #8
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
      break;
 8005c3e:	e0f2      	b.n	8005e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	f200 80ac 	bhi.w	8005da4 <USBD_GetDescriptor+0x204>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <USBD_GetDescriptor+0xb4>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005ca1 	.word	0x08005ca1
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005d09 	.word	0x08005d09
 8005c64:	08005d3d 	.word	0x08005d3d
 8005c68:	08005d71 	.word	0x08005d71
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7c12      	ldrb	r2, [r2, #16]
 8005c84:	f107 0108 	add.w	r1, r7, #8
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005c8e:	e091      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 fa94 	bl	80061c0 <USBD_CtlError>
            err++;
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005c9e:	e089      	b.n	8005db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	7c12      	ldrb	r2, [r2, #16]
 8005cb8:	f107 0108 	add.w	r1, r7, #8
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cc2:	e077      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa7a 	bl	80061c0 <USBD_CtlError>
            err++;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8005cd2:	e06f      	b.n	8005db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	7c12      	ldrb	r2, [r2, #16]
 8005cec:	f107 0108 	add.w	r1, r7, #8
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cf6:	e05d      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa60 	bl	80061c0 <USBD_CtlError>
            err++;
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	3301      	adds	r3, #1
 8005d04:	72fb      	strb	r3, [r7, #11]
          break;
 8005d06:	e055      	b.n	8005db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	7c12      	ldrb	r2, [r2, #16]
 8005d20:	f107 0108 	add.w	r1, r7, #8
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d2a:	e043      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa46 	bl	80061c0 <USBD_CtlError>
            err++;
 8005d34:	7afb      	ldrb	r3, [r7, #11]
 8005d36:	3301      	adds	r3, #1
 8005d38:	72fb      	strb	r3, [r7, #11]
          break;
 8005d3a:	e03b      	b.n	8005db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	7c12      	ldrb	r2, [r2, #16]
 8005d54:	f107 0108 	add.w	r1, r7, #8
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d5e:	e029      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa2c 	bl	80061c0 <USBD_CtlError>
            err++;
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d6e:	e021      	b.n	8005db4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	7c12      	ldrb	r2, [r2, #16]
 8005d88:	f107 0108 	add.w	r1, r7, #8
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
 8005d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d92:	e00f      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa12 	bl	80061c0 <USBD_CtlError>
            err++;
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	72fb      	strb	r3, [r7, #11]
          break;
 8005da2:	e007      	b.n	8005db4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa0a 	bl	80061c0 <USBD_CtlError>
          err++;
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	3301      	adds	r3, #1
 8005db0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005db2:	e038      	b.n	8005e26 <USBD_GetDescriptor+0x286>
 8005db4:	e037      	b.n	8005e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7c1b      	ldrb	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	f107 0208 	add.w	r2, r7, #8
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4798      	blx	r3
 8005dce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005dd0:	e029      	b.n	8005e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f9f3 	bl	80061c0 <USBD_CtlError>
        err++;
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	72fb      	strb	r3, [r7, #11]
      break;
 8005de0:	e021      	b.n	8005e26 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7c1b      	ldrb	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f107 0208 	add.w	r2, r7, #8
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
 8005dfa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	2207      	movs	r2, #7
 8005e02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e04:	e00f      	b.n	8005e26 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9d9 	bl	80061c0 <USBD_CtlError>
        err++;
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
 8005e10:	3301      	adds	r3, #1
 8005e12:	72fb      	strb	r3, [r7, #11]
      break;
 8005e14:	e007      	b.n	8005e26 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9d1 	bl	80061c0 <USBD_CtlError>
      err++;
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	3301      	adds	r3, #1
 8005e22:	72fb      	strb	r3, [r7, #11]
      break;
 8005e24:	bf00      	nop
  }

  if (err != 0U)
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11c      	bne.n	8005e66 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e2c:	893b      	ldrh	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d011      	beq.n	8005e56 <USBD_GetDescriptor+0x2b6>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	88db      	ldrh	r3, [r3, #6]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00d      	beq.n	8005e56 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	88da      	ldrh	r2, [r3, #6]
 8005e3e:	893b      	ldrh	r3, [r7, #8]
 8005e40:	4293      	cmp	r3, r2
 8005e42:	bf28      	it	cs
 8005e44:	4613      	movcs	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e4a:	893b      	ldrh	r3, [r7, #8]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa1f 	bl	8006294 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	88db      	ldrh	r3, [r3, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa76 	bl	8006350 <USBD_CtlSendStatus>
 8005e64:	e000      	b.n	8005e68 <USBD_GetDescriptor+0x2c8>
    return;
 8005e66:	bf00      	nop
    }
  }
}
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	889b      	ldrh	r3, [r3, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d130      	bne.n	8005ee4 <USBD_SetAddress+0x74>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	88db      	ldrh	r3, [r3, #6]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d12c      	bne.n	8005ee4 <USBD_SetAddress+0x74>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	885b      	ldrh	r3, [r3, #2]
 8005e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8005e90:	d828      	bhi.n	8005ee4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	885b      	ldrh	r3, [r3, #2]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea4:	2b03      	cmp	r3, #3
 8005ea6:	d104      	bne.n	8005eb2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005ea8:	6839      	ldr	r1, [r7, #0]
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f988 	bl	80061c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb0:	e01c      	b.n	8005eec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	7bfa      	ldrb	r2, [r7, #15]
 8005eb6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f003 fadc 	bl	800947c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa43 	bl	8006350 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d004      	beq.n	8005eda <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ed8:	e008      	b.n	8005eec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee2:	e003      	b.n	8005eec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f96a 	bl	80061c0 <USBD_CtlError>
  }
}
 8005eec:	bf00      	nop
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	885b      	ldrh	r3, [r3, #2]
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	4b41      	ldr	r3, [pc, #260]	; (800600c <USBD_SetConfig+0x118>)
 8005f06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f08:	4b40      	ldr	r3, [pc, #256]	; (800600c <USBD_SetConfig+0x118>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d904      	bls.n	8005f1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f954 	bl	80061c0 <USBD_CtlError>
 8005f18:	e075      	b.n	8006006 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d002      	beq.n	8005f2a <USBD_SetConfig+0x36>
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d023      	beq.n	8005f70 <USBD_SetConfig+0x7c>
 8005f28:	e062      	b.n	8005ff0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f2a:	4b38      	ldr	r3, [pc, #224]	; (800600c <USBD_SetConfig+0x118>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01a      	beq.n	8005f68 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f32:	4b36      	ldr	r3, [pc, #216]	; (800600c <USBD_SetConfig+0x118>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2203      	movs	r2, #3
 8005f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f44:	4b31      	ldr	r3, [pc, #196]	; (800600c <USBD_SetConfig+0x118>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff f9f3 	bl	8005336 <USBD_SetClassConfig>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d104      	bne.n	8005f60 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f56:	6839      	ldr	r1, [r7, #0]
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f931 	bl	80061c0 <USBD_CtlError>
            return;
 8005f5e:	e052      	b.n	8006006 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f9f5 	bl	8006350 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f66:	e04e      	b.n	8006006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9f1 	bl	8006350 <USBD_CtlSendStatus>
        break;
 8005f6e:	e04a      	b.n	8006006 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005f70:	4b26      	ldr	r3, [pc, #152]	; (800600c <USBD_SetConfig+0x118>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d112      	bne.n	8005f9e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005f80:	4b22      	ldr	r3, [pc, #136]	; (800600c <USBD_SetConfig+0x118>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005f8a:	4b20      	ldr	r3, [pc, #128]	; (800600c <USBD_SetConfig+0x118>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff f9ef 	bl	8005374 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9da 	bl	8006350 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005f9c:	e033      	b.n	8006006 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <USBD_SetConfig+0x118>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d01d      	beq.n	8005fe8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff f9dd 	bl	8005374 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <USBD_SetConfig+0x118>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005fc4:	4b11      	ldr	r3, [pc, #68]	; (800600c <USBD_SetConfig+0x118>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff f9b3 	bl	8005336 <USBD_SetClassConfig>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d104      	bne.n	8005fe0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005fd6:	6839      	ldr	r1, [r7, #0]
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8f1 	bl	80061c0 <USBD_CtlError>
            return;
 8005fde:	e012      	b.n	8006006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9b5 	bl	8006350 <USBD_CtlSendStatus>
        break;
 8005fe6:	e00e      	b.n	8006006 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f9b1 	bl	8006350 <USBD_CtlSendStatus>
        break;
 8005fee:	e00a      	b.n	8006006 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f8e4 	bl	80061c0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <USBD_SetConfig+0x118>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7ff f9b8 	bl	8005374 <USBD_ClrClassConfig>
        break;
 8006004:	bf00      	nop
    }
  }
}
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	2000019c 	.word	0x2000019c

08006010 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	88db      	ldrh	r3, [r3, #6]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d004      	beq.n	800602c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f8cb 	bl	80061c0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800602a:	e021      	b.n	8006070 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006032:	2b01      	cmp	r3, #1
 8006034:	db17      	blt.n	8006066 <USBD_GetConfig+0x56>
 8006036:	2b02      	cmp	r3, #2
 8006038:	dd02      	ble.n	8006040 <USBD_GetConfig+0x30>
 800603a:	2b03      	cmp	r3, #3
 800603c:	d00b      	beq.n	8006056 <USBD_GetConfig+0x46>
 800603e:	e012      	b.n	8006066 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3308      	adds	r3, #8
 800604a:	2201      	movs	r2, #1
 800604c:	4619      	mov	r1, r3
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f920 	bl	8006294 <USBD_CtlSendData>
        break;
 8006054:	e00c      	b.n	8006070 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3304      	adds	r3, #4
 800605a:	2201      	movs	r2, #1
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 f918 	bl	8006294 <USBD_CtlSendData>
        break;
 8006064:	e004      	b.n	8006070 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8a9 	bl	80061c0 <USBD_CtlError>
        break;
 800606e:	bf00      	nop
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006088:	3b01      	subs	r3, #1
 800608a:	2b02      	cmp	r3, #2
 800608c:	d81e      	bhi.n	80060cc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	88db      	ldrh	r3, [r3, #6]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d004      	beq.n	80060a0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f891 	bl	80061c0 <USBD_CtlError>
        break;
 800609e:	e01a      	b.n	80060d6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f043 0202 	orr.w	r2, r3, #2
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	330c      	adds	r3, #12
 80060c0:	2202      	movs	r2, #2
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8e5 	bl	8006294 <USBD_CtlSendData>
      break;
 80060ca:	e004      	b.n	80060d6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f876 	bl	80061c0 <USBD_CtlError>
      break;
 80060d4:	bf00      	nop
  }
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	885b      	ldrh	r3, [r3, #2]
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d106      	bne.n	80060fe <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f929 	bl	8006350 <USBD_CtlSendStatus>
  }
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006116:	3b01      	subs	r3, #1
 8006118:	2b02      	cmp	r3, #2
 800611a:	d80b      	bhi.n	8006134 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	885b      	ldrh	r3, [r3, #2]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d10c      	bne.n	800613e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f90f 	bl	8006350 <USBD_CtlSendStatus>
      }
      break;
 8006132:	e004      	b.n	800613e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006134:	6839      	ldr	r1, [r7, #0]
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f842 	bl	80061c0 <USBD_CtlError>
      break;
 800613c:	e000      	b.n	8006140 <USBD_ClrFeature+0x3a>
      break;
 800613e:	bf00      	nop
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781a      	ldrb	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	785a      	ldrb	r2, [r3, #1]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	3302      	adds	r3, #2
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	b29a      	uxth	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	3303      	adds	r3, #3
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	b29b      	uxth	r3, r3
 8006176:	4413      	add	r3, r2
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	3304      	adds	r3, #4
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	b29a      	uxth	r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	3305      	adds	r3, #5
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	021b      	lsls	r3, r3, #8
 8006190:	b29b      	uxth	r3, r3
 8006192:	4413      	add	r3, r2
 8006194:	b29a      	uxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	3306      	adds	r3, #6
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	3307      	adds	r3, #7
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	4413      	add	r3, r2
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	80da      	strh	r2, [r3, #6]

}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr

080061c0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80061ca:	2180      	movs	r1, #128	; 0x80
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f003 f8eb 	bl	80093a8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80061d2:	2100      	movs	r1, #0
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f003 f8e7 	bl	80093a8 <USBD_LL_StallEP>
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d032      	beq.n	800625e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f834 	bl	8006266 <USBD_GetLen>
 80061fe:	4603      	mov	r3, r0
 8006200:	3301      	adds	r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	75fa      	strb	r2, [r7, #23]
 8006212:	461a      	mov	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4413      	add	r3, r2
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	7812      	ldrb	r2, [r2, #0]
 800621c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	75fa      	strb	r2, [r7, #23]
 8006224:	461a      	mov	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4413      	add	r3, r2
 800622a:	2203      	movs	r2, #3
 800622c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800622e:	e012      	b.n	8006256 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	60fa      	str	r2, [r7, #12]
 8006236:	7dfa      	ldrb	r2, [r7, #23]
 8006238:	1c51      	adds	r1, r2, #1
 800623a:	75f9      	strb	r1, [r7, #23]
 800623c:	4611      	mov	r1, r2
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	440a      	add	r2, r1
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	75fa      	strb	r2, [r7, #23]
 800624c:	461a      	mov	r2, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4413      	add	r3, r2
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e8      	bne.n	8006230 <USBD_GetString+0x4e>
    }
  }
}
 800625e:	bf00      	nop
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006266:	b480      	push	{r7}
 8006268:	b085      	sub	sp, #20
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006272:	e005      	b.n	8006280 <USBD_GetLen+0x1a>
  {
    len++;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	3301      	adds	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
    buf++;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3301      	adds	r3, #1
 800627e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1f5      	bne.n	8006274 <USBD_GetLen+0xe>
  }

  return len;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	bc80      	pop	{r7}
 8006292:	4770      	bx	lr

08006294 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	2100      	movs	r1, #0
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f003 f8fc 	bl	80094ba <USBD_LL_Transmit>

  return USBD_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	68ba      	ldr	r2, [r7, #8]
 80062de:	2100      	movs	r1, #0
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f003 f8ea 	bl	80094ba <USBD_LL_Transmit>

  return USBD_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2203      	movs	r2, #3
 8006302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800630e:	88fa      	ldrh	r2, [r7, #6]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	2100      	movs	r1, #0
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f003 f8ef 	bl	8009500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	2100      	movs	r1, #0
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f003 f8dd 	bl	8009500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2204      	movs	r2, #4
 800635c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006360:	2300      	movs	r3, #0
 8006362:	2200      	movs	r2, #0
 8006364:	2100      	movs	r1, #0
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f003 f8a7 	bl	80094ba <USBD_LL_Transmit>

  return USBD_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2205      	movs	r2, #5
 8006382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006386:	2300      	movs	r3, #0
 8006388:	2200      	movs	r2, #0
 800638a:	2100      	movs	r1, #0
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f003 f8b7 	bl	8009500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a2:	f3ef 8305 	mrs	r3, IPSR
 80063a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80063a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10f      	bne.n	80063ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ae:	f3ef 8310 	mrs	r3, PRIMASK
 80063b2:	607b      	str	r3, [r7, #4]
  return(result);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <osKernelInitialize+0x32>
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <osKernelInitialize+0x60>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d109      	bne.n	80063d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063c2:	f3ef 8311 	mrs	r3, BASEPRI
 80063c6:	603b      	str	r3, [r7, #0]
  return(result);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063ce:	f06f 0305 	mvn.w	r3, #5
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e00c      	b.n	80063f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <osKernelInitialize+0x60>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <osKernelInitialize+0x60>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e002      	b.n	80063f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063ea:	f04f 33ff 	mov.w	r3, #4294967295
 80063ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063f0:	68fb      	ldr	r3, [r7, #12]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bc80      	pop	{r7}
 80063fa:	4770      	bx	lr
 80063fc:	200001a0 	.word	0x200001a0

08006400 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006406:	f3ef 8305 	mrs	r3, IPSR
 800640a:	60bb      	str	r3, [r7, #8]
  return(result);
 800640c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10f      	bne.n	8006432 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006412:	f3ef 8310 	mrs	r3, PRIMASK
 8006416:	607b      	str	r3, [r7, #4]
  return(result);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <osKernelStart+0x32>
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <osKernelStart+0x64>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b02      	cmp	r3, #2
 8006424:	d109      	bne.n	800643a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006426:	f3ef 8311 	mrs	r3, BASEPRI
 800642a:	603b      	str	r3, [r7, #0]
  return(result);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006432:	f06f 0305 	mvn.w	r3, #5
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e00e      	b.n	8006458 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <osKernelStart+0x64>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d107      	bne.n	8006452 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006442:	4b08      	ldr	r3, [pc, #32]	; (8006464 <osKernelStart+0x64>)
 8006444:	2202      	movs	r2, #2
 8006446:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006448:	f001 f864 	bl	8007514 <vTaskStartScheduler>
      stat = osOK;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e002      	b.n	8006458 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006452:	f04f 33ff 	mov.w	r3, #4294967295
 8006456:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006458:	68fb      	ldr	r3, [r7, #12]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200001a0 	.word	0x200001a0

08006468 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b092      	sub	sp, #72	; 0x48
 800646c:	af04      	add	r7, sp, #16
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006478:	f3ef 8305 	mrs	r3, IPSR
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 8094 	bne.w	80065ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006486:	f3ef 8310 	mrs	r3, PRIMASK
 800648a:	623b      	str	r3, [r7, #32]
  return(result);
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 808d 	bne.w	80065ae <osThreadNew+0x146>
 8006494:	4b48      	ldr	r3, [pc, #288]	; (80065b8 <osThreadNew+0x150>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b02      	cmp	r3, #2
 800649a:	d106      	bne.n	80064aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800649c:	f3ef 8311 	mrs	r3, BASEPRI
 80064a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f040 8082 	bne.w	80065ae <osThreadNew+0x146>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d07e      	beq.n	80065ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80064b4:	2318      	movs	r3, #24
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80064b8:	2300      	movs	r3, #0
 80064ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80064bc:	f107 031b 	add.w	r3, r7, #27
 80064c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80064c2:	f04f 33ff 	mov.w	r3, #4294967295
 80064c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d045      	beq.n	800655a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <osThreadNew+0x74>
        name = attr->name;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d002      	beq.n	80064ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <osThreadNew+0x9a>
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	2b38      	cmp	r3, #56	; 0x38
 80064f4:	d805      	bhi.n	8006502 <osThreadNew+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <osThreadNew+0x9e>
        return (NULL);
 8006502:	2300      	movs	r3, #0
 8006504:	e054      	b.n	80065b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00e      	beq.n	800653c <osThreadNew+0xd4>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b5b      	cmp	r3, #91	; 0x5b
 8006524:	d90a      	bls.n	800653c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800652a:	2b00      	cmp	r3, #0
 800652c:	d006      	beq.n	800653c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <osThreadNew+0xd4>
        mem = 1;
 8006536:	2301      	movs	r3, #1
 8006538:	62bb      	str	r3, [r7, #40]	; 0x28
 800653a:	e010      	b.n	800655e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10c      	bne.n	800655e <osThreadNew+0xf6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d108      	bne.n	800655e <osThreadNew+0xf6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <osThreadNew+0xf6>
          mem = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
 8006558:	e001      	b.n	800655e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800655a:	2300      	movs	r3, #0
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	2b01      	cmp	r3, #1
 8006562:	d110      	bne.n	8006586 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800656c:	9202      	str	r2, [sp, #8]
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006578:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fe02 	bl	8007184 <xTaskCreateStatic>
 8006580:	4603      	mov	r3, r0
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	e013      	b.n	80065ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	2b00      	cmp	r3, #0
 800658a:	d110      	bne.n	80065ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	b29a      	uxth	r2, r3
 8006590:	f107 0314 	add.w	r3, r7, #20
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fe49 	bl	8007236 <xTaskCreate>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d001      	beq.n	80065ae <osThreadNew+0x146>
          hTask = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065ae:	697b      	ldr	r3, [r7, #20]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3738      	adds	r7, #56	; 0x38
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200001a0 	.word	0x200001a0

080065bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c4:	f3ef 8305 	mrs	r3, IPSR
 80065c8:	613b      	str	r3, [r7, #16]
  return(result);
 80065ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10f      	bne.n	80065f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d0:	f3ef 8310 	mrs	r3, PRIMASK
 80065d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <osDelay+0x34>
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <osDelay+0x58>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	d109      	bne.n	80065f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065e4:	f3ef 8311 	mrs	r3, BASEPRI
 80065e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <osDelay+0x3c>
    stat = osErrorISR;
 80065f0:	f06f 0305 	mvn.w	r3, #5
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e007      	b.n	8006608 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 ff52 	bl	80074ac <vTaskDelay>
    }
  }

  return (stat);
 8006608:	697b      	ldr	r3, [r7, #20]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200001a0 	.word	0x200001a0

08006618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vApplicationGetIdleTaskMemory+0x28>)
 8006628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4a05      	ldr	r2, [pc, #20]	; (8006644 <vApplicationGetIdleTaskMemory+0x2c>)
 800662e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2280      	movs	r2, #128	; 0x80
 8006634:	601a      	str	r2, [r3, #0]
}
 8006636:	bf00      	nop
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr
 8006640:	200001a4 	.word	0x200001a4
 8006644:	20000200 	.word	0x20000200

08006648 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4a07      	ldr	r2, [pc, #28]	; (8006674 <vApplicationGetTimerTaskMemory+0x2c>)
 8006658:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4a06      	ldr	r2, [pc, #24]	; (8006678 <vApplicationGetTimerTaskMemory+0x30>)
 800665e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006666:	601a      	str	r2, [r3, #0]
}
 8006668:	bf00      	nop
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	20000400 	.word	0x20000400
 8006678:	2000045c 	.word	0x2000045c

0800667c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f103 0208 	add.w	r2, r3, #8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f04f 32ff 	mov.w	r2, #4294967295
 8006694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f103 0208 	add.w	r2, r3, #8
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f103 0208 	add.w	r2, r3, #8
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066b0:	bf00      	nop
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066d2:	b480      	push	{r7}
 80066d4:	b085      	sub	sp, #20
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800672e:	d103      	bne.n	8006738 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	60fb      	str	r3, [r7, #12]
 8006736:	e00c      	b.n	8006752 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	3308      	adds	r3, #8
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e002      	b.n	8006746 <vListInsert+0x2e>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	429a      	cmp	r2, r3
 8006750:	d2f6      	bcs.n	8006740 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6892      	ldr	r2, [r2, #8]
 800679e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6852      	ldr	r2, [r2, #4]
 80067a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d103      	bne.n	80067bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	1e5a      	subs	r2, r3, #1
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bc80      	pop	{r7}
 80067d8:	4770      	bx	lr
	...

080067dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	e7fe      	b.n	8006802 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006804:	f001 ff98 	bl	8008738 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006810:	68f9      	ldr	r1, [r7, #12]
 8006812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	441a      	add	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	3b01      	subs	r3, #1
 8006836:	68f9      	ldr	r1, [r7, #12]
 8006838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	441a      	add	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	22ff      	movs	r2, #255	; 0xff
 8006848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	22ff      	movs	r2, #255	; 0xff
 8006850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d114      	bne.n	8006884 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01a      	beq.n	8006898 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3310      	adds	r3, #16
 8006866:	4618      	mov	r0, r3
 8006868:	f001 f8d8 	bl	8007a1c <xTaskRemoveFromEventList>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d012      	beq.n	8006898 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006872:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <xQueueGenericReset+0xcc>)
 8006874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	e009      	b.n	8006898 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3310      	adds	r3, #16
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff fef7 	bl	800667c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3324      	adds	r3, #36	; 0x24
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff fef2 	bl	800667c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006898:	f001 ff7c 	bl	8008794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800689c:	2301      	movs	r3, #1
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	e000ed04 	.word	0xe000ed04

080068ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08e      	sub	sp, #56	; 0x38
 80068b0:	af02      	add	r7, sp, #8
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <xQueueGenericCreateStatic+0x28>
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d2:	e7fe      	b.n	80068d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <xQueueGenericCreateStatic+0x42>
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
 80068ec:	e7fe      	b.n	80068ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d002      	beq.n	80068fa <xQueueGenericCreateStatic+0x4e>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <xQueueGenericCreateStatic+0x52>
 80068fa:	2301      	movs	r3, #1
 80068fc:	e000      	b.n	8006900 <xQueueGenericCreateStatic+0x54>
 80068fe:	2300      	movs	r3, #0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d109      	bne.n	8006918 <xQueueGenericCreateStatic+0x6c>
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	e7fe      	b.n	8006916 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <xQueueGenericCreateStatic+0x78>
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <xQueueGenericCreateStatic+0x7c>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <xQueueGenericCreateStatic+0x7e>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <xQueueGenericCreateStatic+0x96>
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	61fb      	str	r3, [r7, #28]
 8006940:	e7fe      	b.n	8006940 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006942:	2350      	movs	r3, #80	; 0x50
 8006944:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b50      	cmp	r3, #80	; 0x50
 800694a:	d009      	beq.n	8006960 <xQueueGenericCreateStatic+0xb4>
 800694c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006950:	f383 8811 	msr	BASEPRI, r3
 8006954:	f3bf 8f6f 	isb	sy
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e7fe      	b.n	800695e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00d      	beq.n	8006986 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006972:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4613      	mov	r3, r2
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f805 	bl	8006990 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006988:	4618      	mov	r0, r3
 800698a:	3730      	adds	r7, #48	; 0x30
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
 800699c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e002      	b.n	80069b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069be:	2101      	movs	r1, #1
 80069c0:	69b8      	ldr	r0, [r7, #24]
 80069c2:	f7ff ff0b 	bl	80067dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
	...

080069d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08e      	sub	sp, #56	; 0x38
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069e6:	2300      	movs	r3, #0
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <xQueueGenericSend+0x30>
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a06:	e7fe      	b.n	8006a06 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueGenericSend+0x3e>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <xQueueGenericSend+0x42>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e000      	b.n	8006a1c <xQueueGenericSend+0x44>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d109      	bne.n	8006a34 <xQueueGenericSend+0x5c>
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
 8006a32:	e7fe      	b.n	8006a32 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d103      	bne.n	8006a42 <xQueueGenericSend+0x6a>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <xQueueGenericSend+0x6e>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <xQueueGenericSend+0x70>
 8006a46:	2300      	movs	r3, #0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <xQueueGenericSend+0x88>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	e7fe      	b.n	8006a5e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a60:	f001 f996 	bl	8007d90 <xTaskGetSchedulerState>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <xQueueGenericSend+0x98>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <xQueueGenericSend+0x9c>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <xQueueGenericSend+0x9e>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d109      	bne.n	8006a8e <xQueueGenericSend+0xb6>
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e7fe      	b.n	8006a8c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a8e:	f001 fe53 	bl	8008738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <xQueueGenericSend+0xcc>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d129      	bne.n	8006af8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aaa:	f000 f9ff 	bl	8006eac <prvCopyDataToQueue>
 8006aae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d010      	beq.n	8006ada <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	3324      	adds	r3, #36	; 0x24
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 ffad 	bl	8007a1c <xTaskRemoveFromEventList>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006ac8:	4b3f      	ldr	r3, [pc, #252]	; (8006bc8 <xQueueGenericSend+0x1f0>)
 8006aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	e00a      	b.n	8006af0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ae0:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <xQueueGenericSend+0x1f0>)
 8006ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006af0:	f001 fe50 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e063      	b.n	8006bc0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d103      	bne.n	8006b06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006afe:	f001 fe49 	bl	8008794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e05c      	b.n	8006bc0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d106      	bne.n	8006b1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b0c:	f107 0314 	add.w	r3, r7, #20
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 ffe5 	bl	8007ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b1a:	f001 fe3b 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b1e:	f000 fd5d 	bl	80075dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b22:	f001 fe09 	bl	8008738 <vPortEnterCritical>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b2c:	b25b      	sxtb	r3, r3
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d103      	bne.n	8006b3c <xQueueGenericSend+0x164>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b42:	b25b      	sxtb	r3, r3
 8006b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b48:	d103      	bne.n	8006b52 <xQueueGenericSend+0x17a>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b52:	f001 fe1f 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b56:	1d3a      	adds	r2, r7, #4
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 ffd4 	bl	8007b0c <xTaskCheckForTimeOut>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d124      	bne.n	8006bb4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b6c:	f000 fa96 	bl	800709c <prvIsQueueFull>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d018      	beq.n	8006ba8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	3310      	adds	r3, #16
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fefe 	bl	8007980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b86:	f000 fa21 	bl	8006fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b8a:	f000 fd35 	bl	80075f8 <xTaskResumeAll>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f47f af7c 	bne.w	8006a8e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <xQueueGenericSend+0x1f0>)
 8006b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	e772      	b.n	8006a8e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006baa:	f000 fa0f 	bl	8006fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bae:	f000 fd23 	bl	80075f8 <xTaskResumeAll>
 8006bb2:	e76c      	b.n	8006a8e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 fa09 	bl	8006fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bba:	f000 fd1d 	bl	80075f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bbe:	2300      	movs	r3, #0
		}
	}
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3738      	adds	r7, #56	; 0x38
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed04 	.word	0xe000ed04

08006bcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08e      	sub	sp, #56	; 0x38
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <xQueueGenericSendFromISR+0x2c>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf6:	e7fe      	b.n	8006bf6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d103      	bne.n	8006c06 <xQueueGenericSendFromISR+0x3a>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <xQueueGenericSendFromISR+0x3e>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <xQueueGenericSendFromISR+0x40>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <xQueueGenericSendFromISR+0x58>
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	623b      	str	r3, [r7, #32]
 8006c22:	e7fe      	b.n	8006c22 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d103      	bne.n	8006c32 <xQueueGenericSendFromISR+0x66>
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <xQueueGenericSendFromISR+0x6a>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e000      	b.n	8006c38 <xQueueGenericSendFromISR+0x6c>
 8006c36:	2300      	movs	r3, #0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d109      	bne.n	8006c50 <xQueueGenericSendFromISR+0x84>
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	61fb      	str	r3, [r7, #28]
 8006c4e:	e7fe      	b.n	8006c4e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c50:	f001 fe2c 	bl	80088ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c54:	f3ef 8211 	mrs	r2, BASEPRI
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	61ba      	str	r2, [r7, #24]
 8006c6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d302      	bcc.n	8006c82 <xQueueGenericSendFromISR+0xb6>
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d12c      	bne.n	8006cdc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c92:	f000 f90b 	bl	8006eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c96:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d112      	bne.n	8006cc6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d016      	beq.n	8006cd6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 feb5 	bl	8007a1c <xTaskRemoveFromEventList>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00e      	beq.n	8006cd6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e007      	b.n	8006cd6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cca:	3301      	adds	r3, #1
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	b25a      	sxtb	r2, r3
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cda:	e001      	b.n	8006ce0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3738      	adds	r7, #56	; 0x38
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <xQueueReceive+0x2e>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	623b      	str	r3, [r7, #32]
 8006d20:	e7fe      	b.n	8006d20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <xQueueReceive+0x3c>
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <xQueueReceive+0x40>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <xQueueReceive+0x42>
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d109      	bne.n	8006d4e <xQueueReceive+0x5a>
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	61fb      	str	r3, [r7, #28]
 8006d4c:	e7fe      	b.n	8006d4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4e:	f001 f81f 	bl	8007d90 <xTaskGetSchedulerState>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <xQueueReceive+0x6a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <xQueueReceive+0x6e>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <xQueueReceive+0x70>
 8006d62:	2300      	movs	r3, #0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <xQueueReceive+0x88>
 8006d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	61bb      	str	r3, [r7, #24]
 8006d7a:	e7fe      	b.n	8006d7a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d7c:	f001 fcdc 	bl	8008738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01f      	beq.n	8006dcc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d90:	f000 f8f6 	bl	8006f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00f      	beq.n	8006dc4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	3310      	adds	r3, #16
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fe37 	bl	8007a1c <xTaskRemoveFromEventList>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006db4:	4b3c      	ldr	r3, [pc, #240]	; (8006ea8 <xQueueReceive+0x1b4>)
 8006db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dc4:	f001 fce6 	bl	8008794 <vPortExitCritical>
				return pdPASS;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e069      	b.n	8006ea0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd2:	f001 fcdf 	bl	8008794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e062      	b.n	8006ea0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de0:	f107 0310 	add.w	r3, r7, #16
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fe7b 	bl	8007ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dee:	f001 fcd1 	bl	8008794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df2:	f000 fbf3 	bl	80075dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006df6:	f001 fc9f 	bl	8008738 <vPortEnterCritical>
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d103      	bne.n	8006e10 <xQueueReceive+0x11c>
 8006e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d103      	bne.n	8006e26 <xQueueReceive+0x132>
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e26:	f001 fcb5 	bl	8008794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e2a:	1d3a      	adds	r2, r7, #4
 8006e2c:	f107 0310 	add.w	r3, r7, #16
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fe6a 	bl	8007b0c <xTaskCheckForTimeOut>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d123      	bne.n	8006e86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e40:	f000 f916 	bl	8007070 <prvIsQueueEmpty>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	3324      	adds	r3, #36	; 0x24
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fd94 	bl	8007980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5a:	f000 f8b7 	bl	8006fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e5e:	f000 fbcb 	bl	80075f8 <xTaskResumeAll>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d189      	bne.n	8006d7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <xQueueReceive+0x1b4>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	e780      	b.n	8006d7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7c:	f000 f8a6 	bl	8006fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e80:	f000 fbba 	bl	80075f8 <xTaskResumeAll>
 8006e84:	e77a      	b.n	8006d7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e88:	f000 f8a0 	bl	8006fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e8c:	f000 fbb4 	bl	80075f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e92:	f000 f8ed 	bl	8007070 <prvIsQueueEmpty>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f43f af6f 	beq.w	8006d7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3730      	adds	r7, #48	; 0x30
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d14d      	bne.n	8006f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 ff78 	bl	8007dcc <xTaskPriorityDisinherit>
 8006edc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	605a      	str	r2, [r3, #4]
 8006ee4:	e043      	b.n	8006f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d119      	bne.n	8006f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6898      	ldr	r0, [r3, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	f002 fba8 	bl	800964c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	689a      	ldr	r2, [r3, #8]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d32b      	bcc.n	8006f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	609a      	str	r2, [r3, #8]
 8006f1e:	e026      	b.n	8006f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68d8      	ldr	r0, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	f002 fb8e 	bl	800964c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	425b      	negs	r3, r3
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d207      	bcs.n	8006f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	425b      	negs	r3, r3
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d105      	bne.n	8006f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f76:	697b      	ldr	r3, [r7, #20]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d018      	beq.n	8006fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d303      	bcc.n	8006fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68d9      	ldr	r1, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6838      	ldr	r0, [r7, #0]
 8006fc0:	f002 fb44 	bl	800964c <memcpy>
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fd4:	f001 fbb0 	bl	8008738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe0:	e011      	b.n	8007006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d012      	beq.n	8007010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fd14 	bl	8007a1c <xTaskRemoveFromEventList>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ffa:	f000 fde7 	bl	8007bcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	3b01      	subs	r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dce9      	bgt.n	8006fe2 <prvUnlockQueue+0x16>
 800700e:	e000      	b.n	8007012 <prvUnlockQueue+0x46>
					break;
 8007010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800701a:	f001 fbbb 	bl	8008794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800701e:	f001 fb8b 	bl	8008738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702a:	e011      	b.n	8007050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d012      	beq.n	800705a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3310      	adds	r3, #16
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fcef 	bl	8007a1c <xTaskRemoveFromEventList>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007044:	f000 fdc2 	bl	8007bcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	3b01      	subs	r3, #1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dce9      	bgt.n	800702c <prvUnlockQueue+0x60>
 8007058:	e000      	b.n	800705c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800705a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	22ff      	movs	r2, #255	; 0xff
 8007060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007064:	f001 fb96 	bl	8008794 <vPortExitCritical>
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007078:	f001 fb5e 	bl	8008738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e001      	b.n	800708e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800708e:	f001 fb81 	bl	8008794 <vPortExitCritical>

	return xReturn;
 8007092:	68fb      	ldr	r3, [r7, #12]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f001 fb48 	bl	8008738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d102      	bne.n	80070ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e001      	b.n	80070be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f001 fb69 	bl	8008794 <vPortExitCritical>

	return xReturn;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e014      	b.n	8007106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070dc:	4a0e      	ldr	r2, [pc, #56]	; (8007118 <vQueueAddToRegistry+0x4c>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070e8:	490b      	ldr	r1, [pc, #44]	; (8007118 <vQueueAddToRegistry+0x4c>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070f2:	4a09      	ldr	r2, [pc, #36]	; (8007118 <vQueueAddToRegistry+0x4c>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070fe:	e005      	b.n	800710c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b07      	cmp	r3, #7
 800710a:	d9e7      	bls.n	80070dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800710c:	bf00      	nop
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20001cf0 	.word	0x20001cf0

0800711c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800712c:	f001 fb04 	bl	8008738 <vPortEnterCritical>
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007136:	b25b      	sxtb	r3, r3
 8007138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713c:	d103      	bne.n	8007146 <vQueueWaitForMessageRestricted+0x2a>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800714c:	b25b      	sxtb	r3, r3
 800714e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007152:	d103      	bne.n	800715c <vQueueWaitForMessageRestricted+0x40>
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800715c:	f001 fb1a 	bl	8008794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	3324      	adds	r3, #36	; 0x24
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fc29 	bl	80079c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007176:	6978      	ldr	r0, [r7, #20]
 8007178:	f7ff ff28 	bl	8006fcc <prvUnlockQueue>
	}
 800717c:	bf00      	nop
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08e      	sub	sp, #56	; 0x38
 8007188:	af04      	add	r7, sp, #16
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007194:	2b00      	cmp	r3, #0
 8007196:	d109      	bne.n	80071ac <xTaskCreateStatic+0x28>
 8007198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	e7fe      	b.n	80071aa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <xTaskCreateStatic+0x42>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	61fb      	str	r3, [r7, #28]
 80071c4:	e7fe      	b.n	80071c4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071c6:	235c      	movs	r3, #92	; 0x5c
 80071c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b5c      	cmp	r3, #92	; 0x5c
 80071ce:	d009      	beq.n	80071e4 <xTaskCreateStatic+0x60>
 80071d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d4:	f383 8811 	msr	BASEPRI, r3
 80071d8:	f3bf 8f6f 	isb	sy
 80071dc:	f3bf 8f4f 	dsb	sy
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	e7fe      	b.n	80071e2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d01e      	beq.n	8007228 <xTaskCreateStatic+0xa4>
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01b      	beq.n	8007228 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007202:	2300      	movs	r3, #0
 8007204:	9303      	str	r3, [sp, #12]
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	9302      	str	r3, [sp, #8]
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f850 	bl	80072c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007222:	f000 f8d3 	bl	80073cc <prvAddNewTaskToReadyList>
 8007226:	e001      	b.n	800722c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800722c:	697b      	ldr	r3, [r7, #20]
	}
 800722e:	4618      	mov	r0, r3
 8007230:	3728      	adds	r7, #40	; 0x28
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007236:	b580      	push	{r7, lr}
 8007238:	b08c      	sub	sp, #48	; 0x30
 800723a:	af04      	add	r7, sp, #16
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	603b      	str	r3, [r7, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4618      	mov	r0, r3
 800724c:	f001 fb6a 	bl	8008924 <pvPortMalloc>
 8007250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00e      	beq.n	8007276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007258:	205c      	movs	r0, #92	; 0x5c
 800725a:	f001 fb63 	bl	8008924 <pvPortMalloc>
 800725e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
 800726c:	e005      	b.n	800727a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800726e:	6978      	ldr	r0, [r7, #20]
 8007270:	f001 fc1a 	bl	8008aa8 <vPortFree>
 8007274:	e001      	b.n	800727a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d017      	beq.n	80072b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	2300      	movs	r3, #0
 800728c:	9303      	str	r3, [sp, #12]
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	9302      	str	r3, [sp, #8]
 8007292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f80e 	bl	80072c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072a4:	69f8      	ldr	r0, [r7, #28]
 80072a6:	f000 f891 	bl	80073cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072aa:	2301      	movs	r3, #1
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e002      	b.n	80072b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072b0:	f04f 33ff 	mov.w	r3, #4294967295
 80072b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072b6:	69bb      	ldr	r3, [r7, #24]
	}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	461a      	mov	r2, r3
 80072d8:	21a5      	movs	r1, #165	; 0xa5
 80072da:	f002 f9c2 	bl	8009662 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072e8:	3b01      	subs	r3, #1
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	4413      	add	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	f023 0307 	bic.w	r3, r3, #7
 80072f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d009      	beq.n	8007316 <prvInitialiseNewTask+0x56>
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e7fe      	b.n	8007314 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	e012      	b.n	8007342 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	7819      	ldrb	r1, [r3, #0]
 8007324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	3334      	adds	r3, #52	; 0x34
 800732c:	460a      	mov	r2, r1
 800732e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d006      	beq.n	800734a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	3301      	adds	r3, #1
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	2b0f      	cmp	r3, #15
 8007346:	d9e9      	bls.n	800731c <prvInitialiseNewTask+0x5c>
 8007348:	e000      	b.n	800734c <prvInitialiseNewTask+0x8c>
		{
			break;
 800734a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007356:	2b37      	cmp	r3, #55	; 0x37
 8007358:	d901      	bls.n	800735e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800735a:	2337      	movs	r3, #55	; 0x37
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007362:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007368:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	2200      	movs	r2, #0
 800736e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	3304      	adds	r3, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff f9a0 	bl	80066ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	3318      	adds	r3, #24
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff f99b 	bl	80066ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007388:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007398:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2200      	movs	r2, #0
 800739e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	68f9      	ldr	r1, [r7, #12]
 80073ac:	69b8      	ldr	r0, [r7, #24]
 80073ae:	f001 f8d7 	bl	8008560 <pxPortInitialiseStack>
 80073b2:	4602      	mov	r2, r0
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c4:	bf00      	nop
 80073c6:	3720      	adds	r7, #32
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073d4:	f001 f9b0 	bl	8008738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073d8:	4b2d      	ldr	r3, [pc, #180]	; (8007490 <prvAddNewTaskToReadyList+0xc4>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3301      	adds	r3, #1
 80073de:	4a2c      	ldr	r2, [pc, #176]	; (8007490 <prvAddNewTaskToReadyList+0xc4>)
 80073e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073e2:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d109      	bne.n	80073fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80073ea:	4a2a      	ldr	r2, [pc, #168]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073f0:	4b27      	ldr	r3, [pc, #156]	; (8007490 <prvAddNewTaskToReadyList+0xc4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d110      	bne.n	800741a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073f8:	f000 fc0c 	bl	8007c14 <prvInitialiseTaskLists>
 80073fc:	e00d      	b.n	800741a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073fe:	4b26      	ldr	r3, [pc, #152]	; (8007498 <prvAddNewTaskToReadyList+0xcc>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007406:	4b23      	ldr	r3, [pc, #140]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	429a      	cmp	r2, r3
 8007412:	d802      	bhi.n	800741a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007414:	4a1f      	ldr	r2, [pc, #124]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800741a:	4b20      	ldr	r3, [pc, #128]	; (800749c <prvAddNewTaskToReadyList+0xd0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3301      	adds	r3, #1
 8007420:	4a1e      	ldr	r2, [pc, #120]	; (800749c <prvAddNewTaskToReadyList+0xd0>)
 8007422:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007424:	4b1d      	ldr	r3, [pc, #116]	; (800749c <prvAddNewTaskToReadyList+0xd0>)
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <prvAddNewTaskToReadyList+0xd4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d903      	bls.n	8007440 <prvAddNewTaskToReadyList+0x74>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <prvAddNewTaskToReadyList+0xd4>)
 800743e:	6013      	str	r3, [r2, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4613      	mov	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <prvAddNewTaskToReadyList+0xd8>)
 800744e:	441a      	add	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	4619      	mov	r1, r3
 8007456:	4610      	mov	r0, r2
 8007458:	f7ff f93b 	bl	80066d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800745c:	f001 f99a 	bl	8008794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007460:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <prvAddNewTaskToReadyList+0xcc>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00e      	beq.n	8007486 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <prvAddNewTaskToReadyList+0xc8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	429a      	cmp	r2, r3
 8007474:	d207      	bcs.n	8007486 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007476:	4b0c      	ldr	r3, [pc, #48]	; (80074a8 <prvAddNewTaskToReadyList+0xdc>)
 8007478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	20000d30 	.word	0x20000d30
 8007494:	2000085c 	.word	0x2000085c
 8007498:	20000d3c 	.word	0x20000d3c
 800749c:	20000d4c 	.word	0x20000d4c
 80074a0:	20000d38 	.word	0x20000d38
 80074a4:	20000860 	.word	0x20000860
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d016      	beq.n	80074ec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074be:	4b13      	ldr	r3, [pc, #76]	; (800750c <vTaskDelay+0x60>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <vTaskDelay+0x2e>
 80074c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	e7fe      	b.n	80074d8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80074da:	f000 f87f 	bl	80075dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074de:	2100      	movs	r1, #0
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fcdf 	bl	8007ea4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074e6:	f000 f887 	bl	80075f8 <xTaskResumeAll>
 80074ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d107      	bne.n	8007502 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80074f2:	4b07      	ldr	r3, [pc, #28]	; (8007510 <vTaskDelay+0x64>)
 80074f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007502:	bf00      	nop
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000d58 	.word	0x20000d58
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007522:	463a      	mov	r2, r7
 8007524:	1d39      	adds	r1, r7, #4
 8007526:	f107 0308 	add.w	r3, r7, #8
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff f874 	bl	8006618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007530:	6839      	ldr	r1, [r7, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	9202      	str	r2, [sp, #8]
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	2300      	movs	r3, #0
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	2300      	movs	r3, #0
 8007540:	460a      	mov	r2, r1
 8007542:	4920      	ldr	r1, [pc, #128]	; (80075c4 <vTaskStartScheduler+0xb0>)
 8007544:	4820      	ldr	r0, [pc, #128]	; (80075c8 <vTaskStartScheduler+0xb4>)
 8007546:	f7ff fe1d 	bl	8007184 <xTaskCreateStatic>
 800754a:	4602      	mov	r2, r0
 800754c:	4b1f      	ldr	r3, [pc, #124]	; (80075cc <vTaskStartScheduler+0xb8>)
 800754e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007550:	4b1e      	ldr	r3, [pc, #120]	; (80075cc <vTaskStartScheduler+0xb8>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007558:	2301      	movs	r3, #1
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	e001      	b.n	8007562 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d102      	bne.n	800756e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007568:	f000 fcf0 	bl	8007f4c <xTimerCreateTimerTask>
 800756c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d115      	bne.n	80075a0 <vTaskStartScheduler+0x8c>
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007586:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <vTaskStartScheduler+0xbc>)
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800758e:	4b11      	ldr	r3, [pc, #68]	; (80075d4 <vTaskStartScheduler+0xc0>)
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007594:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <vTaskStartScheduler+0xc4>)
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800759a:	f001 f85d 	bl	8008658 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800759e:	e00d      	b.n	80075bc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d109      	bne.n	80075bc <vTaskStartScheduler+0xa8>
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e7fe      	b.n	80075ba <vTaskStartScheduler+0xa6>
}
 80075bc:	bf00      	nop
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	080096d0 	.word	0x080096d0
 80075c8:	08007be5 	.word	0x08007be5
 80075cc:	20000d54 	.word	0x20000d54
 80075d0:	20000d50 	.word	0x20000d50
 80075d4:	20000d3c 	.word	0x20000d3c
 80075d8:	20000d34 	.word	0x20000d34

080075dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <vTaskSuspendAll+0x18>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	4a03      	ldr	r2, [pc, #12]	; (80075f4 <vTaskSuspendAll+0x18>)
 80075e8:	6013      	str	r3, [r2, #0]
}
 80075ea:	bf00      	nop
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000d58 	.word	0x20000d58

080075f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007602:	2300      	movs	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007606:	4b41      	ldr	r3, [pc, #260]	; (800770c <xTaskResumeAll+0x114>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <xTaskResumeAll+0x2a>
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	603b      	str	r3, [r7, #0]
 8007620:	e7fe      	b.n	8007620 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007622:	f001 f889 	bl	8008738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <xTaskResumeAll+0x114>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3b01      	subs	r3, #1
 800762c:	4a37      	ldr	r2, [pc, #220]	; (800770c <xTaskResumeAll+0x114>)
 800762e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007630:	4b36      	ldr	r3, [pc, #216]	; (800770c <xTaskResumeAll+0x114>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d162      	bne.n	80076fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007638:	4b35      	ldr	r3, [pc, #212]	; (8007710 <xTaskResumeAll+0x118>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d05e      	beq.n	80076fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007640:	e02f      	b.n	80076a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007642:	4b34      	ldr	r3, [pc, #208]	; (8007714 <xTaskResumeAll+0x11c>)
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3318      	adds	r3, #24
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff f89a 	bl	8006788 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3304      	adds	r3, #4
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff f895 	bl	8006788 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	4b2d      	ldr	r3, [pc, #180]	; (8007718 <xTaskResumeAll+0x120>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <xTaskResumeAll+0x7a>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766e:	4a2a      	ldr	r2, [pc, #168]	; (8007718 <xTaskResumeAll+0x120>)
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a27      	ldr	r2, [pc, #156]	; (800771c <xTaskResumeAll+0x124>)
 8007680:	441a      	add	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3304      	adds	r3, #4
 8007686:	4619      	mov	r1, r3
 8007688:	4610      	mov	r0, r2
 800768a:	f7ff f822 	bl	80066d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007692:	4b23      	ldr	r3, [pc, #140]	; (8007720 <xTaskResumeAll+0x128>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	429a      	cmp	r2, r3
 800769a:	d302      	bcc.n	80076a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800769c:	4b21      	ldr	r3, [pc, #132]	; (8007724 <xTaskResumeAll+0x12c>)
 800769e:	2201      	movs	r2, #1
 80076a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076a2:	4b1c      	ldr	r3, [pc, #112]	; (8007714 <xTaskResumeAll+0x11c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1cb      	bne.n	8007642 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076b0:	f000 fb4a 	bl	8007d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <xTaskResumeAll+0x130>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d010      	beq.n	80076e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076c0:	f000 f844 	bl	800774c <xTaskIncrementTick>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d002      	beq.n	80076d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076ca:	4b16      	ldr	r3, [pc, #88]	; (8007724 <xTaskResumeAll+0x12c>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3b01      	subs	r3, #1
 80076d4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d1f1      	bne.n	80076c0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80076dc:	4b12      	ldr	r3, [pc, #72]	; (8007728 <xTaskResumeAll+0x130>)
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <xTaskResumeAll+0x12c>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d009      	beq.n	80076fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <xTaskResumeAll+0x134>)
 80076f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076fe:	f001 f849 	bl	8008794 <vPortExitCritical>

	return xAlreadyYielded;
 8007702:	68bb      	ldr	r3, [r7, #8]
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000d58 	.word	0x20000d58
 8007710:	20000d30 	.word	0x20000d30
 8007714:	20000cf0 	.word	0x20000cf0
 8007718:	20000d38 	.word	0x20000d38
 800771c:	20000860 	.word	0x20000860
 8007720:	2000085c 	.word	0x2000085c
 8007724:	20000d44 	.word	0x20000d44
 8007728:	20000d40 	.word	0x20000d40
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007736:	4b04      	ldr	r3, [pc, #16]	; (8007748 <xTaskGetTickCount+0x18>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800773c:	687b      	ldr	r3, [r7, #4]
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr
 8007748:	20000d34 	.word	0x20000d34

0800774c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007756:	4b51      	ldr	r3, [pc, #324]	; (800789c <xTaskIncrementTick+0x150>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f040 808d 	bne.w	800787a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007760:	4b4f      	ldr	r3, [pc, #316]	; (80078a0 <xTaskIncrementTick+0x154>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3301      	adds	r3, #1
 8007766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007768:	4a4d      	ldr	r2, [pc, #308]	; (80078a0 <xTaskIncrementTick+0x154>)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d11f      	bne.n	80077b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007774:	4b4b      	ldr	r3, [pc, #300]	; (80078a4 <xTaskIncrementTick+0x158>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <xTaskIncrementTick+0x46>
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	603b      	str	r3, [r7, #0]
 8007790:	e7fe      	b.n	8007790 <xTaskIncrementTick+0x44>
 8007792:	4b44      	ldr	r3, [pc, #272]	; (80078a4 <xTaskIncrementTick+0x158>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	4b43      	ldr	r3, [pc, #268]	; (80078a8 <xTaskIncrementTick+0x15c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a41      	ldr	r2, [pc, #260]	; (80078a4 <xTaskIncrementTick+0x158>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	4a41      	ldr	r2, [pc, #260]	; (80078a8 <xTaskIncrementTick+0x15c>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <xTaskIncrementTick+0x160>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	4a3f      	ldr	r2, [pc, #252]	; (80078ac <xTaskIncrementTick+0x160>)
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	f000 faca 	bl	8007d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077b4:	4b3e      	ldr	r3, [pc, #248]	; (80078b0 <xTaskIncrementTick+0x164>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d34e      	bcc.n	800785c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077be:	4b39      	ldr	r3, [pc, #228]	; (80078a4 <xTaskIncrementTick+0x158>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <xTaskIncrementTick+0x80>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <xTaskIncrementTick+0x82>
 80077cc:	2300      	movs	r3, #0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077d2:	4b37      	ldr	r3, [pc, #220]	; (80078b0 <xTaskIncrementTick+0x164>)
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	601a      	str	r2, [r3, #0]
					break;
 80077da:	e03f      	b.n	800785c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80077dc:	4b31      	ldr	r3, [pc, #196]	; (80078a4 <xTaskIncrementTick+0x158>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d203      	bcs.n	80077fc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077f4:	4a2e      	ldr	r2, [pc, #184]	; (80078b0 <xTaskIncrementTick+0x164>)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6013      	str	r3, [r2, #0]
						break;
 80077fa:	e02f      	b.n	800785c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	3304      	adds	r3, #4
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe ffc1 	bl	8006788 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d004      	beq.n	8007818 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	3318      	adds	r3, #24
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe ffb8 	bl	8006788 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781c:	4b25      	ldr	r3, [pc, #148]	; (80078b4 <xTaskIncrementTick+0x168>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	429a      	cmp	r2, r3
 8007822:	d903      	bls.n	800782c <xTaskIncrementTick+0xe0>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	4a22      	ldr	r2, [pc, #136]	; (80078b4 <xTaskIncrementTick+0x168>)
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4a1f      	ldr	r2, [pc, #124]	; (80078b8 <xTaskIncrementTick+0x16c>)
 800783a:	441a      	add	r2, r3
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fe ff45 	bl	80066d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784c:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <xTaskIncrementTick+0x170>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	429a      	cmp	r2, r3
 8007854:	d3b3      	bcc.n	80077be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007856:	2301      	movs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800785a:	e7b0      	b.n	80077be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800785c:	4b17      	ldr	r3, [pc, #92]	; (80078bc <xTaskIncrementTick+0x170>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007862:	4915      	ldr	r1, [pc, #84]	; (80078b8 <xTaskIncrementTick+0x16c>)
 8007864:	4613      	mov	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	440b      	add	r3, r1
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d907      	bls.n	8007884 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	e004      	b.n	8007884 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800787a:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <xTaskIncrementTick+0x174>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	3301      	adds	r3, #1
 8007880:	4a0f      	ldr	r2, [pc, #60]	; (80078c0 <xTaskIncrementTick+0x174>)
 8007882:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007884:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <xTaskIncrementTick+0x178>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007890:	697b      	ldr	r3, [r7, #20]
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	20000d58 	.word	0x20000d58
 80078a0:	20000d34 	.word	0x20000d34
 80078a4:	20000ce8 	.word	0x20000ce8
 80078a8:	20000cec 	.word	0x20000cec
 80078ac:	20000d48 	.word	0x20000d48
 80078b0:	20000d50 	.word	0x20000d50
 80078b4:	20000d38 	.word	0x20000d38
 80078b8:	20000860 	.word	0x20000860
 80078bc:	2000085c 	.word	0x2000085c
 80078c0:	20000d40 	.word	0x20000d40
 80078c4:	20000d44 	.word	0x20000d44

080078c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078ce:	4b27      	ldr	r3, [pc, #156]	; (800796c <vTaskSwitchContext+0xa4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d003      	beq.n	80078de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078d6:	4b26      	ldr	r3, [pc, #152]	; (8007970 <vTaskSwitchContext+0xa8>)
 80078d8:	2201      	movs	r2, #1
 80078da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078dc:	e040      	b.n	8007960 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80078de:	4b24      	ldr	r3, [pc, #144]	; (8007970 <vTaskSwitchContext+0xa8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80078e4:	4b23      	ldr	r3, [pc, #140]	; (8007974 <vTaskSwitchContext+0xac>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e00f      	b.n	800790c <vTaskSwitchContext+0x44>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <vTaskSwitchContext+0x3e>
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	e7fe      	b.n	8007904 <vTaskSwitchContext+0x3c>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3b01      	subs	r3, #1
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	491a      	ldr	r1, [pc, #104]	; (8007978 <vTaskSwitchContext+0xb0>)
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0e5      	beq.n	80078ec <vTaskSwitchContext+0x24>
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4613      	mov	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4413      	add	r3, r2
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <vTaskSwitchContext+0xb0>)
 800792c:	4413      	add	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	3308      	adds	r3, #8
 8007942:	429a      	cmp	r2, r3
 8007944:	d104      	bne.n	8007950 <vTaskSwitchContext+0x88>
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	605a      	str	r2, [r3, #4]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4a09      	ldr	r2, [pc, #36]	; (800797c <vTaskSwitchContext+0xb4>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4a06      	ldr	r2, [pc, #24]	; (8007974 <vTaskSwitchContext+0xac>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6013      	str	r3, [r2, #0]
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	20000d58 	.word	0x20000d58
 8007970:	20000d44 	.word	0x20000d44
 8007974:	20000d38 	.word	0x20000d38
 8007978:	20000860 	.word	0x20000860
 800797c:	2000085c 	.word	0x2000085c

08007980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <vTaskPlaceOnEventList+0x24>
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
 80079a2:	e7fe      	b.n	80079a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079a4:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <vTaskPlaceOnEventList+0x44>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3318      	adds	r3, #24
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7fe feb3 	bl	8006718 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079b2:	2101      	movs	r1, #1
 80079b4:	6838      	ldr	r0, [r7, #0]
 80079b6:	f000 fa75 	bl	8007ea4 <prvAddCurrentTaskToDelayedList>
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	2000085c 	.word	0x2000085c

080079c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d109      	bne.n	80079ee <vTaskPlaceOnEventListRestricted+0x26>
 80079da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	617b      	str	r3, [r7, #20]
 80079ec:	e7fe      	b.n	80079ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ee:	4b0a      	ldr	r3, [pc, #40]	; (8007a18 <vTaskPlaceOnEventListRestricted+0x50>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3318      	adds	r3, #24
 80079f4:	4619      	mov	r1, r3
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7fe fe6b 	bl	80066d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007a02:	f04f 33ff 	mov.w	r3, #4294967295
 8007a06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	68b8      	ldr	r0, [r7, #8]
 8007a0c:	f000 fa4a 	bl	8007ea4 <prvAddCurrentTaskToDelayedList>
	}
 8007a10:	bf00      	nop
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	2000085c 	.word	0x2000085c

08007a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <xTaskRemoveFromEventList+0x2a>
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	60fb      	str	r3, [r7, #12]
 8007a44:	e7fe      	b.n	8007a44 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	3318      	adds	r3, #24
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fe9c 	bl	8006788 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a50:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <xTaskRemoveFromEventList+0xac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d11d      	bne.n	8007a94 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fe93 	bl	8006788 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4b19      	ldr	r3, [pc, #100]	; (8007acc <xTaskRemoveFromEventList+0xb0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d903      	bls.n	8007a76 <xTaskRemoveFromEventList+0x5a>
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	4a16      	ldr	r2, [pc, #88]	; (8007acc <xTaskRemoveFromEventList+0xb0>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a13      	ldr	r2, [pc, #76]	; (8007ad0 <xTaskRemoveFromEventList+0xb4>)
 8007a84:	441a      	add	r2, r3
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe fe20 	bl	80066d2 <vListInsertEnd>
 8007a92:	e005      	b.n	8007aa0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	3318      	adds	r3, #24
 8007a98:	4619      	mov	r1, r3
 8007a9a:	480e      	ldr	r0, [pc, #56]	; (8007ad4 <xTaskRemoveFromEventList+0xb8>)
 8007a9c:	f7fe fe19 	bl	80066d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	4b0c      	ldr	r3, [pc, #48]	; (8007ad8 <xTaskRemoveFromEventList+0xbc>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d905      	bls.n	8007aba <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <xTaskRemoveFromEventList+0xc0>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e001      	b.n	8007abe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007abe:	697b      	ldr	r3, [r7, #20]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	20000d58 	.word	0x20000d58
 8007acc:	20000d38 	.word	0x20000d38
 8007ad0:	20000860 	.word	0x20000860
 8007ad4:	20000cf0 	.word	0x20000cf0
 8007ad8:	2000085c 	.word	0x2000085c
 8007adc:	20000d44 	.word	0x20000d44

08007ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <vTaskInternalSetTimeOutState+0x24>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <vTaskInternalSetTimeOutState+0x28>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	605a      	str	r2, [r3, #4]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bc80      	pop	{r7}
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000d48 	.word	0x20000d48
 8007b08:	20000d34 	.word	0x20000d34

08007b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <xTaskCheckForTimeOut+0x24>
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	613b      	str	r3, [r7, #16]
 8007b2e:	e7fe      	b.n	8007b2e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d109      	bne.n	8007b4a <xTaskCheckForTimeOut+0x3e>
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	60fb      	str	r3, [r7, #12]
 8007b48:	e7fe      	b.n	8007b48 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007b4a:	f000 fdf5 	bl	8008738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b4e:	4b1d      	ldr	r3, [pc, #116]	; (8007bc4 <xTaskCheckForTimeOut+0xb8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	69ba      	ldr	r2, [r7, #24]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b66:	d102      	bne.n	8007b6e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	61fb      	str	r3, [r7, #28]
 8007b6c:	e023      	b.n	8007bb6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <xTaskCheckForTimeOut+0xbc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d007      	beq.n	8007b8a <xTaskCheckForTimeOut+0x7e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d302      	bcc.n	8007b8a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b84:	2301      	movs	r3, #1
 8007b86:	61fb      	str	r3, [r7, #28]
 8007b88:	e015      	b.n	8007bb6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d20b      	bcs.n	8007bac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	1ad2      	subs	r2, r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff ff9d 	bl	8007ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
 8007baa:	e004      	b.n	8007bb6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bb6:	f000 fded 	bl	8008794 <vPortExitCritical>

	return xReturn;
 8007bba:	69fb      	ldr	r3, [r7, #28]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3720      	adds	r7, #32
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000d34 	.word	0x20000d34
 8007bc8:	20000d48 	.word	0x20000d48

08007bcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bcc:	b480      	push	{r7}
 8007bce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bd0:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <vTaskMissedYield+0x14>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
}
 8007bd6:	bf00      	nop
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000d44 	.word	0x20000d44

08007be4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bec:	f000 f852 	bl	8007c94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bf0:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <prvIdleTask+0x28>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d9f9      	bls.n	8007bec <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bf8:	4b05      	ldr	r3, [pc, #20]	; (8007c10 <prvIdleTask+0x2c>)
 8007bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c08:	e7f0      	b.n	8007bec <prvIdleTask+0x8>
 8007c0a:	bf00      	nop
 8007c0c:	20000860 	.word	0x20000860
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	607b      	str	r3, [r7, #4]
 8007c1e:	e00c      	b.n	8007c3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	4613      	mov	r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	4413      	add	r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	4a12      	ldr	r2, [pc, #72]	; (8007c74 <prvInitialiseTaskLists+0x60>)
 8007c2c:	4413      	add	r3, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fd24 	bl	800667c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3301      	adds	r3, #1
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b37      	cmp	r3, #55	; 0x37
 8007c3e:	d9ef      	bls.n	8007c20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c40:	480d      	ldr	r0, [pc, #52]	; (8007c78 <prvInitialiseTaskLists+0x64>)
 8007c42:	f7fe fd1b 	bl	800667c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c46:	480d      	ldr	r0, [pc, #52]	; (8007c7c <prvInitialiseTaskLists+0x68>)
 8007c48:	f7fe fd18 	bl	800667c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c4c:	480c      	ldr	r0, [pc, #48]	; (8007c80 <prvInitialiseTaskLists+0x6c>)
 8007c4e:	f7fe fd15 	bl	800667c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c52:	480c      	ldr	r0, [pc, #48]	; (8007c84 <prvInitialiseTaskLists+0x70>)
 8007c54:	f7fe fd12 	bl	800667c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c58:	480b      	ldr	r0, [pc, #44]	; (8007c88 <prvInitialiseTaskLists+0x74>)
 8007c5a:	f7fe fd0f 	bl	800667c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <prvInitialiseTaskLists+0x78>)
 8007c60:	4a05      	ldr	r2, [pc, #20]	; (8007c78 <prvInitialiseTaskLists+0x64>)
 8007c62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c64:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <prvInitialiseTaskLists+0x7c>)
 8007c66:	4a05      	ldr	r2, [pc, #20]	; (8007c7c <prvInitialiseTaskLists+0x68>)
 8007c68:	601a      	str	r2, [r3, #0]
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000860 	.word	0x20000860
 8007c78:	20000cc0 	.word	0x20000cc0
 8007c7c:	20000cd4 	.word	0x20000cd4
 8007c80:	20000cf0 	.word	0x20000cf0
 8007c84:	20000d04 	.word	0x20000d04
 8007c88:	20000d1c 	.word	0x20000d1c
 8007c8c:	20000ce8 	.word	0x20000ce8
 8007c90:	20000cec 	.word	0x20000cec

08007c94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c9a:	e019      	b.n	8007cd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c9c:	f000 fd4c 	bl	8008738 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ca0:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <prvCheckTasksWaitingTermination+0x4c>)
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fd6b 	bl	8006788 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <prvCheckTasksWaitingTermination+0x50>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <prvCheckTasksWaitingTermination+0x50>)
 8007cba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cbc:	4b0a      	ldr	r3, [pc, #40]	; (8007ce8 <prvCheckTasksWaitingTermination+0x54>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3b01      	subs	r3, #1
 8007cc2:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <prvCheckTasksWaitingTermination+0x54>)
 8007cc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cc6:	f000 fd65 	bl	8008794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f80e 	bl	8007cec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd0:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <prvCheckTasksWaitingTermination+0x54>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e1      	bne.n	8007c9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	20000d04 	.word	0x20000d04
 8007ce4:	20000d30 	.word	0x20000d30
 8007ce8:	20000d18 	.word	0x20000d18

08007cec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d108      	bne.n	8007d10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 fed0 	bl	8008aa8 <vPortFree>
				vPortFree( pxTCB );
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 fecd 	bl	8008aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d0e:	e017      	b.n	8007d40 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d103      	bne.n	8007d22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fec4 	bl	8008aa8 <vPortFree>
	}
 8007d20:	e00e      	b.n	8007d40 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d28:	2b02      	cmp	r3, #2
 8007d2a:	d009      	beq.n	8007d40 <prvDeleteTCB+0x54>
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	e7fe      	b.n	8007d3e <prvDeleteTCB+0x52>
	}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d4e:	4b0e      	ldr	r3, [pc, #56]	; (8007d88 <prvResetNextTaskUnblockTime+0x40>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <prvResetNextTaskUnblockTime+0x14>
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e000      	b.n	8007d5e <prvResetNextTaskUnblockTime+0x16>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <prvResetNextTaskUnblockTime+0x44>)
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d6a:	e008      	b.n	8007d7e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d6c:	4b06      	ldr	r3, [pc, #24]	; (8007d88 <prvResetNextTaskUnblockTime+0x40>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	4a04      	ldr	r2, [pc, #16]	; (8007d8c <prvResetNextTaskUnblockTime+0x44>)
 8007d7c:	6013      	str	r3, [r2, #0]
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr
 8007d88:	20000ce8 	.word	0x20000ce8
 8007d8c:	20000d50 	.word	0x20000d50

08007d90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <xTaskGetSchedulerState+0x34>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	607b      	str	r3, [r7, #4]
 8007da2:	e008      	b.n	8007db6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da4:	4b08      	ldr	r3, [pc, #32]	; (8007dc8 <xTaskGetSchedulerState+0x38>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d102      	bne.n	8007db2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007dac:	2302      	movs	r3, #2
 8007dae:	607b      	str	r3, [r7, #4]
 8007db0:	e001      	b.n	8007db6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007db2:	2300      	movs	r3, #0
 8007db4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007db6:	687b      	ldr	r3, [r7, #4]
	}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bc80      	pop	{r7}
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	20000d3c 	.word	0x20000d3c
 8007dc8:	20000d58 	.word	0x20000d58

08007dcc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d054      	beq.n	8007e8c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007de2:	4b2d      	ldr	r3, [pc, #180]	; (8007e98 <xTaskPriorityDisinherit+0xcc>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d009      	beq.n	8007e00 <xTaskPriorityDisinherit+0x34>
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	60fb      	str	r3, [r7, #12]
 8007dfe:	e7fe      	b.n	8007dfe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d109      	bne.n	8007e1c <xTaskPriorityDisinherit+0x50>
 8007e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0c:	f383 8811 	msr	BASEPRI, r3
 8007e10:	f3bf 8f6f 	isb	sy
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	60bb      	str	r3, [r7, #8]
 8007e1a:	e7fe      	b.n	8007e1a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e20:	1e5a      	subs	r2, r3, #1
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d02c      	beq.n	8007e8c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d128      	bne.n	8007e8c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe fca2 	bl	8006788 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	; (8007e9c <xTaskPriorityDisinherit+0xd0>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d903      	bls.n	8007e6c <xTaskPriorityDisinherit+0xa0>
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4a0c      	ldr	r2, [pc, #48]	; (8007e9c <xTaskPriorityDisinherit+0xd0>)
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e70:	4613      	mov	r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <xTaskPriorityDisinherit+0xd4>)
 8007e7a:	441a      	add	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	3304      	adds	r3, #4
 8007e80:	4619      	mov	r1, r3
 8007e82:	4610      	mov	r0, r2
 8007e84:	f7fe fc25 	bl	80066d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e8c:	697b      	ldr	r3, [r7, #20]
	}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	2000085c 	.word	0x2000085c
 8007e9c:	20000d38 	.word	0x20000d38
 8007ea0:	20000860 	.word	0x20000860

08007ea4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007eae:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <prvAddCurrentTaskToDelayedList+0x90>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eb4:	4b20      	ldr	r3, [pc, #128]	; (8007f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7fe fc64 	bl	8006788 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d10a      	bne.n	8007ede <prvAddCurrentTaskToDelayedList+0x3a>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d007      	beq.n	8007ede <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ece:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4819      	ldr	r0, [pc, #100]	; (8007f3c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ed8:	f7fe fbfb 	bl	80066d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007edc:	e026      	b.n	8007f2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d209      	bcs.n	8007f0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4619      	mov	r1, r3
 8007f02:	4610      	mov	r0, r2
 8007f04:	f7fe fc08 	bl	8006718 <vListInsert>
}
 8007f08:	e010      	b.n	8007f2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f0a:	4b0e      	ldr	r3, [pc, #56]	; (8007f44 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3304      	adds	r3, #4
 8007f14:	4619      	mov	r1, r3
 8007f16:	4610      	mov	r0, r2
 8007f18:	f7fe fbfe 	bl	8006718 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d202      	bcs.n	8007f2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f26:	4a08      	ldr	r2, [pc, #32]	; (8007f48 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	6013      	str	r3, [r2, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000d34 	.word	0x20000d34
 8007f38:	2000085c 	.word	0x2000085c
 8007f3c:	20000d1c 	.word	0x20000d1c
 8007f40:	20000cec 	.word	0x20000cec
 8007f44:	20000ce8 	.word	0x20000ce8
 8007f48:	20000d50 	.word	0x20000d50

08007f4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08a      	sub	sp, #40	; 0x28
 8007f50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f56:	f000 fac3 	bl	80084e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f5a:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <xTimerCreateTimerTask+0x80>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d021      	beq.n	8007fa6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f6a:	1d3a      	adds	r2, r7, #4
 8007f6c:	f107 0108 	add.w	r1, r7, #8
 8007f70:	f107 030c 	add.w	r3, r7, #12
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fb67 	bl	8006648 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f7a:	6879      	ldr	r1, [r7, #4]
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	9202      	str	r2, [sp, #8]
 8007f82:	9301      	str	r3, [sp, #4]
 8007f84:	2302      	movs	r3, #2
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	2300      	movs	r3, #0
 8007f8a:	460a      	mov	r2, r1
 8007f8c:	4910      	ldr	r1, [pc, #64]	; (8007fd0 <xTimerCreateTimerTask+0x84>)
 8007f8e:	4811      	ldr	r0, [pc, #68]	; (8007fd4 <xTimerCreateTimerTask+0x88>)
 8007f90:	f7ff f8f8 	bl	8007184 <xTaskCreateStatic>
 8007f94:	4602      	mov	r2, r0
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <xTimerCreateTimerTask+0x8c>)
 8007f98:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <xTimerCreateTimerTask+0x8c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d109      	bne.n	8007fc0 <xTimerCreateTimerTask+0x74>
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	e7fe      	b.n	8007fbe <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007fc0:	697b      	ldr	r3, [r7, #20]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000d8c 	.word	0x20000d8c
 8007fd0:	080096d8 	.word	0x080096d8
 8007fd4:	080080f5 	.word	0x080080f5
 8007fd8:	20000d90 	.word	0x20000d90

08007fdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	607a      	str	r2, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fea:	2300      	movs	r3, #0
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d109      	bne.n	8008008 <xTimerGenericCommand+0x2c>
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	623b      	str	r3, [r7, #32]
 8008006:	e7fe      	b.n	8008006 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008008:	4b19      	ldr	r3, [pc, #100]	; (8008070 <xTimerGenericCommand+0x94>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d02a      	beq.n	8008066 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b05      	cmp	r3, #5
 8008020:	dc18      	bgt.n	8008054 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008022:	f7ff feb5 	bl	8007d90 <xTaskGetSchedulerState>
 8008026:	4603      	mov	r3, r0
 8008028:	2b02      	cmp	r3, #2
 800802a:	d109      	bne.n	8008040 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800802c:	4b10      	ldr	r3, [pc, #64]	; (8008070 <xTimerGenericCommand+0x94>)
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	f107 0110 	add.w	r1, r7, #16
 8008034:	2300      	movs	r3, #0
 8008036:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008038:	f7fe fcce 	bl	80069d8 <xQueueGenericSend>
 800803c:	6278      	str	r0, [r7, #36]	; 0x24
 800803e:	e012      	b.n	8008066 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008040:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <xTimerGenericCommand+0x94>)
 8008042:	6818      	ldr	r0, [r3, #0]
 8008044:	f107 0110 	add.w	r1, r7, #16
 8008048:	2300      	movs	r3, #0
 800804a:	2200      	movs	r2, #0
 800804c:	f7fe fcc4 	bl	80069d8 <xQueueGenericSend>
 8008050:	6278      	str	r0, [r7, #36]	; 0x24
 8008052:	e008      	b.n	8008066 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008054:	4b06      	ldr	r3, [pc, #24]	; (8008070 <xTimerGenericCommand+0x94>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	f107 0110 	add.w	r1, r7, #16
 800805c:	2300      	movs	r3, #0
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	f7fe fdb4 	bl	8006bcc <xQueueGenericSendFromISR>
 8008064:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008068:	4618      	mov	r0, r3
 800806a:	3728      	adds	r7, #40	; 0x28
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	20000d8c 	.word	0x20000d8c

08008074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af02      	add	r7, sp, #8
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800807e:	4b1c      	ldr	r3, [pc, #112]	; (80080f0 <prvProcessExpiredTimer+0x7c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	3304      	adds	r3, #4
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fb7b 	bl	8006788 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d121      	bne.n	80080de <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	18d1      	adds	r1, r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	6978      	ldr	r0, [r7, #20]
 80080a8:	f000 f8c8 	bl	800823c <prvInsertTimerInActiveList>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d015      	beq.n	80080de <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080b2:	2300      	movs	r3, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	2300      	movs	r3, #0
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	2100      	movs	r1, #0
 80080bc:	6978      	ldr	r0, [r7, #20]
 80080be:	f7ff ff8d 	bl	8007fdc <xTimerGenericCommand>
 80080c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d109      	bne.n	80080de <prvProcessExpiredTimer+0x6a>
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	e7fe      	b.n	80080dc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	6978      	ldr	r0, [r7, #20]
 80080e4:	4798      	blx	r3
}
 80080e6:	bf00      	nop
 80080e8:	3718      	adds	r7, #24
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
 80080ee:	bf00      	nop
 80080f0:	20000d84 	.word	0x20000d84

080080f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	4618      	mov	r0, r3
 8008102:	f000 f857 	bl	80081b4 <prvGetNextExpireTime>
 8008106:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	4619      	mov	r1, r3
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 f803 	bl	8008118 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008112:	f000 f8d5 	bl	80082c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008116:	e7f1      	b.n	80080fc <prvTimerTask+0x8>

08008118 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008122:	f7ff fa5b 	bl	80075dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008126:	f107 0308 	add.w	r3, r7, #8
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f866 	bl	80081fc <prvSampleTimeNow>
 8008130:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d130      	bne.n	800819a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <prvProcessTimerOrBlockTask+0x3c>
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	429a      	cmp	r2, r3
 8008144:	d806      	bhi.n	8008154 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008146:	f7ff fa57 	bl	80075f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800814a:	68f9      	ldr	r1, [r7, #12]
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f7ff ff91 	bl	8008074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008152:	e024      	b.n	800819e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d008      	beq.n	800816c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800815a:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <prvProcessTimerOrBlockTask+0x90>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	bf0c      	ite	eq
 8008164:	2301      	moveq	r3, #1
 8008166:	2300      	movne	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800816c:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <prvProcessTimerOrBlockTask+0x94>)
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	1ad3      	subs	r3, r2, r3
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	4619      	mov	r1, r3
 800817a:	f7fe ffcf 	bl	800711c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800817e:	f7ff fa3b 	bl	80075f8 <xTaskResumeAll>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008188:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <prvProcessTimerOrBlockTask+0x98>)
 800818a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	f3bf 8f6f 	isb	sy
}
 8008198:	e001      	b.n	800819e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800819a:	f7ff fa2d 	bl	80075f8 <xTaskResumeAll>
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000d88 	.word	0x20000d88
 80081ac:	20000d8c 	.word	0x20000d8c
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081bc:	4b0e      	ldr	r3, [pc, #56]	; (80081f8 <prvGetNextExpireTime+0x44>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d105      	bne.n	80081e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081da:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <prvGetNextExpireTime+0x44>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e001      	b.n	80081ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081ea:	68fb      	ldr	r3, [r7, #12]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000d84 	.word	0x20000d84

080081fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008204:	f7ff fa94 	bl	8007730 <xTaskGetTickCount>
 8008208:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800820a:	4b0b      	ldr	r3, [pc, #44]	; (8008238 <prvSampleTimeNow+0x3c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	429a      	cmp	r2, r3
 8008212:	d205      	bcs.n	8008220 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008214:	f000 f904 	bl	8008420 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e002      	b.n	8008226 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008226:	4a04      	ldr	r2, [pc, #16]	; (8008238 <prvSampleTimeNow+0x3c>)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800822c:	68fb      	ldr	r3, [r7, #12]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000d94 	.word	0x20000d94

0800823c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	429a      	cmp	r2, r3
 8008260:	d812      	bhi.n	8008288 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	429a      	cmp	r2, r3
 800826e:	d302      	bcc.n	8008276 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008270:	2301      	movs	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	e01b      	b.n	80082ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008276:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <prvInsertTimerInActiveList+0x7c>)
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	3304      	adds	r3, #4
 800827e:	4619      	mov	r1, r3
 8008280:	4610      	mov	r0, r2
 8008282:	f7fe fa49 	bl	8006718 <vListInsert>
 8008286:	e012      	b.n	80082ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d206      	bcs.n	800829e <prvInsertTimerInActiveList+0x62>
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	429a      	cmp	r2, r3
 8008296:	d302      	bcc.n	800829e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008298:	2301      	movs	r3, #1
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e007      	b.n	80082ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800829e:	4b07      	ldr	r3, [pc, #28]	; (80082bc <prvInsertTimerInActiveList+0x80>)
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4619      	mov	r1, r3
 80082a8:	4610      	mov	r0, r2
 80082aa:	f7fe fa35 	bl	8006718 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082ae:	697b      	ldr	r3, [r7, #20]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000d88 	.word	0x20000d88
 80082bc:	20000d84 	.word	0x20000d84

080082c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08e      	sub	sp, #56	; 0x38
 80082c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082c6:	e099      	b.n	80083fc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	da17      	bge.n	80082fe <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082ce:	1d3b      	adds	r3, r7, #4
 80082d0:	3304      	adds	r3, #4
 80082d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d109      	bne.n	80082ee <prvProcessReceivedCommands+0x2e>
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	61fb      	str	r3, [r7, #28]
 80082ec:	e7fe      	b.n	80082ec <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f4:	6850      	ldr	r0, [r2, #4]
 80082f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082f8:	6892      	ldr	r2, [r2, #8]
 80082fa:	4611      	mov	r1, r2
 80082fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	db7a      	blt.n	80083fa <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	695b      	ldr	r3, [r3, #20]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	3304      	adds	r3, #4
 8008314:	4618      	mov	r0, r3
 8008316:	f7fe fa37 	bl	8006788 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800831a:	463b      	mov	r3, r7
 800831c:	4618      	mov	r0, r3
 800831e:	f7ff ff6d 	bl	80081fc <prvSampleTimeNow>
 8008322:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b09      	cmp	r3, #9
 8008328:	d868      	bhi.n	80083fc <prvProcessReceivedCommands+0x13c>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <prvProcessReceivedCommands+0x70>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008359 	.word	0x08008359
 8008334:	08008359 	.word	0x08008359
 8008338:	08008359 	.word	0x08008359
 800833c:	080083fd 	.word	0x080083fd
 8008340:	080083b3 	.word	0x080083b3
 8008344:	080083e9 	.word	0x080083e9
 8008348:	08008359 	.word	0x08008359
 800834c:	08008359 	.word	0x08008359
 8008350:	080083fd 	.word	0x080083fd
 8008354:	080083b3 	.word	0x080083b3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	18d1      	adds	r1, r2, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008366:	f7ff ff69 	bl	800823c <prvInsertTimerInActiveList>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d045      	beq.n	80083fc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008376:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d13d      	bne.n	80083fc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	441a      	add	r2, r3
 8008388:	2300      	movs	r3, #0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	2300      	movs	r3, #0
 800838e:	2100      	movs	r1, #0
 8008390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008392:	f7ff fe23 	bl	8007fdc <xTimerGenericCommand>
 8008396:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d12e      	bne.n	80083fc <prvProcessReceivedCommands+0x13c>
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e7fe      	b.n	80083b0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <prvProcessReceivedCommands+0x114>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	617b      	str	r3, [r7, #20]
 80083d2:	e7fe      	b.n	80083d2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80083d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d6:	699a      	ldr	r2, [r3, #24]
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	18d1      	adds	r1, r2, r3
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083e2:	f7ff ff2b 	bl	800823c <prvInsertTimerInActiveList>
					break;
 80083e6:	e009      	b.n	80083fc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d104      	bne.n	80083fc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80083f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083f4:	f000 fb58 	bl	8008aa8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80083f8:	e000      	b.n	80083fc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80083fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083fc:	4b07      	ldr	r3, [pc, #28]	; (800841c <prvProcessReceivedCommands+0x15c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	1d39      	adds	r1, r7, #4
 8008402:	2200      	movs	r2, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f7fe fc75 	bl	8006cf4 <xQueueReceive>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	f47f af5b 	bne.w	80082c8 <prvProcessReceivedCommands+0x8>
	}
}
 8008412:	bf00      	nop
 8008414:	3730      	adds	r7, #48	; 0x30
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000d8c 	.word	0x20000d8c

08008420 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008426:	e044      	b.n	80084b2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008428:	4b2b      	ldr	r3, [pc, #172]	; (80084d8 <prvSwitchTimerLists+0xb8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008432:	4b29      	ldr	r3, [pc, #164]	; (80084d8 <prvSwitchTimerLists+0xb8>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3304      	adds	r3, #4
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe f9a1 	bl	8006788 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	69db      	ldr	r3, [r3, #28]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d12d      	bne.n	80084b2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	4413      	add	r3, r2
 800845e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	429a      	cmp	r2, r3
 8008466:	d90e      	bls.n	8008486 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008474:	4b18      	ldr	r3, [pc, #96]	; (80084d8 <prvSwitchTimerLists+0xb8>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	3304      	adds	r3, #4
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7fe f94a 	bl	8006718 <vListInsert>
 8008484:	e015      	b.n	80084b2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008486:	2300      	movs	r3, #0
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	2300      	movs	r3, #0
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	2100      	movs	r1, #0
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff fda3 	bl	8007fdc <xTimerGenericCommand>
 8008496:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <prvSwitchTimerLists+0x92>
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	603b      	str	r3, [r7, #0]
 80084b0:	e7fe      	b.n	80084b0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084b2:	4b09      	ldr	r3, [pc, #36]	; (80084d8 <prvSwitchTimerLists+0xb8>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d1b5      	bne.n	8008428 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <prvSwitchTimerLists+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80084c2:	4b06      	ldr	r3, [pc, #24]	; (80084dc <prvSwitchTimerLists+0xbc>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a04      	ldr	r2, [pc, #16]	; (80084d8 <prvSwitchTimerLists+0xb8>)
 80084c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80084ca:	4a04      	ldr	r2, [pc, #16]	; (80084dc <prvSwitchTimerLists+0xbc>)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	6013      	str	r3, [r2, #0]
}
 80084d0:	bf00      	nop
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000d84 	.word	0x20000d84
 80084dc:	20000d88 	.word	0x20000d88

080084e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80084e6:	f000 f927 	bl	8008738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80084ea:	4b15      	ldr	r3, [pc, #84]	; (8008540 <prvCheckForValidListAndQueue+0x60>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d120      	bne.n	8008534 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80084f2:	4814      	ldr	r0, [pc, #80]	; (8008544 <prvCheckForValidListAndQueue+0x64>)
 80084f4:	f7fe f8c2 	bl	800667c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80084f8:	4813      	ldr	r0, [pc, #76]	; (8008548 <prvCheckForValidListAndQueue+0x68>)
 80084fa:	f7fe f8bf 	bl	800667c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <prvCheckForValidListAndQueue+0x6c>)
 8008500:	4a10      	ldr	r2, [pc, #64]	; (8008544 <prvCheckForValidListAndQueue+0x64>)
 8008502:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008504:	4b12      	ldr	r3, [pc, #72]	; (8008550 <prvCheckForValidListAndQueue+0x70>)
 8008506:	4a10      	ldr	r2, [pc, #64]	; (8008548 <prvCheckForValidListAndQueue+0x68>)
 8008508:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800850a:	2300      	movs	r3, #0
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4b11      	ldr	r3, [pc, #68]	; (8008554 <prvCheckForValidListAndQueue+0x74>)
 8008510:	4a11      	ldr	r2, [pc, #68]	; (8008558 <prvCheckForValidListAndQueue+0x78>)
 8008512:	2110      	movs	r1, #16
 8008514:	200a      	movs	r0, #10
 8008516:	f7fe f9c9 	bl	80068ac <xQueueGenericCreateStatic>
 800851a:	4602      	mov	r2, r0
 800851c:	4b08      	ldr	r3, [pc, #32]	; (8008540 <prvCheckForValidListAndQueue+0x60>)
 800851e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008520:	4b07      	ldr	r3, [pc, #28]	; (8008540 <prvCheckForValidListAndQueue+0x60>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d005      	beq.n	8008534 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008528:	4b05      	ldr	r3, [pc, #20]	; (8008540 <prvCheckForValidListAndQueue+0x60>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	490b      	ldr	r1, [pc, #44]	; (800855c <prvCheckForValidListAndQueue+0x7c>)
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe fdcc 	bl	80070cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008534:	f000 f92e 	bl	8008794 <vPortExitCritical>
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000d8c 	.word	0x20000d8c
 8008544:	20000d5c 	.word	0x20000d5c
 8008548:	20000d70 	.word	0x20000d70
 800854c:	20000d84 	.word	0x20000d84
 8008550:	20000d88 	.word	0x20000d88
 8008554:	20000e38 	.word	0x20000e38
 8008558:	20000d98 	.word	0x20000d98
 800855c:	080096e0 	.word	0x080096e0

08008560 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3b04      	subs	r3, #4
 8008570:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3b04      	subs	r3, #4
 800857e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f023 0201 	bic.w	r2, r3, #1
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3b04      	subs	r3, #4
 800858e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008590:	4a08      	ldr	r2, [pc, #32]	; (80085b4 <pxPortInitialiseStack+0x54>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3b14      	subs	r3, #20
 800859a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	3b20      	subs	r3, #32
 80085a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bc80      	pop	{r7}
 80085b2:	4770      	bx	lr
 80085b4:	080085b9 	.word	0x080085b9

080085b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80085be:	2300      	movs	r3, #0
 80085c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085c2:	4b10      	ldr	r3, [pc, #64]	; (8008604 <prvTaskExitError+0x4c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ca:	d009      	beq.n	80085e0 <prvTaskExitError+0x28>
 80085cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	e7fe      	b.n	80085de <prvTaskExitError+0x26>
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085f2:	bf00      	nop
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0fc      	beq.n	80085f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	bc80      	pop	{r7}
 8008602:	4770      	bx	lr
 8008604:	2000011c 	.word	0x2000011c
	...

08008610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008610:	4b07      	ldr	r3, [pc, #28]	; (8008630 <pxCurrentTCBConst2>)
 8008612:	6819      	ldr	r1, [r3, #0]
 8008614:	6808      	ldr	r0, [r1, #0]
 8008616:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800861a:	f380 8809 	msr	PSP, r0
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f04f 0000 	mov.w	r0, #0
 8008626:	f380 8811 	msr	BASEPRI, r0
 800862a:	f04e 0e0d 	orr.w	lr, lr, #13
 800862e:	4770      	bx	lr

08008630 <pxCurrentTCBConst2>:
 8008630:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008634:	bf00      	nop
 8008636:	bf00      	nop

08008638 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008638:	4806      	ldr	r0, [pc, #24]	; (8008654 <prvPortStartFirstTask+0x1c>)
 800863a:	6800      	ldr	r0, [r0, #0]
 800863c:	6800      	ldr	r0, [r0, #0]
 800863e:	f380 8808 	msr	MSP, r0
 8008642:	b662      	cpsie	i
 8008644:	b661      	cpsie	f
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	df00      	svc	0
 8008650:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008652:	bf00      	nop
 8008654:	e000ed08 	.word	0xe000ed08

08008658 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800865e:	4b31      	ldr	r3, [pc, #196]	; (8008724 <xPortStartScheduler+0xcc>)
 8008660:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	22ff      	movs	r2, #255	; 0xff
 800866e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	b2db      	uxtb	r3, r3
 8008676:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008680:	b2da      	uxtb	r2, r3
 8008682:	4b29      	ldr	r3, [pc, #164]	; (8008728 <xPortStartScheduler+0xd0>)
 8008684:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008686:	4b29      	ldr	r3, [pc, #164]	; (800872c <xPortStartScheduler+0xd4>)
 8008688:	2207      	movs	r2, #7
 800868a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800868c:	e009      	b.n	80086a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800868e:	4b27      	ldr	r3, [pc, #156]	; (800872c <xPortStartScheduler+0xd4>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3b01      	subs	r3, #1
 8008694:	4a25      	ldr	r2, [pc, #148]	; (800872c <xPortStartScheduler+0xd4>)
 8008696:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008698:	78fb      	ldrb	r3, [r7, #3]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d0ef      	beq.n	800868e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ae:	4b1f      	ldr	r3, [pc, #124]	; (800872c <xPortStartScheduler+0xd4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f1c3 0307 	rsb	r3, r3, #7
 80086b6:	2b04      	cmp	r3, #4
 80086b8:	d009      	beq.n	80086ce <xPortStartScheduler+0x76>
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	60bb      	str	r3, [r7, #8]
 80086cc:	e7fe      	b.n	80086cc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80086ce:	4b17      	ldr	r3, [pc, #92]	; (800872c <xPortStartScheduler+0xd4>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	021b      	lsls	r3, r3, #8
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <xPortStartScheduler+0xd4>)
 80086d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80086d8:	4b14      	ldr	r3, [pc, #80]	; (800872c <xPortStartScheduler+0xd4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086e0:	4a12      	ldr	r2, [pc, #72]	; (800872c <xPortStartScheduler+0xd4>)
 80086e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80086ec:	4b10      	ldr	r3, [pc, #64]	; (8008730 <xPortStartScheduler+0xd8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a0f      	ldr	r2, [pc, #60]	; (8008730 <xPortStartScheduler+0xd8>)
 80086f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80086f8:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <xPortStartScheduler+0xd8>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <xPortStartScheduler+0xd8>)
 80086fe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008704:	f000 f8b0 	bl	8008868 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008708:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <xPortStartScheduler+0xdc>)
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800870e:	f7ff ff93 	bl	8008638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008712:	f7ff f8d9 	bl	80078c8 <vTaskSwitchContext>
	prvTaskExitError();
 8008716:	f7ff ff4f 	bl	80085b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	e000e400 	.word	0xe000e400
 8008728:	20000e88 	.word	0x20000e88
 800872c:	20000e8c 	.word	0x20000e8c
 8008730:	e000ed20 	.word	0xe000ed20
 8008734:	2000011c 	.word	0x2000011c

08008738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008750:	4b0e      	ldr	r3, [pc, #56]	; (800878c <vPortEnterCritical+0x54>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3301      	adds	r3, #1
 8008756:	4a0d      	ldr	r2, [pc, #52]	; (800878c <vPortEnterCritical+0x54>)
 8008758:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800875a:	4b0c      	ldr	r3, [pc, #48]	; (800878c <vPortEnterCritical+0x54>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10e      	bne.n	8008780 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008762:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <vPortEnterCritical+0x58>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <vPortEnterCritical+0x48>
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	603b      	str	r3, [r7, #0]
 800877e:	e7fe      	b.n	800877e <vPortEnterCritical+0x46>
	}
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	bc80      	pop	{r7}
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	2000011c 	.word	0x2000011c
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800879a:	4b10      	ldr	r3, [pc, #64]	; (80087dc <vPortExitCritical+0x48>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d109      	bne.n	80087b6 <vPortExitCritical+0x22>
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	607b      	str	r3, [r7, #4]
 80087b4:	e7fe      	b.n	80087b4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80087b6:	4b09      	ldr	r3, [pc, #36]	; (80087dc <vPortExitCritical+0x48>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	4a07      	ldr	r2, [pc, #28]	; (80087dc <vPortExitCritical+0x48>)
 80087be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <vPortExitCritical+0x48>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <vPortExitCritical+0x3e>
 80087c8:	2300      	movs	r3, #0
 80087ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr
 80087dc:	2000011c 	.word	0x2000011c

080087e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087e0:	f3ef 8009 	mrs	r0, PSP
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4b0d      	ldr	r3, [pc, #52]	; (8008820 <pxCurrentTCBConst>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80087f0:	6010      	str	r0, [r2, #0]
 80087f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80087f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087fa:	f380 8811 	msr	BASEPRI, r0
 80087fe:	f7ff f863 	bl	80078c8 <vTaskSwitchContext>
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8811 	msr	BASEPRI, r0
 800880a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800880e:	6819      	ldr	r1, [r3, #0]
 8008810:	6808      	ldr	r0, [r1, #0]
 8008812:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008816:	f380 8809 	msr	PSP, r0
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	4770      	bx	lr

08008820 <pxCurrentTCBConst>:
 8008820:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop

08008828 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008840:	f7fe ff84 	bl	800774c <xTaskIncrementTick>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <xPortSysTickHandler+0x3c>)
 800884c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	2300      	movs	r3, #0
 8008854:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	e000ed04 	.word	0xe000ed04

08008868 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008868:	b480      	push	{r7}
 800886a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <vPortSetupTimerInterrupt+0x30>)
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008872:	4b0a      	ldr	r3, [pc, #40]	; (800889c <vPortSetupTimerInterrupt+0x34>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008878:	4b09      	ldr	r3, [pc, #36]	; (80088a0 <vPortSetupTimerInterrupt+0x38>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <vPortSetupTimerInterrupt+0x3c>)
 800887e:	fba2 2303 	umull	r2, r3, r2, r3
 8008882:	099b      	lsrs	r3, r3, #6
 8008884:	4a08      	ldr	r2, [pc, #32]	; (80088a8 <vPortSetupTimerInterrupt+0x40>)
 8008886:	3b01      	subs	r3, #1
 8008888:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800888a:	4b03      	ldr	r3, [pc, #12]	; (8008898 <vPortSetupTimerInterrupt+0x30>)
 800888c:	2207      	movs	r2, #7
 800888e:	601a      	str	r2, [r3, #0]
}
 8008890:	bf00      	nop
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr
 8008898:	e000e010 	.word	0xe000e010
 800889c:	e000e018 	.word	0xe000e018
 80088a0:	20000000 	.word	0x20000000
 80088a4:	10624dd3 	.word	0x10624dd3
 80088a8:	e000e014 	.word	0xe000e014

080088ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088b2:	f3ef 8305 	mrs	r3, IPSR
 80088b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	d913      	bls.n	80088e6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088be:	4a15      	ldr	r2, [pc, #84]	; (8008914 <vPortValidateInterruptPriority+0x68>)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088c8:	4b13      	ldr	r3, [pc, #76]	; (8008918 <vPortValidateInterruptPriority+0x6c>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	7afa      	ldrb	r2, [r7, #11]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d209      	bcs.n	80088e6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	e7fe      	b.n	80088e4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <vPortValidateInterruptPriority+0x70>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <vPortValidateInterruptPriority+0x74>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d909      	bls.n	800890a <vPortValidateInterruptPriority+0x5e>
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	e7fe      	b.n	8008908 <vPortValidateInterruptPriority+0x5c>
	}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	bc80      	pop	{r7}
 8008912:	4770      	bx	lr
 8008914:	e000e3f0 	.word	0xe000e3f0
 8008918:	20000e88 	.word	0x20000e88
 800891c:	e000ed0c 	.word	0xe000ed0c
 8008920:	20000e8c 	.word	0x20000e8c

08008924 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08a      	sub	sp, #40	; 0x28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800892c:	2300      	movs	r3, #0
 800892e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008930:	f7fe fe54 	bl	80075dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008934:	4b57      	ldr	r3, [pc, #348]	; (8008a94 <pvPortMalloc+0x170>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800893c:	f000 f90c 	bl	8008b58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008940:	4b55      	ldr	r3, [pc, #340]	; (8008a98 <pvPortMalloc+0x174>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4013      	ands	r3, r2
 8008948:	2b00      	cmp	r3, #0
 800894a:	f040 808c 	bne.w	8008a66 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01c      	beq.n	800898e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008954:	2208      	movs	r2, #8
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4413      	add	r3, r2
 800895a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f003 0307 	and.w	r3, r3, #7
 8008962:	2b00      	cmp	r3, #0
 8008964:	d013      	beq.n	800898e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f023 0307 	bic.w	r3, r3, #7
 800896c:	3308      	adds	r3, #8
 800896e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <pvPortMalloc+0x6a>
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	f383 8811 	msr	BASEPRI, r3
 8008982:	f3bf 8f6f 	isb	sy
 8008986:	f3bf 8f4f 	dsb	sy
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e7fe      	b.n	800898c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d068      	beq.n	8008a66 <pvPortMalloc+0x142>
 8008994:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <pvPortMalloc+0x178>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d863      	bhi.n	8008a66 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800899e:	4b40      	ldr	r3, [pc, #256]	; (8008aa0 <pvPortMalloc+0x17c>)
 80089a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089a2:	4b3f      	ldr	r3, [pc, #252]	; (8008aa0 <pvPortMalloc+0x17c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089a8:	e004      	b.n	80089b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d903      	bls.n	80089c6 <pvPortMalloc+0xa2>
 80089be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f1      	bne.n	80089aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089c6:	4b33      	ldr	r3, [pc, #204]	; (8008a94 <pvPortMalloc+0x170>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d04a      	beq.n	8008a66 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2208      	movs	r2, #8
 80089d6:	4413      	add	r3, r2
 80089d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	1ad2      	subs	r2, r2, r3
 80089ea:	2308      	movs	r3, #8
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d91e      	bls.n	8008a30 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	f003 0307 	and.w	r3, r3, #7
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d009      	beq.n	8008a18 <pvPortMalloc+0xf4>
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	f383 8811 	msr	BASEPRI, r3
 8008a0c:	f3bf 8f6f 	isb	sy
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	613b      	str	r3, [r7, #16]
 8008a16:	e7fe      	b.n	8008a16 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a2a:	69b8      	ldr	r0, [r7, #24]
 8008a2c:	f000 f8f6 	bl	8008c1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a30:	4b1a      	ldr	r3, [pc, #104]	; (8008a9c <pvPortMalloc+0x178>)
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	4a18      	ldr	r2, [pc, #96]	; (8008a9c <pvPortMalloc+0x178>)
 8008a3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a3e:	4b17      	ldr	r3, [pc, #92]	; (8008a9c <pvPortMalloc+0x178>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b18      	ldr	r3, [pc, #96]	; (8008aa4 <pvPortMalloc+0x180>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d203      	bcs.n	8008a52 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a4a:	4b14      	ldr	r3, [pc, #80]	; (8008a9c <pvPortMalloc+0x178>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a15      	ldr	r2, [pc, #84]	; (8008aa4 <pvPortMalloc+0x180>)
 8008a50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	4b10      	ldr	r3, [pc, #64]	; (8008a98 <pvPortMalloc+0x174>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a66:	f7fe fdc7 	bl	80075f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	f003 0307 	and.w	r3, r3, #7
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d009      	beq.n	8008a88 <pvPortMalloc+0x164>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e7fe      	b.n	8008a86 <pvPortMalloc+0x162>
	return pvReturn;
 8008a88:	69fb      	ldr	r3, [r7, #28]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3728      	adds	r7, #40	; 0x28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20001a98 	.word	0x20001a98
 8008a98:	20001aa4 	.word	0x20001aa4
 8008a9c:	20001a9c 	.word	0x20001a9c
 8008aa0:	20001a90 	.word	0x20001a90
 8008aa4:	20001aa0 	.word	0x20001aa0

08008aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d046      	beq.n	8008b48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008aba:	2308      	movs	r3, #8
 8008abc:	425b      	negs	r3, r3
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	685a      	ldr	r2, [r3, #4]
 8008acc:	4b20      	ldr	r3, [pc, #128]	; (8008b50 <vPortFree+0xa8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <vPortFree+0x42>
 8008ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	60fb      	str	r3, [r7, #12]
 8008ae8:	e7fe      	b.n	8008ae8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <vPortFree+0x5e>
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60bb      	str	r3, [r7, #8]
 8008b04:	e7fe      	b.n	8008b04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	4b11      	ldr	r3, [pc, #68]	; (8008b50 <vPortFree+0xa8>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d019      	beq.n	8008b48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d115      	bne.n	8008b48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <vPortFree+0xa8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	43db      	mvns	r3, r3
 8008b26:	401a      	ands	r2, r3
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b2c:	f7fe fd56 	bl	80075dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	4b07      	ldr	r3, [pc, #28]	; (8008b54 <vPortFree+0xac>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4413      	add	r3, r2
 8008b3a:	4a06      	ldr	r2, [pc, #24]	; (8008b54 <vPortFree+0xac>)
 8008b3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3e:	6938      	ldr	r0, [r7, #16]
 8008b40:	f000 f86c 	bl	8008c1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b44:	f7fe fd58 	bl	80075f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b48:	bf00      	nop
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	20001aa4 	.word	0x20001aa4
 8008b54:	20001a9c 	.word	0x20001a9c

08008b58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b64:	4b27      	ldr	r3, [pc, #156]	; (8008c04 <prvHeapInit+0xac>)
 8008b66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00c      	beq.n	8008b8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	3307      	adds	r3, #7
 8008b76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0307 	bic.w	r3, r3, #7
 8008b7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	4a1f      	ldr	r2, [pc, #124]	; (8008c04 <prvHeapInit+0xac>)
 8008b88:	4413      	add	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b90:	4a1d      	ldr	r2, [pc, #116]	; (8008c08 <prvHeapInit+0xb0>)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b96:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <prvHeapInit+0xb0>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0307 	bic.w	r3, r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	4a15      	ldr	r2, [pc, #84]	; (8008c0c <prvHeapInit+0xb4>)
 8008bb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bba:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <prvHeapInit+0xb4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <prvHeapInit+0xb4>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68fa      	ldr	r2, [r7, #12]
 8008bd2:	1ad2      	subs	r2, r2, r3
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <prvHeapInit+0xb4>)
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	4a0a      	ldr	r2, [pc, #40]	; (8008c10 <prvHeapInit+0xb8>)
 8008be6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <prvHeapInit+0xbc>)
 8008bee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bf0:	4b09      	ldr	r3, [pc, #36]	; (8008c18 <prvHeapInit+0xc0>)
 8008bf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf6:	601a      	str	r2, [r3, #0]
}
 8008bf8:	bf00      	nop
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000e90 	.word	0x20000e90
 8008c08:	20001a90 	.word	0x20001a90
 8008c0c:	20001a98 	.word	0x20001a98
 8008c10:	20001aa0 	.word	0x20001aa0
 8008c14:	20001a9c 	.word	0x20001a9c
 8008c18:	20001aa4 	.word	0x20001aa4

08008c1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c24:	4b27      	ldr	r3, [pc, #156]	; (8008cc4 <prvInsertBlockIntoFreeList+0xa8>)
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e002      	b.n	8008c30 <prvInsertBlockIntoFreeList+0x14>
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d8f7      	bhi.n	8008c2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	4413      	add	r3, r2
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d108      	bne.n	8008c5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	441a      	add	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	68ba      	ldr	r2, [r7, #8]
 8008c68:	441a      	add	r2, r3
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d118      	bne.n	8008ca4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <prvInsertBlockIntoFreeList+0xac>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d00d      	beq.n	8008c9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	441a      	add	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	e008      	b.n	8008cac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <prvInsertBlockIntoFreeList+0xac>)
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	e003      	b.n	8008cac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d002      	beq.n	8008cba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bc80      	pop	{r7}
 8008cc2:	4770      	bx	lr
 8008cc4:	20001a90 	.word	0x20001a90
 8008cc8:	20001a98 	.word	0x20001a98

08008ccc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4912      	ldr	r1, [pc, #72]	; (8008d1c <MX_USB_DEVICE_Init+0x50>)
 8008cd4:	4812      	ldr	r0, [pc, #72]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008cd6:	f7fc fad4 	bl	8005282 <USBD_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ce0:	f7f7 fb98 	bl	8000414 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ce4:	490f      	ldr	r1, [pc, #60]	; (8008d24 <MX_USB_DEVICE_Init+0x58>)
 8008ce6:	480e      	ldr	r0, [pc, #56]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008ce8:	f7fc faf6 	bl	80052d8 <USBD_RegisterClass>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cf2:	f7f7 fb8f 	bl	8000414 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cf6:	490c      	ldr	r1, [pc, #48]	; (8008d28 <MX_USB_DEVICE_Init+0x5c>)
 8008cf8:	4809      	ldr	r0, [pc, #36]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008cfa:	f7fc fa27 	bl	800514c <USBD_CDC_RegisterInterface>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d04:	f7f7 fb86 	bl	8000414 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d08:	4805      	ldr	r0, [pc, #20]	; (8008d20 <MX_USB_DEVICE_Init+0x54>)
 8008d0a:	f7fc fafe 	bl	800530a <USBD_Start>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d14:	f7f7 fb7e 	bl	8000414 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d18:	bf00      	nop
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000130 	.word	0x20000130
 8008d20:	20001d30 	.word	0x20001d30
 8008d24:	20000018 	.word	0x20000018
 8008d28:	20000120 	.word	0x20000120

08008d2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d30:	2200      	movs	r2, #0
 8008d32:	4905      	ldr	r1, [pc, #20]	; (8008d48 <CDC_Init_FS+0x1c>)
 8008d34:	4805      	ldr	r0, [pc, #20]	; (8008d4c <CDC_Init_FS+0x20>)
 8008d36:	f7fc fa1f 	bl	8005178 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d3a:	4905      	ldr	r1, [pc, #20]	; (8008d50 <CDC_Init_FS+0x24>)
 8008d3c:	4803      	ldr	r0, [pc, #12]	; (8008d4c <CDC_Init_FS+0x20>)
 8008d3e:	f7fc fa34 	bl	80051aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	20002034 	.word	0x20002034
 8008d4c:	20001d30 	.word	0x20001d30
 8008d50:	20001ff4 	.word	0x20001ff4

08008d54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
	...

08008d64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
 8008d70:	4613      	mov	r3, r2
 8008d72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	2b23      	cmp	r3, #35	; 0x23
 8008d78:	d84a      	bhi.n	8008e10 <CDC_Control_FS+0xac>
 8008d7a:	a201      	add	r2, pc, #4	; (adr r2, 8008d80 <CDC_Control_FS+0x1c>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008e11 	.word	0x08008e11
 8008d84:	08008e11 	.word	0x08008e11
 8008d88:	08008e11 	.word	0x08008e11
 8008d8c:	08008e11 	.word	0x08008e11
 8008d90:	08008e11 	.word	0x08008e11
 8008d94:	08008e11 	.word	0x08008e11
 8008d98:	08008e11 	.word	0x08008e11
 8008d9c:	08008e11 	.word	0x08008e11
 8008da0:	08008e11 	.word	0x08008e11
 8008da4:	08008e11 	.word	0x08008e11
 8008da8:	08008e11 	.word	0x08008e11
 8008dac:	08008e11 	.word	0x08008e11
 8008db0:	08008e11 	.word	0x08008e11
 8008db4:	08008e11 	.word	0x08008e11
 8008db8:	08008e11 	.word	0x08008e11
 8008dbc:	08008e11 	.word	0x08008e11
 8008dc0:	08008e11 	.word	0x08008e11
 8008dc4:	08008e11 	.word	0x08008e11
 8008dc8:	08008e11 	.word	0x08008e11
 8008dcc:	08008e11 	.word	0x08008e11
 8008dd0:	08008e11 	.word	0x08008e11
 8008dd4:	08008e11 	.word	0x08008e11
 8008dd8:	08008e11 	.word	0x08008e11
 8008ddc:	08008e11 	.word	0x08008e11
 8008de0:	08008e11 	.word	0x08008e11
 8008de4:	08008e11 	.word	0x08008e11
 8008de8:	08008e11 	.word	0x08008e11
 8008dec:	08008e11 	.word	0x08008e11
 8008df0:	08008e11 	.word	0x08008e11
 8008df4:	08008e11 	.word	0x08008e11
 8008df8:	08008e11 	.word	0x08008e11
 8008dfc:	08008e11 	.word	0x08008e11
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e11 	.word	0x08008e11
 8008e08:	08008e11 	.word	0x08008e11
 8008e0c:	08008e11 	.word	0x08008e11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e10:	bf00      	nop
  }

  return (USBD_OK);
 8008e12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop

08008e20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e2a:	6879      	ldr	r1, [r7, #4]
 8008e2c:	4805      	ldr	r0, [pc, #20]	; (8008e44 <CDC_Receive_FS+0x24>)
 8008e2e:	f7fc f9bc 	bl	80051aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e32:	4804      	ldr	r0, [pc, #16]	; (8008e44 <CDC_Receive_FS+0x24>)
 8008e34:	f7fc f9fb 	bl	800522e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20001d30 	.word	0x20001d30

08008e48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e58:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <CDC_Transmit_FS+0x48>)
 8008e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d001      	beq.n	8008e6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e00b      	b.n	8008e86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e6e:	887b      	ldrh	r3, [r7, #2]
 8008e70:	461a      	mov	r2, r3
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	4806      	ldr	r0, [pc, #24]	; (8008e90 <CDC_Transmit_FS+0x48>)
 8008e76:	f7fc f97f 	bl	8005178 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e7a:	4805      	ldr	r0, [pc, #20]	; (8008e90 <CDC_Transmit_FS+0x48>)
 8008e7c:	f7fc f9a8 	bl	80051d0 <USBD_CDC_TransmitPacket>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	20001d30 	.word	0x20001d30

08008e94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	2212      	movs	r2, #18
 8008ea4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ea6:	4b03      	ldr	r3, [pc, #12]	; (8008eb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	2000014c 	.word	0x2000014c

08008eb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2204      	movs	r2, #4
 8008ec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008eca:	4b03      	ldr	r3, [pc, #12]	; (8008ed8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bc80      	pop	{r7}
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20000160 	.word	0x20000160

08008edc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee8:	79fb      	ldrb	r3, [r7, #7]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d105      	bne.n	8008efa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008eee:	683a      	ldr	r2, [r7, #0]
 8008ef0:	4907      	ldr	r1, [pc, #28]	; (8008f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ef2:	4808      	ldr	r0, [pc, #32]	; (8008f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ef4:	f7fd f975 	bl	80061e2 <USBD_GetString>
 8008ef8:	e004      	b.n	8008f04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008efa:	683a      	ldr	r2, [r7, #0]
 8008efc:	4904      	ldr	r1, [pc, #16]	; (8008f10 <USBD_FS_ProductStrDescriptor+0x34>)
 8008efe:	4805      	ldr	r0, [pc, #20]	; (8008f14 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f00:	f7fd f96f 	bl	80061e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f04:	4b02      	ldr	r3, [pc, #8]	; (8008f10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20002074 	.word	0x20002074
 8008f14:	080096e8 	.word	0x080096e8

08008f18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	6039      	str	r1, [r7, #0]
 8008f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	4904      	ldr	r1, [pc, #16]	; (8008f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f28:	4804      	ldr	r0, [pc, #16]	; (8008f3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f2a:	f7fd f95a 	bl	80061e2 <USBD_GetString>
  return USBD_StrDesc;
 8008f2e:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20002074 	.word	0x20002074
 8008f3c:	08009700 	.word	0x08009700

08008f40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	221a      	movs	r2, #26
 8008f50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f52:	f000 f843 	bl	8008fdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f56:	4b02      	ldr	r3, [pc, #8]	; (8008f60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20000164 	.word	0x20000164

08008f64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	6039      	str	r1, [r7, #0]
 8008f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f70:	79fb      	ldrb	r3, [r7, #7]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d105      	bne.n	8008f82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f76:	683a      	ldr	r2, [r7, #0]
 8008f78:	4907      	ldr	r1, [pc, #28]	; (8008f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f7a:	4808      	ldr	r0, [pc, #32]	; (8008f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f7c:	f7fd f931 	bl	80061e2 <USBD_GetString>
 8008f80:	e004      	b.n	8008f8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f82:	683a      	ldr	r2, [r7, #0]
 8008f84:	4904      	ldr	r1, [pc, #16]	; (8008f98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f86:	4805      	ldr	r0, [pc, #20]	; (8008f9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f88:	f7fd f92b 	bl	80061e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20002074 	.word	0x20002074
 8008f9c:	08009714 	.word	0x08009714

08008fa0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	6039      	str	r1, [r7, #0]
 8008faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	4907      	ldr	r1, [pc, #28]	; (8008fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fb6:	4808      	ldr	r0, [pc, #32]	; (8008fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fb8:	f7fd f913 	bl	80061e2 <USBD_GetString>
 8008fbc:	e004      	b.n	8008fc8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4904      	ldr	r1, [pc, #16]	; (8008fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fc2:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fc4:	f7fd f90d 	bl	80061e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fc8:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20002074 	.word	0x20002074
 8008fd8:	08009720 	.word	0x08009720

08008fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	; (8009020 <Get_SerialNum+0x44>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <Get_SerialNum+0x48>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fee:	4b0e      	ldr	r3, [pc, #56]	; (8009028 <Get_SerialNum+0x4c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d009      	beq.n	8009016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009002:	2208      	movs	r2, #8
 8009004:	4909      	ldr	r1, [pc, #36]	; (800902c <Get_SerialNum+0x50>)
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f000 f814 	bl	8009034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800900c:	2204      	movs	r2, #4
 800900e:	4908      	ldr	r1, [pc, #32]	; (8009030 <Get_SerialNum+0x54>)
 8009010:	68b8      	ldr	r0, [r7, #8]
 8009012:	f000 f80f 	bl	8009034 <IntToUnicode>
  }
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	1ffff7e8 	.word	0x1ffff7e8
 8009024:	1ffff7ec 	.word	0x1ffff7ec
 8009028:	1ffff7f0 	.word	0x1ffff7f0
 800902c:	20000166 	.word	0x20000166
 8009030:	20000176 	.word	0x20000176

08009034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	4613      	mov	r3, r2
 8009040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009046:	2300      	movs	r3, #0
 8009048:	75fb      	strb	r3, [r7, #23]
 800904a:	e027      	b.n	800909c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0f1b      	lsrs	r3, r3, #28
 8009050:	2b09      	cmp	r3, #9
 8009052:	d80b      	bhi.n	800906c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	0f1b      	lsrs	r3, r3, #28
 8009058:	b2da      	uxtb	r2, r3
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	005b      	lsls	r3, r3, #1
 800905e:	4619      	mov	r1, r3
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	440b      	add	r3, r1
 8009064:	3230      	adds	r2, #48	; 0x30
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	e00a      	b.n	8009082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	0f1b      	lsrs	r3, r3, #28
 8009070:	b2da      	uxtb	r2, r3
 8009072:	7dfb      	ldrb	r3, [r7, #23]
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	4619      	mov	r1, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	440b      	add	r3, r1
 800907c:	3237      	adds	r2, #55	; 0x37
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	3301      	adds	r3, #1
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	4413      	add	r3, r2
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009096:	7dfb      	ldrb	r3, [r7, #23]
 8009098:	3301      	adds	r3, #1
 800909a:	75fb      	strb	r3, [r7, #23]
 800909c:	7dfa      	ldrb	r2, [r7, #23]
 800909e:	79fb      	ldrb	r3, [r7, #7]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d3d3      	bcc.n	800904c <IntToUnicode+0x18>
  }
}
 80090a4:	bf00      	nop
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
	...

080090b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a0d      	ldr	r2, [pc, #52]	; (80090f4 <HAL_PCD_MspInit+0x44>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d113      	bne.n	80090ea <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80090c2:	4b0d      	ldr	r3, [pc, #52]	; (80090f8 <HAL_PCD_MspInit+0x48>)
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	4a0c      	ldr	r2, [pc, #48]	; (80090f8 <HAL_PCD_MspInit+0x48>)
 80090c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090cc:	61d3      	str	r3, [r2, #28]
 80090ce:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <HAL_PCD_MspInit+0x48>)
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80090da:	2200      	movs	r2, #0
 80090dc:	2105      	movs	r1, #5
 80090de:	2014      	movs	r0, #20
 80090e0:	f7f7 fb65 	bl	80007ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80090e4:	2014      	movs	r0, #20
 80090e6:	f7f7 fb7e 	bl	80007e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80090ea:	bf00      	nop
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	40005c00 	.word	0x40005c00
 80090f8:	40021000 	.word	0x40021000

080090fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f7fc f941 	bl	800539a <USBD_LL_SetupStage>
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009132:	78fa      	ldrb	r2, [r7, #3]
 8009134:	6879      	ldr	r1, [r7, #4]
 8009136:	4613      	mov	r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	440b      	add	r3, r1
 8009140:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	4619      	mov	r1, r3
 800914a:	f7fc f971 	bl	8005430 <USBD_LL_DataOutStage>
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	00db      	lsls	r3, r3, #3
 8009174:	440b      	add	r3, r1
 8009176:	333c      	adds	r3, #60	; 0x3c
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	4619      	mov	r1, r3
 800917e:	f7fc f9c8 	bl	8005512 <USBD_LL_DataInStage>
}
 8009182:	bf00      	nop
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009198:	4618      	mov	r0, r3
 800919a:	f7fc fad8 	bl	800574e <USBD_LL_SOF>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091ae:	2301      	movs	r3, #1
 80091b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d001      	beq.n	80091be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80091ba:	f7f7 f92b 	bl	8000414 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091c4:	7bfa      	ldrb	r2, [r7, #15]
 80091c6:	4611      	mov	r1, r2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fc fa88 	bl	80056de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fc fa41 	bl	800565c <USBD_LL_Reset>
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7fc fa82 	bl	80056fc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009200:	4b04      	ldr	r3, [pc, #16]	; (8009214 <HAL_PCD_SuspendCallback+0x30>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	4a03      	ldr	r2, [pc, #12]	; (8009214 <HAL_PCD_SuspendCallback+0x30>)
 8009206:	f043 0306 	orr.w	r3, r3, #6
 800920a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	e000ed00 	.word	0xe000ed00

08009218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009226:	4618      	mov	r0, r3
 8009228:	f7fc fa7c 	bl	8005724 <USBD_LL_Resume>
}
 800922c:	bf00      	nop
 800922e:	3708      	adds	r7, #8
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800923c:	4a28      	ldr	r2, [pc, #160]	; (80092e0 <USBD_LL_Init+0xac>)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a26      	ldr	r2, [pc, #152]	; (80092e0 <USBD_LL_Init+0xac>)
 8009248:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800924c:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <USBD_LL_Init+0xac>)
 800924e:	4a25      	ldr	r2, [pc, #148]	; (80092e4 <USBD_LL_Init+0xb0>)
 8009250:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009252:	4b23      	ldr	r3, [pc, #140]	; (80092e0 <USBD_LL_Init+0xac>)
 8009254:	2208      	movs	r2, #8
 8009256:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009258:	4b21      	ldr	r3, [pc, #132]	; (80092e0 <USBD_LL_Init+0xac>)
 800925a:	2202      	movs	r2, #2
 800925c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800925e:	4b20      	ldr	r3, [pc, #128]	; (80092e0 <USBD_LL_Init+0xac>)
 8009260:	2200      	movs	r2, #0
 8009262:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009264:	4b1e      	ldr	r3, [pc, #120]	; (80092e0 <USBD_LL_Init+0xac>)
 8009266:	2200      	movs	r2, #0
 8009268:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800926a:	4b1d      	ldr	r3, [pc, #116]	; (80092e0 <USBD_LL_Init+0xac>)
 800926c:	2200      	movs	r2, #0
 800926e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009270:	481b      	ldr	r0, [pc, #108]	; (80092e0 <USBD_LL_Init+0xac>)
 8009272:	f7f7 fc5e 	bl	8000b32 <HAL_PCD_Init>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800927c:	f7f7 f8ca 	bl	8000414 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009286:	2318      	movs	r3, #24
 8009288:	2200      	movs	r2, #0
 800928a:	2100      	movs	r1, #0
 800928c:	f7f8 ff92 	bl	80021b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009296:	2358      	movs	r3, #88	; 0x58
 8009298:	2200      	movs	r2, #0
 800929a:	2180      	movs	r1, #128	; 0x80
 800929c:	f7f8 ff8a 	bl	80021b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092a6:	23c0      	movs	r3, #192	; 0xc0
 80092a8:	2200      	movs	r2, #0
 80092aa:	2181      	movs	r1, #129	; 0x81
 80092ac:	f7f8 ff82 	bl	80021b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80092ba:	2200      	movs	r2, #0
 80092bc:	2101      	movs	r1, #1
 80092be:	f7f8 ff79 	bl	80021b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092cc:	2200      	movs	r2, #0
 80092ce:	2182      	movs	r1, #130	; 0x82
 80092d0:	f7f8 ff70 	bl	80021b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20002274 	.word	0x20002274
 80092e4:	40005c00 	.word	0x40005c00

080092e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092fe:	4618      	mov	r0, r3
 8009300:	f7f7 fd22 	bl	8000d48 <HAL_PCD_Start>
 8009304:	4603      	mov	r3, r0
 8009306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009308:	7bfb      	ldrb	r3, [r7, #15]
 800930a:	4618      	mov	r0, r3
 800930c:	f000 f94e 	bl	80095ac <USBD_Get_USB_Status>
 8009310:	4603      	mov	r3, r0
 8009312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009314:	7bbb      	ldrb	r3, [r7, #14]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b084      	sub	sp, #16
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
 8009326:	4608      	mov	r0, r1
 8009328:	4611      	mov	r1, r2
 800932a:	461a      	mov	r2, r3
 800932c:	4603      	mov	r3, r0
 800932e:	70fb      	strb	r3, [r7, #3]
 8009330:	460b      	mov	r3, r1
 8009332:	70bb      	strb	r3, [r7, #2]
 8009334:	4613      	mov	r3, r2
 8009336:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009346:	78bb      	ldrb	r3, [r7, #2]
 8009348:	883a      	ldrh	r2, [r7, #0]
 800934a:	78f9      	ldrb	r1, [r7, #3]
 800934c:	f7f7 fe9c 	bl	8001088 <HAL_PCD_EP_Open>
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009354:	7bfb      	ldrb	r3, [r7, #15]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f928 	bl	80095ac <USBD_Get_USB_Status>
 800935c:	4603      	mov	r3, r0
 800935e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009360:	7bbb      	ldrb	r3, [r7, #14]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	4611      	mov	r1, r2
 8009388:	4618      	mov	r0, r3
 800938a:	f7f7 fee3 	bl	8001154 <HAL_PCD_EP_Close>
 800938e:	4603      	mov	r3, r0
 8009390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009392:	7bfb      	ldrb	r3, [r7, #15]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f909 	bl	80095ac <USBD_Get_USB_Status>
 800939a:	4603      	mov	r3, r0
 800939c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800939e:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	460b      	mov	r3, r1
 80093b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f7 ffa3 	bl	8001312 <HAL_PCD_EP_SetStall>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f000 f8ea 	bl	80095ac <USBD_Get_USB_Status>
 80093d8:	4603      	mov	r3, r0
 80093da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	460b      	mov	r3, r1
 80093f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009400:	78fa      	ldrb	r2, [r7, #3]
 8009402:	4611      	mov	r1, r2
 8009404:	4618      	mov	r0, r3
 8009406:	f7f7 ffe4 	bl	80013d2 <HAL_PCD_EP_ClrStall>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	4618      	mov	r0, r3
 8009412:	f000 f8cb 	bl	80095ac <USBD_Get_USB_Status>
 8009416:	4603      	mov	r3, r0
 8009418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800941a:	7bbb      	ldrb	r3, [r7, #14]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3710      	adds	r7, #16
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009436:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800943c:	2b00      	cmp	r3, #0
 800943e:	da0c      	bge.n	800945a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	4613      	mov	r3, r2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	00db      	lsls	r3, r3, #3
 8009452:	440b      	add	r3, r1
 8009454:	3302      	adds	r3, #2
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	e00b      	b.n	8009472 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800945a:	78fb      	ldrb	r3, [r7, #3]
 800945c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009460:	68f9      	ldr	r1, [r7, #12]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	00db      	lsls	r3, r3, #3
 800946a:	440b      	add	r3, r1
 800946c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009470:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr

0800947c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f7f7 fdcf 	bl	800103e <HAL_PCD_SetAddress>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f880 	bl	80095ac <USBD_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b086      	sub	sp, #24
 80094be:	af00      	add	r7, sp, #0
 80094c0:	60f8      	str	r0, [r7, #12]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	461a      	mov	r2, r3
 80094c6:	460b      	mov	r3, r1
 80094c8:	72fb      	strb	r3, [r7, #11]
 80094ca:	4613      	mov	r3, r2
 80094cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094dc:	893b      	ldrh	r3, [r7, #8]
 80094de:	7af9      	ldrb	r1, [r7, #11]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	f7f7 fed3 	bl	800128c <HAL_PCD_EP_Transmit>
 80094e6:	4603      	mov	r3, r0
 80094e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ea:	7dfb      	ldrb	r3, [r7, #23]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 f85d 	bl	80095ac <USBD_Get_USB_Status>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80094f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3718      	adds	r7, #24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	607a      	str	r2, [r7, #4]
 800950a:	461a      	mov	r2, r3
 800950c:	460b      	mov	r3, r1
 800950e:	72fb      	strb	r3, [r7, #11]
 8009510:	4613      	mov	r3, r2
 8009512:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009522:	893b      	ldrh	r3, [r7, #8]
 8009524:	7af9      	ldrb	r1, [r7, #11]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	f7f7 fe5c 	bl	80011e4 <HAL_PCD_EP_Receive>
 800952c:	4603      	mov	r3, r0
 800952e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f83a 	bl	80095ac <USBD_Get_USB_Status>
 8009538:	4603      	mov	r3, r0
 800953a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800953c:	7dbb      	ldrb	r3, [r7, #22]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3718      	adds	r7, #24
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	460b      	mov	r3, r1
 8009550:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f7f7 fe7e 	bl	800125e <HAL_PCD_EP_GetRxCount>
 8009562:	4603      	mov	r3, r0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009574:	4b02      	ldr	r3, [pc, #8]	; (8009580 <USBD_static_malloc+0x14>)
}
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr
 8009580:	20001aa8 	.word	0x20001aa8

08009584 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]

}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095a2:	bf00      	nop
 80095a4:	370c      	adds	r7, #12
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bc80      	pop	{r7}
 80095aa:	4770      	bx	lr

080095ac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095b6:	2300      	movs	r3, #0
 80095b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b03      	cmp	r3, #3
 80095be:	d817      	bhi.n	80095f0 <USBD_Get_USB_Status+0x44>
 80095c0:	a201      	add	r2, pc, #4	; (adr r2, 80095c8 <USBD_Get_USB_Status+0x1c>)
 80095c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c6:	bf00      	nop
 80095c8:	080095d9 	.word	0x080095d9
 80095cc:	080095df 	.word	0x080095df
 80095d0:	080095e5 	.word	0x080095e5
 80095d4:	080095eb 	.word	0x080095eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
    break;
 80095dc:	e00b      	b.n	80095f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095de:	2302      	movs	r3, #2
 80095e0:	73fb      	strb	r3, [r7, #15]
    break;
 80095e2:	e008      	b.n	80095f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095e4:	2301      	movs	r3, #1
 80095e6:	73fb      	strb	r3, [r7, #15]
    break;
 80095e8:	e005      	b.n	80095f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80095ea:	2302      	movs	r3, #2
 80095ec:	73fb      	strb	r3, [r7, #15]
    break;
 80095ee:	e002      	b.n	80095f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80095f0:	2302      	movs	r3, #2
 80095f2:	73fb      	strb	r3, [r7, #15]
    break;
 80095f4:	bf00      	nop
  }
  return usb_status;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bc80      	pop	{r7}
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop

08009604 <__libc_init_array>:
 8009604:	b570      	push	{r4, r5, r6, lr}
 8009606:	2500      	movs	r5, #0
 8009608:	4e0c      	ldr	r6, [pc, #48]	; (800963c <__libc_init_array+0x38>)
 800960a:	4c0d      	ldr	r4, [pc, #52]	; (8009640 <__libc_init_array+0x3c>)
 800960c:	1ba4      	subs	r4, r4, r6
 800960e:	10a4      	asrs	r4, r4, #2
 8009610:	42a5      	cmp	r5, r4
 8009612:	d109      	bne.n	8009628 <__libc_init_array+0x24>
 8009614:	f000 f82e 	bl	8009674 <_init>
 8009618:	2500      	movs	r5, #0
 800961a:	4e0a      	ldr	r6, [pc, #40]	; (8009644 <__libc_init_array+0x40>)
 800961c:	4c0a      	ldr	r4, [pc, #40]	; (8009648 <__libc_init_array+0x44>)
 800961e:	1ba4      	subs	r4, r4, r6
 8009620:	10a4      	asrs	r4, r4, #2
 8009622:	42a5      	cmp	r5, r4
 8009624:	d105      	bne.n	8009632 <__libc_init_array+0x2e>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800962c:	4798      	blx	r3
 800962e:	3501      	adds	r5, #1
 8009630:	e7ee      	b.n	8009610 <__libc_init_array+0xc>
 8009632:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009636:	4798      	blx	r3
 8009638:	3501      	adds	r5, #1
 800963a:	e7f2      	b.n	8009622 <__libc_init_array+0x1e>
 800963c:	08009764 	.word	0x08009764
 8009640:	08009764 	.word	0x08009764
 8009644:	08009764 	.word	0x08009764
 8009648:	08009768 	.word	0x08009768

0800964c <memcpy>:
 800964c:	b510      	push	{r4, lr}
 800964e:	1e43      	subs	r3, r0, #1
 8009650:	440a      	add	r2, r1
 8009652:	4291      	cmp	r1, r2
 8009654:	d100      	bne.n	8009658 <memcpy+0xc>
 8009656:	bd10      	pop	{r4, pc}
 8009658:	f811 4b01 	ldrb.w	r4, [r1], #1
 800965c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009660:	e7f7      	b.n	8009652 <memcpy+0x6>

08009662 <memset>:
 8009662:	4603      	mov	r3, r0
 8009664:	4402      	add	r2, r0
 8009666:	4293      	cmp	r3, r2
 8009668:	d100      	bne.n	800966c <memset+0xa>
 800966a:	4770      	bx	lr
 800966c:	f803 1b01 	strb.w	r1, [r3], #1
 8009670:	e7f9      	b.n	8009666 <memset+0x4>
	...

08009674 <_init>:
 8009674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009676:	bf00      	nop
 8009678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967a:	bc08      	pop	{r3}
 800967c:	469e      	mov	lr, r3
 800967e:	4770      	bx	lr

08009680 <_fini>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr
