
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097f8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08009908  08009908  00019908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a98  08009a98  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009a98  08009a98  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a98  08009a98  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a98  08009a98  00019a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a9c  08009a9c  00019a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000385c  20000180  08009c20  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039dc  08009c20  000239dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3eb  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004085  00000000  00000000  0003e594  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001260  00000000  00000000  00042620  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  00043880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ba98  00000000  00000000  000448f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d7b  00000000  00000000  00060390  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e5c6  00000000  00000000  0007410b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001026d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  0010274c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	080098f0 	.word	0x080098f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	080098f0 	.word	0x080098f0

08000150 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <PCB_Init+0x14>)
 800015c:	f000 fd0a 	bl	8000b74 <HAL_GPIO_WritePin>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40011000 	.word	0x40011000

08000168 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <PCB_LED_Toggle+0x14>)
 8000172:	f000 fd17 	bl	8000ba4 <HAL_GPIO_TogglePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <freeRTOS_Tasks_Ini>:


// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2004      	movs	r0, #4
 800018c:	f006 fc52 	bl	8006a34 <xQueueGenericCreate>
 8000190:	4602      	mov	r2, r0
 8000192:	4b1e      	ldr	r3, [pc, #120]	; (800020c <freeRTOS_Tasks_Ini+0x8c>)
 8000194:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	491b      	ldr	r1, [pc, #108]	; (8000210 <freeRTOS_Tasks_Ini+0x90>)
 80001a4:	481b      	ldr	r0, [pc, #108]	; (8000214 <freeRTOS_Tasks_Ini+0x94>)
 80001a6:	f007 f8d4 	bl	8007352 <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения
	xTaskCreate(vTask_Sync_Recieve_VCP, "Task_Sync_Recieve_VCP", 120, NULL, 2, NULL);
 80001aa:	2300      	movs	r3, #0
 80001ac:	9301      	str	r3, [sp, #4]
 80001ae:	2302      	movs	r3, #2
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2300      	movs	r3, #0
 80001b4:	2278      	movs	r2, #120	; 0x78
 80001b6:	4918      	ldr	r1, [pc, #96]	; (8000218 <freeRTOS_Tasks_Ini+0x98>)
 80001b8:	4818      	ldr	r0, [pc, #96]	; (800021c <freeRTOS_Tasks_Ini+0x9c>)
 80001ba:	f007 f8ca 	bl	8007352 <xTaskCreate>

	Delay_LED = 500;
 80001be:	4b18      	ldr	r3, [pc, #96]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c4:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001c8:	4a15      	ldr	r2, [pc, #84]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001ca:	601a      	str	r2, [r3, #0]


	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <freeRTOS_Tasks_Ini+0x8c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d015      	beq.n	8000200 <freeRTOS_Tasks_Ini+0x80>
	{
		//xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 90, NULL, 1, NULL); // З-а отправки данных в очередь
		//xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 90, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.

		if (xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL) == errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY) // З-а мигания LED
 80001d4:	4b13      	ldr	r3, [pc, #76]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	2300      	movs	r3, #0
 80001da:	9301      	str	r3, [sp, #4]
 80001dc:	2301      	movs	r3, #1
 80001de:	9300      	str	r3, [sp, #0]
 80001e0:	4613      	mov	r3, r2
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	4910      	ldr	r1, [pc, #64]	; (8000228 <freeRTOS_Tasks_Ini+0xa8>)
 80001e6:	4811      	ldr	r0, [pc, #68]	; (800022c <freeRTOS_Tasks_Ini+0xac>)
 80001e8:	f007 f8b3 	bl	8007352 <xTaskCreate>
 80001ec:	4603      	mov	r3, r0
 80001ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f2:	d105      	bne.n	8000200 <freeRTOS_Tasks_Ini+0x80>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fa:	480d      	ldr	r0, [pc, #52]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001fc:	f000 fcba 	bl	8000b74 <HAL_GPIO_WritePin>
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.

	}

	osKernelStart();
 8000200:	f006 f950 	bl	80064a4 <osKernelStart>

}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	2000311c 	.word	0x2000311c
 8000210:	08009918 	.word	0x08009918
 8000214:	0800027d 	.word	0x0800027d
 8000218:	08009928 	.word	0x08009928
 800021c:	08000235 	.word	0x08000235
 8000220:	20003160 	.word	0x20003160
 8000224:	20003118 	.word	0x20003118
 8000228:	08009940 	.word	0x08009940
 800022c:	080002dd 	.word	0x080002dd
 8000230:	40011000 	.word	0x40011000

08000234 <vTask_Sync_Recieve_VCP>:

void vTask_Sync_Recieve_VCP(void *pvParameters)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 800023c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000240:	f007 fa3a 	bl	80076b8 <vTaskDelay>

		(CDC_Transmit_FS((unsigned char*)"Data received from VCP = ", strlen("Data received from VCP = ")));
 8000244:	2119      	movs	r1, #25
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <vTask_Sync_Recieve_VCP+0x3c>)
 8000248:	f008 ff28 	bl	800909c <CDC_Transmit_FS>
		vTaskDelay(50 / portTICK_RATE_MS );
 800024c:	2032      	movs	r0, #50	; 0x32
 800024e:	f007 fa33 	bl	80076b8 <vTaskDelay>
		(CDC_Transmit_FS((unsigned char*) &VCP_Rx_Buf, 10));
 8000252:	210a      	movs	r1, #10
 8000254:	4807      	ldr	r0, [pc, #28]	; (8000274 <vTask_Sync_Recieve_VCP+0x40>)
 8000256:	f008 ff21 	bl	800909c <CDC_Transmit_FS>
		vTaskDelay(50 / portTICK_RATE_MS );
 800025a:	2032      	movs	r0, #50	; 0x32
 800025c:	f007 fa2c 	bl	80076b8 <vTaskDelay>
		(CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 8000260:	2102      	movs	r1, #2
 8000262:	4805      	ldr	r0, [pc, #20]	; (8000278 <vTask_Sync_Recieve_VCP+0x44>)
 8000264:	f008 ff1a 	bl	800909c <CDC_Transmit_FS>
		vTaskDelay(50 / portTICK_RATE_MS );
 8000268:	2032      	movs	r0, #50	; 0x32
 800026a:	f007 fa25 	bl	80076b8 <vTaskDelay>
		vTaskDelay(1000 / portTICK_RATE_MS );
 800026e:	e7e5      	b.n	800023c <vTask_Sync_Recieve_VCP+0x8>
 8000270:	08009954 	.word	0x08009954
 8000274:	20003120 	.word	0x20003120
 8000278:	08009970 	.word	0x08009970

0800027c <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000284:	f107 0308 	add.w	r3, r7, #8
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000296:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	2301      	movs	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a0:	2302      	movs	r3, #2
 80002a2:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a4:	f107 0308 	add.w	r3, r7, #8
 80002a8:	4619      	mov	r1, r3
 80002aa:	480b      	ldr	r0, [pc, #44]	; (80002d8 <vTask_USB_Init+0x5c>)
 80002ac:	f000 fb08 	bl	80008c0 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <vTask_USB_Init+0x5c>)
 80002b8:	f000 fc5c 	bl	8000b74 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 80002bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002c0:	f007 f9fa 	bl	80076b8 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 80002c4:	f008 fe22 	bl	8008f0c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 80002c8:	2000      	movs	r0, #0
 80002ca:	f007 f983 	bl	80075d4 <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 80002ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d2:	f007 f9f1 	bl	80076b8 <vTaskDelay>
 80002d6:	e7fa      	b.n	80002ce <vTask_USB_Init+0x52>
 80002d8:	40010800 	.word	0x40010800

080002dc <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 80002e8:	f7ff ff3e 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f007 f9e1 	bl	80076b8 <vTaskDelay>
	PCB_LED_Toggle();
 80002f6:	f7ff ff37 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f007 f9da 	bl	80076b8 <vTaskDelay>
	PCB_LED_Toggle();
 8000304:	e7f0      	b.n	80002e8 <vTask_PCB_LED_Blink+0xc>

08000306 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr

08000312 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
return 0;
 8000316:	2300      	movs	r3, #0
}
 8000318:	4618      	mov	r0, r3
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 f95c 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f818 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 f870 	bl	8000410 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000330:	f006 f886 	bl	8006440 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000334:	4a06      	ldr	r2, [pc, #24]	; (8000350 <main+0x30>)
 8000336:	2100      	movs	r1, #0
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <main+0x34>)
 800033a:	f006 f8e7 	bl	800650c <osThreadNew>
 800033e:	4602      	mov	r2, r0
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <main+0x38>)
 8000342:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 8000344:	f7ff ff04 	bl	8000150 <PCB_Init>
  freeRTOS_Tasks_Ini();
 8000348:	f7ff ff1a 	bl	8000180 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800034c:	e7fe      	b.n	800034c <main+0x2c>
 800034e:	bf00      	nop
 8000350:	08009a64 	.word	0x08009a64
 8000354:	080004a9 	.word	0x080004a9
 8000358:	20003164 	.word	0x20003164

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b094      	sub	sp, #80	; 0x50
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000366:	2228      	movs	r2, #40	; 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f009 faa3 	bl	80098b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800038c:	2301      	movs	r3, #1
 800038e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039a:	2301      	movs	r3, #1
 800039c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003b2:	4618      	mov	r0, r3
 80003b4:	f001 ff92 	bl	80022dc <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003be:	f000 f87b 	bl	80004b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d8:	f107 0314 	add.w	r3, r7, #20
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f002 f9fc 	bl	80027dc <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ea:	f000 f865 	bl	80004b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003ee:	2310      	movs	r3, #16
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 fb59 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000404:	f000 f858 	bl	80004b8 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3750      	adds	r7, #80	; 0x50
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <MX_GPIO_Init+0x90>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1d      	ldr	r2, [pc, #116]	; (80004a0 <MX_GPIO_Init+0x90>)
 800042a:	f043 0310 	orr.w	r3, r3, #16
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <MX_GPIO_Init+0x90>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0310 	and.w	r3, r3, #16
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <MX_GPIO_Init+0x90>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <MX_GPIO_Init+0x90>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <MX_GPIO_Init+0x90>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <MX_GPIO_Init+0x90>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <MX_GPIO_Init+0x90>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <MX_GPIO_Init+0x90>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000472:	480c      	ldr	r0, [pc, #48]	; (80004a4 <MX_GPIO_Init+0x94>)
 8000474:	f000 fb7e 	bl	8000b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_GPIO_Init+0x94>)
 8000492:	f000 fa15 	bl	80008c0 <HAL_GPIO_Init>

}
 8000496:	bf00      	nop
 8000498:	3720      	adds	r7, #32
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40011000 	.word	0x40011000

080004a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 80004b0:	2001      	movs	r0, #1
 80004b2:	f006 f8d5 	bl	8006660 <osDelay>
 80004b6:	e7fb      	b.n	80004b0 <StartDefaultTask+0x8>

080004b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004be:	e7fe      	b.n	80004be <Error_Handler+0x6>

080004c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c6:	4b18      	ldr	r3, [pc, #96]	; (8000528 <HAL_MspInit+0x68>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	4a17      	ldr	r2, [pc, #92]	; (8000528 <HAL_MspInit+0x68>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6193      	str	r3, [r2, #24]
 80004d2:	4b15      	ldr	r3, [pc, #84]	; (8000528 <HAL_MspInit+0x68>)
 80004d4:	699b      	ldr	r3, [r3, #24]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004de:	4b12      	ldr	r3, [pc, #72]	; (8000528 <HAL_MspInit+0x68>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	4a11      	ldr	r2, [pc, #68]	; (8000528 <HAL_MspInit+0x68>)
 80004e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e8:	61d3      	str	r3, [r2, #28]
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x68>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	210f      	movs	r1, #15
 80004fa:	f06f 0001 	mvn.w	r0, #1
 80004fe:	f000 f9a8 	bl	8000852 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <HAL_MspInit+0x6c>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <HAL_MspInit+0x6c>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40010000 	.word	0x40010000

08000530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000534:	e7fe      	b.n	8000534 <NMI_Handler+0x4>

08000536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000536:	b480      	push	{r7}
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053a:	e7fe      	b.n	800053a <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	e7fe      	b.n	8000540 <MemManage_Handler+0x4>

08000542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000542:	b480      	push	{r7}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000546:	e7fe      	b.n	8000546 <BusFault_Handler+0x4>

08000548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800054c:	e7fe      	b.n	800054c <UsageFault_Handler+0x4>

0800054e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055e:	f000 f885 	bl	800066c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000562:	f007 fd39 	bl	8007fd8 <xTaskGetSchedulerState>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d001      	beq.n	8000570 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800056c:	f008 fa7c 	bl	8008a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800057a:	f000 fc5d 	bl	8000e38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200036f0 	.word	0x200036f0

08000588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000594:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000596:	e003      	b.n	80005a0 <LoopCopyDataInit>

08000598 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800059a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800059c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800059e:	3104      	adds	r1, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005a0:	480a      	ldr	r0, [pc, #40]	; (80005cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005a8:	d3f6      	bcc.n	8000598 <CopyDataInit>
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005ac:	e002      	b.n	80005b4 <LoopFillZerobss>

080005ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005b0:	f842 3b04 	str.w	r3, [r2], #4

080005b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005b8:	d3f9      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ba:	f7ff ffe5 	bl	8000588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005be:	f009 f94b 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff fead 	bl	8000320 <main>
  bx lr
 80005c6:	4770      	bx	lr
  ldr r3, =_sidata
 80005c8:	08009aa0 	.word	0x08009aa0
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80005d0:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 80005d4:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 80005d8:	200039dc 	.word	0x200039dc

080005dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_2_IRQHandler>
	...

080005e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <HAL_Init+0x28>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <HAL_Init+0x28>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f923 	bl	800083c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005f6:	200f      	movs	r0, #15
 80005f8:	f000 f808 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005fc:	f7ff ff60 	bl	80004c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40022000 	.word	0x40022000

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f93b 	bl	80008a6 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 f903 	bl	8000852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000000 	.word	0x20000000
 8000664:	20000008 	.word	0x20000008
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_IncTick+0x1c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x20>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <HAL_IncTick+0x20>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr
 8000688:	20000008 	.word	0x20000008
 800068c:	20003168 	.word	0x20003168

08000690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b02      	ldr	r3, [pc, #8]	; (80006a0 <HAL_GetTick+0x10>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	20003168 	.word	0x20003168

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bc80      	pop	{r7}
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	db0b      	blt.n	8000732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	f003 021f 	and.w	r2, r3, #31
 8000720:	4906      	ldr	r1, [pc, #24]	; (800073c <__NVIC_EnableIRQ+0x34>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	095b      	lsrs	r3, r3, #5
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	e000e100 	.word	0xe000e100

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	; (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	; 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	; 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3b01      	subs	r3, #1
 8000804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000808:	d301      	bcc.n	800080e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080a:	2301      	movs	r3, #1
 800080c:	e00f      	b.n	800082e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <SysTick_Config+0x40>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000816:	210f      	movs	r1, #15
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f7ff ff90 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <SysTick_Config+0x40>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <SysTick_Config+0x40>)
 8000828:	2207      	movs	r2, #7
 800082a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff ff2d 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000864:	f7ff ff42 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	6978      	ldr	r0, [r7, #20]
 8000870:	f7ff ff90 	bl	8000794 <NVIC_EncodePriority>
 8000874:	4602      	mov	r2, r0
 8000876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087a:	4611      	mov	r1, r2
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff5f 	bl	8000740 <__NVIC_SetPriority>
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b082      	sub	sp, #8
 800088e:	af00      	add	r7, sp, #0
 8000890:	4603      	mov	r3, r0
 8000892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff35 	bl	8000708 <__NVIC_EnableIRQ>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff ffa2 	bl	80007f8 <SysTick_Config>
 80008b4:	4603      	mov	r3, r0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b08b      	sub	sp, #44	; 0x2c
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008d2:	e127      	b.n	8000b24 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008d4:	2201      	movs	r2, #1
 80008d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f040 8116 	bne.w	8000b1e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d034      	beq.n	8000964 <HAL_GPIO_Init+0xa4>
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d80d      	bhi.n	800091a <HAL_GPIO_Init+0x5a>
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d02b      	beq.n	800095a <HAL_GPIO_Init+0x9a>
 8000902:	2b02      	cmp	r3, #2
 8000904:	d804      	bhi.n	8000910 <HAL_GPIO_Init+0x50>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d031      	beq.n	800096e <HAL_GPIO_Init+0xae>
 800090a:	2b01      	cmp	r3, #1
 800090c:	d01c      	beq.n	8000948 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800090e:	e048      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000910:	2b03      	cmp	r3, #3
 8000912:	d043      	beq.n	800099c <HAL_GPIO_Init+0xdc>
 8000914:	2b11      	cmp	r3, #17
 8000916:	d01b      	beq.n	8000950 <HAL_GPIO_Init+0x90>
          break;
 8000918:	e043      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800091a:	4a89      	ldr	r2, [pc, #548]	; (8000b40 <HAL_GPIO_Init+0x280>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d026      	beq.n	800096e <HAL_GPIO_Init+0xae>
 8000920:	4a87      	ldr	r2, [pc, #540]	; (8000b40 <HAL_GPIO_Init+0x280>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d806      	bhi.n	8000934 <HAL_GPIO_Init+0x74>
 8000926:	4a87      	ldr	r2, [pc, #540]	; (8000b44 <HAL_GPIO_Init+0x284>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d020      	beq.n	800096e <HAL_GPIO_Init+0xae>
 800092c:	4a86      	ldr	r2, [pc, #536]	; (8000b48 <HAL_GPIO_Init+0x288>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d01d      	beq.n	800096e <HAL_GPIO_Init+0xae>
          break;
 8000932:	e036      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000934:	4a85      	ldr	r2, [pc, #532]	; (8000b4c <HAL_GPIO_Init+0x28c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d019      	beq.n	800096e <HAL_GPIO_Init+0xae>
 800093a:	4a85      	ldr	r2, [pc, #532]	; (8000b50 <HAL_GPIO_Init+0x290>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d016      	beq.n	800096e <HAL_GPIO_Init+0xae>
 8000940:	4a84      	ldr	r2, [pc, #528]	; (8000b54 <HAL_GPIO_Init+0x294>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d013      	beq.n	800096e <HAL_GPIO_Init+0xae>
          break;
 8000946:	e02c      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e028      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	3304      	adds	r3, #4
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e023      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	68db      	ldr	r3, [r3, #12]
 800095e:	3308      	adds	r3, #8
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e01e      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	330c      	adds	r3, #12
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e019      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d102      	bne.n	800097c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000976:	2304      	movs	r3, #4
 8000978:	623b      	str	r3, [r7, #32]
          break;
 800097a:	e012      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d105      	bne.n	8000990 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000984:	2308      	movs	r3, #8
 8000986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	611a      	str	r2, [r3, #16]
          break;
 800098e:	e008      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000990:	2308      	movs	r3, #8
 8000992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	615a      	str	r2, [r3, #20]
          break;
 800099a:	e002      	b.n	80009a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	2bff      	cmp	r3, #255	; 0xff
 80009a6:	d801      	bhi.n	80009ac <HAL_GPIO_Init+0xec>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	e001      	b.n	80009b0 <HAL_GPIO_Init+0xf0>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3304      	adds	r3, #4
 80009b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	2bff      	cmp	r3, #255	; 0xff
 80009b6:	d802      	bhi.n	80009be <HAL_GPIO_Init+0xfe>
 80009b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	e002      	b.n	80009c4 <HAL_GPIO_Init+0x104>
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	3b08      	subs	r3, #8
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	210f      	movs	r1, #15
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	fa01 f303 	lsl.w	r3, r1, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	401a      	ands	r2, r3
 80009d6:	6a39      	ldr	r1, [r7, #32]
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	431a      	orrs	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f000 8096 	beq.w	8000b1e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009f2:	4b59      	ldr	r3, [pc, #356]	; (8000b58 <HAL_GPIO_Init+0x298>)
 80009f4:	699b      	ldr	r3, [r3, #24]
 80009f6:	4a58      	ldr	r2, [pc, #352]	; (8000b58 <HAL_GPIO_Init+0x298>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6193      	str	r3, [r2, #24]
 80009fe:	4b56      	ldr	r3, [pc, #344]	; (8000b58 <HAL_GPIO_Init+0x298>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a0a:	4a54      	ldr	r2, [pc, #336]	; (8000b5c <HAL_GPIO_Init+0x29c>)
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	220f      	movs	r2, #15
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	43db      	mvns	r3, r3
 8000a28:	68fa      	ldr	r2, [r7, #12]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <HAL_GPIO_Init+0x2a0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0x19e>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4a      	ldr	r2, [pc, #296]	; (8000b64 <HAL_GPIO_Init+0x2a4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d00d      	beq.n	8000a5a <HAL_GPIO_Init+0x19a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a49      	ldr	r2, [pc, #292]	; (8000b68 <HAL_GPIO_Init+0x2a8>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d007      	beq.n	8000a56 <HAL_GPIO_Init+0x196>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a48      	ldr	r2, [pc, #288]	; (8000b6c <HAL_GPIO_Init+0x2ac>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d101      	bne.n	8000a52 <HAL_GPIO_Init+0x192>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x1a0>
 8000a52:	2304      	movs	r3, #4
 8000a54:	e004      	b.n	8000a60 <HAL_GPIO_Init+0x1a0>
 8000a56:	2302      	movs	r3, #2
 8000a58:	e002      	b.n	8000a60 <HAL_GPIO_Init+0x1a0>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <HAL_GPIO_Init+0x1a0>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a62:	f002 0203 	and.w	r2, r2, #3
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	4093      	lsls	r3, r2
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a70:	493a      	ldr	r1, [pc, #232]	; (8000b5c <HAL_GPIO_Init+0x29c>)
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	68fa      	ldr	r2, [r7, #12]
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4938      	ldr	r1, [pc, #224]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	600b      	str	r3, [r1, #0]
 8000a96:	e006      	b.n	8000aa6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	4933      	ldr	r1, [pc, #204]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	492e      	ldr	r1, [pc, #184]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	604b      	str	r3, [r1, #4]
 8000abe:	e006      	b.n	8000ace <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	4929      	ldr	r1, [pc, #164]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000aca:	4013      	ands	r3, r2
 8000acc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d006      	beq.n	8000ae8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	4924      	ldr	r1, [pc, #144]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	608b      	str	r3, [r1, #8]
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	491f      	ldr	r1, [pc, #124]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d006      	beq.n	8000b10 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	491a      	ldr	r1, [pc, #104]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	60cb      	str	r3, [r1, #12]
 8000b0e:	e006      	b.n	8000b1e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b10:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000b12:	68da      	ldr	r2, [r3, #12]
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	4915      	ldr	r1, [pc, #84]	; (8000b70 <HAL_GPIO_Init+0x2b0>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	3301      	adds	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	f47f aed0 	bne.w	80008d4 <HAL_GPIO_Init+0x14>
  }
}
 8000b34:	bf00      	nop
 8000b36:	372c      	adds	r7, #44	; 0x2c
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	10210000 	.word	0x10210000
 8000b44:	10110000 	.word	0x10110000
 8000b48:	10120000 	.word	0x10120000
 8000b4c:	10310000 	.word	0x10310000
 8000b50:	10320000 	.word	0x10320000
 8000b54:	10220000 	.word	0x10220000
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010000 	.word	0x40010000
 8000b60:	40010800 	.word	0x40010800
 8000b64:	40010c00 	.word	0x40010c00
 8000b68:	40011000 	.word	0x40011000
 8000b6c:	40011400 	.word	0x40011400
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	807b      	strh	r3, [r7, #2]
 8000b80:	4613      	mov	r3, r2
 8000b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b84:	787b      	ldrb	r3, [r7, #1]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b90:	e003      	b.n	8000b9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b92:	887b      	ldrh	r3, [r7, #2]
 8000b94:	041a      	lsls	r2, r3, #16
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	611a      	str	r2, [r3, #16]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	460b      	mov	r3, r1
 8000bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	43d9      	mvns	r1, r3
 8000bc2:	887b      	ldrh	r3, [r7, #2]
 8000bc4:	400b      	ands	r3, r1
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	611a      	str	r2, [r3, #16]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd8:	b08b      	sub	sp, #44	; 0x2c
 8000bda:	af06      	add	r7, sp, #24
 8000bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e0fd      	b.n	8000de4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d106      	bne.n	8000c02 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f008 fb81 	bl	8009304 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2203      	movs	r2, #3
 8000c06:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 f82a 	bl	8002c68 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	687e      	ldr	r6, [r7, #4]
 8000c1c:	466d      	mov	r5, sp
 8000c1e:	f106 0410 	add.w	r4, r6, #16
 8000c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	602b      	str	r3, [r5, #0]
 8000c2a:	1d33      	adds	r3, r6, #4
 8000c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c2e:	6838      	ldr	r0, [r7, #0]
 8000c30:	f001 fff4 	bl	8002c1c <USB_CoreInit>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d005      	beq.n	8000c46 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2202      	movs	r2, #2
 8000c3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e0ce      	b.n	8000de4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 f825 	bl	8002c9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e04c      	b.n	8000cf2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	4613      	mov	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3301      	adds	r3, #1
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	4613      	mov	r3, r2
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	4413      	add	r3, r2
 8000c7a:	00db      	lsls	r3, r3, #3
 8000c7c:	440b      	add	r3, r1
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c82:	7bfa      	ldrb	r2, [r7, #15]
 8000c84:	7bfb      	ldrb	r3, [r7, #15]
 8000c86:	b298      	uxth	r0, r3
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3336      	adds	r3, #54	; 0x36
 8000c96:	4602      	mov	r2, r0
 8000c98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	440b      	add	r3, r1
 8000caa:	3303      	adds	r3, #3
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cb0:	7bfa      	ldrb	r2, [r7, #15]
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3338      	adds	r3, #56	; 0x38
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	440b      	add	r3, r1
 8000cd2:	333c      	adds	r3, #60	; 0x3c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cd8:	7bfa      	ldrb	r2, [r7, #15]
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3340      	adds	r3, #64	; 0x40
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
 8000cf2:	7bfa      	ldrb	r2, [r7, #15]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d3ad      	bcc.n	8000c58 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e044      	b.n	8000d8c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d02:	7bfa      	ldrb	r2, [r7, #15]
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d18:	7bfa      	ldrb	r2, [r7, #15]
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	440b      	add	r3, r1
 8000d26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d2a:	7bfa      	ldrb	r2, [r7, #15]
 8000d2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d2e:	7bfa      	ldrb	r2, [r7, #15]
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d70:	7bfa      	ldrb	r2, [r7, #15]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	7bfa      	ldrb	r2, [r7, #15]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3b5      	bcc.n	8000d02 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	687e      	ldr	r6, [r7, #4]
 8000d9e:	466d      	mov	r5, sp
 8000da0:	f106 0410 	add.w	r4, r6, #16
 8000da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	1d33      	adds	r3, r6, #4
 8000dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000db0:	6838      	ldr	r0, [r7, #0]
 8000db2:	f001 ff7f 	bl	8002cb4 <USB_DevInit>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e00d      	b.n	8000de4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 ff19 	bl	8004c14 <USB_DevDisconnect>

  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d101      	bne.n	8000e02 <HAL_PCD_Start+0x16>
 8000dfe:	2302      	movs	r3, #2
 8000e00:	e016      	b.n	8000e30 <HAL_PCD_Start+0x44>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 ff14 	bl	8002c3c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e14:	2101      	movs	r1, #1
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f008 fce7 	bl	80097ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f003 feed 	bl	8004c00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 feef 	bl	8004c28 <USB_ReadInterrupts>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e54:	d102      	bne.n	8000e5c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 fb61 	bl	800151e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fee1 	bl	8004c28 <USB_ReadInterrupts>
 8000e66:	4603      	mov	r3, r0
 8000e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e70:	d112      	bne.n	8000e98 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e84:	b292      	uxth	r2, r2
 8000e86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f008 fab5 	bl	80093fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e90:	2100      	movs	r1, #0
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f925 	bl	80010e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fec3 	bl	8004c28 <USB_ReadInterrupts>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000eac:	d10b      	bne.n	8000ec6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000ec0:	b292      	uxth	r2, r2
 8000ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f003 feac 	bl	8004c28 <USB_ReadInterrupts>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eda:	d10b      	bne.n	8000ef4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000eee:	b292      	uxth	r2, r2
 8000ef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f003 fe95 	bl	8004c28 <USB_ReadInterrupts>
 8000efe:	4603      	mov	r3, r0
 8000f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f08:	d126      	bne.n	8000f58 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0204 	bic.w	r2, r2, #4
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f022 0208 	bic.w	r2, r2, #8
 8000f34:	b292      	uxth	r2, r2
 8000f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f008 fa96 	bl	800946c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f52:	b292      	uxth	r2, r2
 8000f54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fe63 	bl	8004c28 <USB_ReadInterrupts>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f6c:	f040 8084 	bne.w	8001078 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	77fb      	strb	r3, [r7, #31]
 8000f74:	e011      	b.n	8000f9a <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	441a      	add	r2, r3
 8000f82:	7ffb      	ldrb	r3, [r7, #31]
 8000f84:	8812      	ldrh	r2, [r2, #0]
 8000f86:	b292      	uxth	r2, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	f107 0120 	add.w	r1, r7, #32
 8000f8e:	440b      	add	r3, r1
 8000f90:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f94:	7ffb      	ldrb	r3, [r7, #31]
 8000f96:	3301      	adds	r3, #1
 8000f98:	77fb      	strb	r3, [r7, #31]
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
 8000f9c:	2b07      	cmp	r3, #7
 8000f9e:	d9ea      	bls.n	8000f76 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000fd0:	bf00      	nop
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f6      	beq.n	8000fd2 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	77fb      	strb	r3, [r7, #31]
 8001000:	e010      	b.n	8001024 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001002:	7ffb      	ldrb	r3, [r7, #31]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	4611      	mov	r1, r2
 800100a:	7ffa      	ldrb	r2, [r7, #31]
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	440a      	add	r2, r1
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	f107 0120 	add.w	r1, r7, #32
 8001016:	440b      	add	r3, r1
 8001018:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800101c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800101e:	7ffb      	ldrb	r3, [r7, #31]
 8001020:	3301      	adds	r3, #1
 8001022:	77fb      	strb	r3, [r7, #31]
 8001024:	7ffb      	ldrb	r3, [r7, #31]
 8001026:	2b07      	cmp	r3, #7
 8001028:	d9eb      	bls.n	8001002 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f042 0208 	orr.w	r2, r2, #8
 800103c:	b292      	uxth	r2, r2
 800103e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800104a:	b29a      	uxth	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001054:	b292      	uxth	r2, r2
 8001056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 0204 	orr.w	r2, r2, #4
 800106c:	b292      	uxth	r2, r2
 800106e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f008 f9e0 	bl	8009438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fdd3 	bl	8004c28 <USB_ReadInterrupts>
 8001082:	4603      	mov	r3, r0
 8001084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800108c:	d10e      	bne.n	80010ac <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001096:	b29a      	uxth	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010a0:	b292      	uxth	r2, r2
 80010a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f008 f999 	bl	80093de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fdb9 	bl	8004c28 <USB_ReadInterrupts>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c0:	d10b      	bne.n	80010da <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010d4:	b292      	uxth	r2, r2
 80010d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_PCD_SetAddress+0x1a>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e013      	b.n	8001124 <HAL_PCD_SetAddress+0x42>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fd60 	bl	8004bda <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4603      	mov	r3, r0
 800113c:	70fb      	strb	r3, [r7, #3]
 800113e:	460b      	mov	r3, r1
 8001140:	803b      	strh	r3, [r7, #0]
 8001142:	4613      	mov	r3, r2
 8001144:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800114a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	da0e      	bge.n	8001170 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001152:	78fb      	ldrb	r3, [r7, #3]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	1c5a      	adds	r2, r3, #1
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2201      	movs	r2, #1
 800116c:	705a      	strb	r2, [r3, #1]
 800116e:	e00e      	b.n	800118e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	f003 0207 	and.w	r2, r3, #7
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	b2da      	uxtb	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800119a:	883a      	ldrh	r2, [r7, #0]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	78ba      	ldrb	r2, [r7, #2]
 80011a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d004      	beq.n	80011b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80011b8:	78bb      	ldrb	r3, [r7, #2]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d102      	bne.n	80011c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <HAL_PCD_EP_Open+0xa6>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e00e      	b.n	80011f0 <HAL_PCD_EP_Open+0xc4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2201      	movs	r2, #1
 80011d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68f9      	ldr	r1, [r7, #12]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fd87 	bl	8002cf4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011ee:	7afb      	ldrb	r3, [r7, #11]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001208:	2b00      	cmp	r3, #0
 800120a:	da0e      	bge.n	800122a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f003 0307 	and.w	r3, r3, #7
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	705a      	strb	r2, [r3, #1]
 8001228:	e00e      	b.n	8001248 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f003 0207 	and.w	r2, r3, #7
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	b2da      	uxtb	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_PCD_EP_Close+0x6a>
 800125e:	2302      	movs	r3, #2
 8001260:	e00e      	b.n	8001280 <HAL_PCD_EP_Close+0x88>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	68f9      	ldr	r1, [r7, #12]
 8001270:	4618      	mov	r0, r3
 8001272:	f002 f8a9 	bl	80033c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	460b      	mov	r3, r1
 8001296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	f003 0207 	and.w	r2, r3, #7
 800129e:	4613      	mov	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	2200      	movs	r2, #0
 80012c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6979      	ldr	r1, [r7, #20]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fa5b 	bl	80037a0 <USB_EPStartXfer>
 80012ea:	e005      	b.n	80012f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6979      	ldr	r1, [r7, #20]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 fa54 	bl	80037a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800130e:	78fb      	ldrb	r3, [r7, #3]
 8001310:	f003 0207 	and.w	r2, r3, #7
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4613      	mov	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001324:	681b      	ldr	r3, [r3, #0]
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	460b      	mov	r3, r1
 800133e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	2201      	movs	r2, #1
 800137a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800137c:	7afb      	ldrb	r3, [r7, #11]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	b2da      	uxtb	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	2b00      	cmp	r3, #0
 8001390:	d106      	bne.n	80013a0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fa01 	bl	80037a0 <USB_EPStartXfer>
 800139e:	e005      	b.n	80013ac <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6979      	ldr	r1, [r7, #20]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 f9fa 	bl	80037a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80013c2:	78fb      	ldrb	r3, [r7, #3]
 80013c4:	f003 0207 	and.w	r2, r3, #7
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d901      	bls.n	80013d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e04c      	b.n	800146e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0e      	bge.n	80013fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013dc:	78fb      	ldrb	r3, [r7, #3]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	705a      	strb	r2, [r3, #1]
 80013f8:	e00c      	b.n	8001414 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013fa:	78fa      	ldrb	r2, [r7, #3]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2201      	movs	r2, #1
 8001418:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800141a:	78fb      	ldrb	r3, [r7, #3]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_PCD_EP_SetStall+0x7e>
 8001430:	2302      	movs	r3, #2
 8001432:	e01c      	b.n	800146e <HAL_PCD_EP_SetStall+0xb8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f003 facc 	bl	80049e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	2b00      	cmp	r3, #0
 8001450:	d108      	bne.n	8001464 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f003 fbf1 	bl	8004c46 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	460b      	mov	r3, r1
 8001480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001482:	78fb      	ldrb	r3, [r7, #3]
 8001484:	f003 020f 	and.w	r2, r3, #15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d901      	bls.n	8001494 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e040      	b.n	8001516 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0e      	bge.n	80014ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149c:	78fb      	ldrb	r3, [r7, #3]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	1c5a      	adds	r2, r3, #1
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2201      	movs	r2, #1
 80014b6:	705a      	strb	r2, [r3, #1]
 80014b8:	e00e      	b.n	80014d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	f003 0207 	and.w	r2, r3, #7
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2200      	movs	r2, #0
 80014d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d101      	bne.n	80014f8 <HAL_PCD_EP_ClrStall+0x82>
 80014f4:	2302      	movs	r3, #2
 80014f6:	e00e      	b.n	8001516 <HAL_PCD_EP_ClrStall+0xa0>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68f9      	ldr	r1, [r7, #12]
 8001506:	4618      	mov	r0, r3
 8001508:	f003 faba 	bl	8004a80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b08e      	sub	sp, #56	; 0x38
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001526:	e2df      	b.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001530:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001532:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800153e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001542:	2b00      	cmp	r3, #0
 8001544:	f040 8158 	bne.w	80017f8 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001548:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d152      	bne.n	80015f8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	b29b      	uxth	r3, r3
 800155a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800155e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800156e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001572:	b29b      	uxth	r3, r3
 8001574:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3328      	adds	r3, #40	; 0x28
 800157a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001584:	b29b      	uxth	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	3302      	adds	r3, #2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	69db      	ldr	r3, [r3, #28]
 80015b0:	441a      	add	r2, r3
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80015b6:	2100      	movs	r1, #0
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f007 fef6 	bl	80093aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 828e 	beq.w	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f040 8289 	bne.w	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b292      	uxth	r2, r2
 80015ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015f6:	e277      	b.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001608:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	2b00      	cmp	r3, #0
 8001610:	d034      	beq.n	800167c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800161a:	b29b      	uxth	r3, r3
 800161c:	461a      	mov	r2, r3
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	3306      	adds	r3, #6
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	4413      	add	r3, r2
 8001630:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6818      	ldr	r0, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001650:	b29b      	uxth	r3, r3
 8001652:	f003 fb47 	bl	8004ce4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29a      	uxth	r2, r3
 800165e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001662:	4013      	ands	r3, r2
 8001664:	823b      	strh	r3, [r7, #16]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	8a3a      	ldrh	r2, [r7, #16]
 800166c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001670:	b292      	uxth	r2, r2
 8001672:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f007 fe6b 	bl	8009350 <HAL_PCD_SetupStageCallback>
 800167a:	e235      	b.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800167c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001680:	2b00      	cmp	r3, #0
 8001682:	f280 8231 	bge.w	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b29a      	uxth	r2, r3
 800168e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001692:	4013      	ands	r3, r2
 8001694:	83bb      	strh	r3, [r7, #28]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	8bba      	ldrh	r2, [r7, #28]
 800169c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a0:	b292      	uxth	r2, r2
 80016a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	3306      	adds	r3, #6
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4413      	add	r3, r2
 80016c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d019      	beq.n	800170c <PCD_EP_ISR_Handler+0x1ee>
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	6959      	ldr	r1, [r3, #20]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f003 faf7 	bl	8004ce4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	695a      	ldr	r2, [r3, #20]
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	441a      	add	r2, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001704:	2100      	movs	r1, #0
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f007 fe34 	bl	8009374 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800171a:	b29b      	uxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4413      	add	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d112      	bne.n	800175a <PCD_EP_ISR_Handler+0x23c>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	b29b      	uxth	r3, r3
 800173a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800173e:	b29a      	uxth	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	801a      	strh	r2, [r3, #0]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	881b      	ldrh	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800174e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001752:	b29a      	uxth	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	801a      	strh	r2, [r3, #0]
 8001758:	e02f      	b.n	80017ba <PCD_EP_ISR_Handler+0x29c>
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	2b3e      	cmp	r3, #62	; 0x3e
 8001760:	d813      	bhi.n	800178a <PCD_EP_ISR_Handler+0x26c>
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	633b      	str	r3, [r7, #48]	; 0x30
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d002      	beq.n	800177c <PCD_EP_ISR_Handler+0x25e>
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	3301      	adds	r3, #1
 800177a:	633b      	str	r3, [r7, #48]	; 0x30
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	b29b      	uxth	r3, r3
 8001780:	029b      	lsls	r3, r3, #10
 8001782:	b29a      	uxth	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	801a      	strh	r2, [r3, #0]
 8001788:	e017      	b.n	80017ba <PCD_EP_ISR_Handler+0x29c>
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	095b      	lsrs	r3, r3, #5
 8001790:	633b      	str	r3, [r7, #48]	; 0x30
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <PCD_EP_ISR_Handler+0x286>
 800179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a0:	3b01      	subs	r3, #1
 80017a2:	633b      	str	r3, [r7, #48]	; 0x30
 80017a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	029b      	lsls	r3, r3, #10
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ca:	827b      	strh	r3, [r7, #18]
 80017cc:	8a7b      	ldrh	r3, [r7, #18]
 80017ce:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80017d2:	827b      	strh	r3, [r7, #18]
 80017d4:	8a7b      	ldrh	r3, [r7, #18]
 80017d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80017da:	827b      	strh	r3, [r7, #18]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	8a7b      	ldrh	r3, [r7, #18]
 80017e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	8013      	strh	r3, [r2, #0]
 80017f6:	e177      	b.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	881b      	ldrh	r3, [r3, #0]
 8001808:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800180a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800180e:	2b00      	cmp	r3, #0
 8001810:	f280 80ea 	bge.w	80019e8 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	b29a      	uxth	r2, r3
 8001826:	f640 738f 	movw	r3, #3983	; 0xf8f
 800182a:	4013      	ands	r3, r2
 800182c:	853b      	strh	r3, [r7, #40]	; 0x28
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800183e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001842:	b292      	uxth	r2, r2
 8001844:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001846:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	4413      	add	r3, r2
 800185a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	7b1b      	ldrb	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d122      	bne.n	80018aa <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4413      	add	r3, r2
 8001878:	3306      	adds	r3, #6
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800188e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8087 	beq.w	80019a4 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	6959      	ldr	r1, [r3, #20]
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	88da      	ldrh	r2, [r3, #6]
 80018a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018a4:	f003 fa1e 	bl	8004ce4 <USB_ReadPMA>
 80018a8:	e07c      	b.n	80019a4 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	78db      	ldrb	r3, [r3, #3]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d108      	bne.n	80018c4 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80018b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018b4:	461a      	mov	r2, r3
 80018b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f923 	bl	8001b04 <HAL_PCD_EP_DB_Receive>
 80018be:	4603      	mov	r3, r0
 80018c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80018c2:	e06f      	b.n	80019a4 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	847b      	strh	r3, [r7, #34]	; 0x22
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	441a      	add	r2, r3
 80018ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001900:	b29b      	uxth	r3, r3
 8001902:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	881b      	ldrh	r3, [r3, #0]
 8001914:	b29b      	uxth	r3, r3
 8001916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d021      	beq.n	8001962 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	3302      	adds	r3, #2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001946:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001948:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800194a:	2b00      	cmp	r3, #0
 800194c:	d02a      	beq.n	80019a4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	6959      	ldr	r1, [r3, #20]
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	891a      	ldrh	r2, [r3, #8]
 800195a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800195c:	f003 f9c2 	bl	8004ce4 <USB_ReadPMA>
 8001960:	e020      	b.n	80019a4 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800196a:	b29b      	uxth	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4413      	add	r3, r2
 8001976:	3306      	adds	r3, #6
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	4413      	add	r3, r2
 8001980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800198a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800198c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800198e:	2b00      	cmp	r3, #0
 8001990:	d008      	beq.n	80019a4 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	6959      	ldr	r1, [r3, #20]
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	895a      	ldrh	r2, [r3, #10]
 800199e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019a0:	f003 f9a0 	bl	8004ce4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	69da      	ldr	r2, [r3, #28]
 80019a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019aa:	441a      	add	r2, r3
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	695a      	ldr	r2, [r3, #20]
 80019b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019b6:	441a      	add	r2, r3
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <PCD_EP_ISR_Handler+0x4b0>
 80019c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d206      	bcs.n	80019dc <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f007 fccd 	bl	8009374 <HAL_PCD_DataOutStageCallback>
 80019da:	e005      	b.n	80019e8 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f001 fedc 	bl	80037a0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d07a      	beq.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80019f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019f6:	1c5a      	adds	r2, r3, #1
 80019f8:	4613      	mov	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	881b      	ldrh	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a20:	843b      	strh	r3, [r7, #32]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	441a      	add	r2, r3
 8001a30:	8c3b      	ldrh	r3, [r7, #32]
 8001a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	78db      	ldrb	r3, [r3, #3]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d108      	bne.n	8001a58 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d146      	bne.n	8001adc <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d141      	bne.n	8001adc <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	461a      	mov	r2, r3
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a80:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	699a      	ldr	r2, [r3, #24]
 8001a86:	8bfb      	ldrh	r3, [r7, #30]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d906      	bls.n	8001a9a <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	8bfb      	ldrh	r3, [r7, #30]
 8001a92:	1ad2      	subs	r2, r2, r3
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	619a      	str	r2, [r3, #24]
 8001a98:	e002      	b.n	8001aa0 <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d106      	bne.n	8001ab6 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f007 fc7b 	bl	80093aa <HAL_PCD_DataInStageCallback>
 8001ab4:	e018      	b.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	695a      	ldr	r2, [r3, #20]
 8001aba:	8bfb      	ldrh	r3, [r7, #30]
 8001abc:	441a      	add	r2, r3
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	441a      	add	r2, r3
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 fe63 	bl	80037a0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ada:	e005      	b.n	8001ae8 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001adc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001ade:	461a      	mov	r2, r3
 8001ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f91b 	bl	8001d1e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f6ff ad17 	blt.w	8001528 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3738      	adds	r7, #56	; 0x38
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d07e      	beq.n	8001c1a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4413      	add	r3, r2
 8001b30:	3302      	adds	r3, #2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b44:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	8b7b      	ldrh	r3, [r7, #26]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d306      	bcc.n	8001b5e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	8b7b      	ldrh	r3, [r7, #26]
 8001b56:	1ad2      	subs	r2, r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	619a      	str	r2, [r3, #24]
 8001b5c:	e002      	b.n	8001b64 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d123      	bne.n	8001bb4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b86:	833b      	strh	r3, [r7, #24]
 8001b88:	8b3b      	ldrh	r3, [r7, #24]
 8001b8a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b8e:	833b      	strh	r3, [r7, #24]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	441a      	add	r2, r3
 8001b9e:	8b3b      	ldrh	r3, [r7, #24]
 8001ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d01f      	beq.n	8001bfe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bd8:	82fb      	strh	r3, [r7, #22]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	441a      	add	r2, r3
 8001be8:	8afb      	ldrh	r3, [r7, #22]
 8001bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001bfe:	8b7b      	ldrh	r3, [r7, #26]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 8087 	beq.w	8001d14 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	6959      	ldr	r1, [r3, #20]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	891a      	ldrh	r2, [r3, #8]
 8001c12:	8b7b      	ldrh	r3, [r7, #26]
 8001c14:	f003 f866 	bl	8004ce4 <USB_ReadPMA>
 8001c18:	e07c      	b.n	8001d14 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3306      	adds	r3, #6
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c42:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	8b7b      	ldrh	r3, [r7, #26]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d306      	bcc.n	8001c5c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	8b7b      	ldrh	r3, [r7, #26]
 8001c54:	1ad2      	subs	r2, r2, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	619a      	str	r2, [r3, #24]
 8001c5a:	e002      	b.n	8001c62 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d123      	bne.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c84:	83fb      	strh	r3, [r7, #30]
 8001c86:	8bfb      	ldrh	r3, [r7, #30]
 8001c88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c8c:	83fb      	strh	r3, [r7, #30]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	461a      	mov	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	441a      	add	r2, r3
 8001c9c:	8bfb      	ldrh	r3, [r7, #30]
 8001c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11f      	bne.n	8001cfc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	83bb      	strh	r3, [r7, #28]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	441a      	add	r2, r3
 8001ce6:	8bbb      	ldrh	r3, [r7, #28]
 8001ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cfc:	8b7b      	ldrh	r3, [r7, #26]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	6959      	ldr	r1, [r3, #20]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	895a      	ldrh	r2, [r3, #10]
 8001d0e:	8b7b      	ldrh	r3, [r7, #26]
 8001d10:	f002 ffe8 	bl	8004ce4 <USB_ReadPMA>
    }
  }

  return count;
 8001d14:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b092      	sub	sp, #72	; 0x48
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8132 	beq.w	8001f9c <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d60:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d906      	bls.n	8001d7a <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	699a      	ldr	r2, [r3, #24]
 8001d70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d72:	1ad2      	subs	r2, r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	619a      	str	r2, [r3, #24]
 8001d78:	e002      	b.n	8001d80 <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12c      	bne.n	8001de2 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f007 fb0b 	bl	80093aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 822f 	beq.w	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dba:	827b      	strh	r3, [r7, #18]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	441a      	add	r2, r3
 8001dca:	8a7b      	ldrh	r3, [r7, #18]
 8001dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8013      	strh	r3, [r2, #0]
 8001de0:	e20d      	b.n	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01f      	beq.n	8001e2c <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	441a      	add	r2, r3
 8001e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	f040 81e3 	bne.w	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e3e:	441a      	add	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e4a:	441a      	add	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6a1a      	ldr	r2, [r3, #32]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d309      	bcc.n	8001e70 <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e68:	1ad2      	subs	r2, r2, r3
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	621a      	str	r2, [r3, #32]
 8001e6e:	e014      	b.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001e78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e84:	e009      	b.n	8001e9a <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	785b      	ldrb	r3, [r3, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d155      	bne.n	8001f4e <HAL_PCD_EP_DB_Transmit+0x230>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	011a      	lsls	r2, r3, #4
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d112      	bne.n	8001ef6 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	801a      	strh	r2, [r3, #0]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	801a      	strh	r2, [r3, #0]
 8001ef4:	e047      	b.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x268>
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef8:	2b3e      	cmp	r3, #62	; 0x3e
 8001efa:	d811      	bhi.n	8001f20 <HAL_PCD_EP_DB_Transmit+0x202>
 8001efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	3301      	adds	r3, #1
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	801a      	strh	r2, [r3, #0]
 8001f1e:	e032      	b.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <HAL_PCD_EP_DB_Transmit+0x218>
 8001f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f32:	3b01      	subs	r3, #1
 8001f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	e01b      	b.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	785b      	ldrb	r3, [r3, #1]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d117      	bne.n	8001f86 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	011a      	lsls	r2, r3, #4
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	4413      	add	r3, r2
 8001f78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	6959      	ldr	r1, [r3, #20]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	891a      	ldrh	r2, [r3, #8]
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f002 fe61 	bl	8004c5c <USB_WritePMA>
 8001f9a:	e130      	b.n	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	3306      	adds	r3, #6
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fc4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d306      	bcc.n	8001fde <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	699a      	ldr	r2, [r3, #24]
 8001fd4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fd6:	1ad2      	subs	r2, r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	619a      	str	r2, [r3, #24]
 8001fdc:	e002      	b.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d12c      	bne.n	8002046 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f007 f9d9 	bl	80093aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 80fd 	bne.w	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800201a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	441a      	add	r2, r3
 800202e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002040:	b29b      	uxth	r3, r3
 8002042:	8013      	strh	r3, [r2, #0]
 8002044:	e0db      	b.n	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11f      	bne.n	8002090 <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	b29b      	uxth	r3, r3
 8002062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800207c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002084:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800208c:	b29b      	uxth	r3, r3
 800208e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002096:	2b01      	cmp	r3, #1
 8002098:	f040 80b1 	bne.w	80021fe <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020a2:	441a      	add	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	69da      	ldr	r2, [r3, #28]
 80020ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020ae:	441a      	add	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d309      	bcc.n	80020d4 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	6a1a      	ldr	r2, [r3, #32]
 80020ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020cc:	1ad2      	subs	r2, r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	621a      	str	r2, [r3, #32]
 80020d2:	e014      	b.n	80020fe <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d106      	bne.n	80020ea <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 80020dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020de:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020e8:	e009      	b.n	80020fe <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2200      	movs	r2, #0
 80020f4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	785b      	ldrb	r3, [r3, #1]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d155      	bne.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x49a>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002120:	4413      	add	r3, r2
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	011a      	lsls	r2, r3, #4
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	4413      	add	r3, r2
 800212e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
 8002134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002136:	2b00      	cmp	r3, #0
 8002138:	d112      	bne.n	8002160 <HAL_PCD_EP_DB_Transmit+0x442>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002144:	b29a      	uxth	r2, r3
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	801a      	strh	r2, [r3, #0]
 800214a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002158:	b29a      	uxth	r2, r3
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	801a      	strh	r2, [r3, #0]
 800215e:	e044      	b.n	80021ea <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002162:	2b3e      	cmp	r3, #62	; 0x3e
 8002164:	d811      	bhi.n	800218a <HAL_PCD_EP_DB_Transmit+0x46c>
 8002166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_PCD_EP_DB_Transmit+0x45e>
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	3301      	adds	r3, #1
 800217a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800217e:	b29b      	uxth	r3, r3
 8002180:	029b      	lsls	r3, r3, #10
 8002182:	b29a      	uxth	r2, r3
 8002184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	e02f      	b.n	80021ea <HAL_PCD_EP_DB_Transmit+0x4cc>
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	095b      	lsrs	r3, r3, #5
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2b00      	cmp	r3, #0
 8002198:	d102      	bne.n	80021a0 <HAL_PCD_EP_DB_Transmit+0x482>
 800219a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800219c:	3b01      	subs	r3, #1
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	e018      	b.n	80021ea <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	785b      	ldrb	r3, [r3, #1]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d114      	bne.n	80021ea <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	461a      	mov	r2, r3
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	4413      	add	r3, r2
 80021d0:	637b      	str	r3, [r7, #52]	; 0x34
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	011a      	lsls	r2, r3, #4
 80021d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021da:	4413      	add	r3, r2
 80021dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	6959      	ldr	r1, [r3, #20]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	895a      	ldrh	r2, [r3, #10]
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f002 fd2f 	bl	8004c5c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002218:	823b      	strh	r3, [r7, #16]
 800221a:	8a3b      	ldrh	r3, [r7, #16]
 800221c:	f083 0310 	eor.w	r3, r3, #16
 8002220:	823b      	strh	r3, [r7, #16]
 8002222:	8a3b      	ldrh	r3, [r7, #16]
 8002224:	f083 0320 	eor.w	r3, r3, #32
 8002228:	823b      	strh	r3, [r7, #16]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	441a      	add	r2, r3
 8002238:	8a3b      	ldrh	r3, [r7, #16]
 800223a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800223e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224a:	b29b      	uxth	r3, r3
 800224c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3748      	adds	r7, #72	; 0x48
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	460b      	mov	r3, r1
 8002264:	817b      	strh	r3, [r7, #10]
 8002266:	4613      	mov	r3, r2
 8002268:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800226a:	897b      	ldrh	r3, [r7, #10]
 800226c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00b      	beq.n	800228e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002276:	897b      	ldrh	r3, [r7, #10]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e009      	b.n	80022a2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800228e:	897a      	ldrh	r2, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022a2:	893b      	ldrh	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	80da      	strh	r2, [r3, #6]
 80022b6:	e00b      	b.n	80022d0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2201      	movs	r2, #1
 80022bc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	371c      	adds	r7, #28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e26c      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8087 	beq.w	800240a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022fc:	4b92      	ldr	r3, [pc, #584]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b04      	cmp	r3, #4
 8002306:	d00c      	beq.n	8002322 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002308:	4b8f      	ldr	r3, [pc, #572]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d112      	bne.n	800233a <HAL_RCC_OscConfig+0x5e>
 8002314:	4b8c      	ldr	r3, [pc, #560]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d10b      	bne.n	800233a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002322:	4b89      	ldr	r3, [pc, #548]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d06c      	beq.n	8002408 <HAL_RCC_OscConfig+0x12c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d168      	bne.n	8002408 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e246      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x76>
 8002344:	4b80      	ldr	r3, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a7f      	ldr	r2, [pc, #508]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e02e      	b.n	80023b0 <HAL_RCC_OscConfig+0xd4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x98>
 800235a:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a7a      	ldr	r2, [pc, #488]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002360:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	4b78      	ldr	r3, [pc, #480]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a77      	ldr	r2, [pc, #476]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800236c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e01d      	b.n	80023b0 <HAL_RCC_OscConfig+0xd4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0xbc>
 800237e:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a71      	ldr	r2, [pc, #452]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0xd4>
 8002398:	4b6b      	ldr	r3, [pc, #428]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a6a      	ldr	r2, [pc, #424]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b68      	ldr	r3, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a67      	ldr	r2, [pc, #412]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7fe f96a 	bl	8000690 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c0:	f7fe f966 	bl	8000690 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1fa      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b5d      	ldr	r3, [pc, #372]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0xe4>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe f956 	bl	8000690 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe f952 	bl	8000690 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1e6      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x10c>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d063      	beq.n	80024de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002416:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002422:	4b49      	ldr	r3, [pc, #292]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x18c>
 800242e:	4b46      	ldr	r3, [pc, #280]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x176>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1ba      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4939      	ldr	r1, [pc, #228]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e03a      	b.n	80024de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	4b36      	ldr	r3, [pc, #216]	; (800254c <HAL_RCC_OscConfig+0x270>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7fe f90b 	bl	8000690 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247e:	f7fe f907 	bl	8000690 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e19b      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4927      	ldr	r1, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b26      	ldr	r3, [pc, #152]	; (800254c <HAL_RCC_OscConfig+0x270>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe f8ea 	bl	8000690 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c0:	f7fe f8e6 	bl	8000690 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e17a      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d03a      	beq.n	8002560 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d019      	beq.n	8002526 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <HAL_RCC_OscConfig+0x274>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f8:	f7fe f8ca 	bl	8000690 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe f8c6 	bl	8000690 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e15a      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_OscConfig+0x26c>)
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800251e:	2001      	movs	r0, #1
 8002520:	f000 faa8 	bl	8002a74 <RCC_Delay>
 8002524:	e01c      	b.n	8002560 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <HAL_RCC_OscConfig+0x274>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe f8b0 	bl	8000690 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002532:	e00f      	b.n	8002554 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe f8ac 	bl	8000690 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d908      	bls.n	8002554 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e140      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	42420000 	.word	0x42420000
 8002550:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002554:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e9      	bne.n	8002534 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a6 	beq.w	80026ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002572:	4b97      	ldr	r3, [pc, #604]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4b94      	ldr	r3, [pc, #592]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a93      	ldr	r2, [pc, #588]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b91      	ldr	r3, [pc, #580]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002596:	2301      	movs	r3, #1
 8002598:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259a:	4b8e      	ldr	r3, [pc, #568]	; (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d118      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a6:	4b8b      	ldr	r3, [pc, #556]	; (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a8a      	ldr	r2, [pc, #552]	; (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025b2:	f7fe f86d 	bl	8000690 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ba:	f7fe f869 	bl	8000690 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b64      	cmp	r3, #100	; 0x64
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e0fd      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	4b81      	ldr	r3, [pc, #516]	; (80027d4 <HAL_RCC_OscConfig+0x4f8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d106      	bne.n	80025ee <HAL_RCC_OscConfig+0x312>
 80025e0:	4b7b      	ldr	r3, [pc, #492]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a7a      	ldr	r2, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6213      	str	r3, [r2, #32]
 80025ec:	e02d      	b.n	800264a <HAL_RCC_OscConfig+0x36e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x334>
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	4b73      	ldr	r3, [pc, #460]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a72      	ldr	r2, [pc, #456]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	e01c      	b.n	800264a <HAL_RCC_OscConfig+0x36e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b05      	cmp	r3, #5
 8002616:	d10c      	bne.n	8002632 <HAL_RCC_OscConfig+0x356>
 8002618:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	6a1b      	ldr	r3, [r3, #32]
 800261c:	4a6c      	ldr	r2, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	f043 0304 	orr.w	r3, r3, #4
 8002622:	6213      	str	r3, [r2, #32]
 8002624:	4b6a      	ldr	r3, [pc, #424]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	4a69      	ldr	r2, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6213      	str	r3, [r2, #32]
 8002630:	e00b      	b.n	800264a <HAL_RCC_OscConfig+0x36e>
 8002632:	4b67      	ldr	r3, [pc, #412]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a66      	ldr	r2, [pc, #408]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a63      	ldr	r2, [pc, #396]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d015      	beq.n	800267e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7fe f81d 	bl	8000690 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7fe f819 	bl	8000690 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0ab      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0ee      	beq.n	800265a <HAL_RCC_OscConfig+0x37e>
 800267c:	e014      	b.n	80026a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe f807 	bl	8000690 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe f803 	bl	8000690 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e095      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1ee      	bne.n	8002686 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026a8:	7dfb      	ldrb	r3, [r7, #23]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d105      	bne.n	80026ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ae:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	4a47      	ldr	r2, [pc, #284]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 8081 	beq.w	80027c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026c4:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 030c 	and.w	r3, r3, #12
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d061      	beq.n	8002794 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d146      	bne.n	8002766 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_OscConfig+0x4fc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fd ffd7 	bl	8000690 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd ffd3 	bl	8000690 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e067      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026f8:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	492d      	ldr	r1, [pc, #180]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a19      	ldr	r1, [r3, #32]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	430b      	orrs	r3, r1
 8002732:	4927      	ldr	r1, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002738:	4b27      	ldr	r3, [pc, #156]	; (80027d8 <HAL_RCC_OscConfig+0x4fc>)
 800273a:	2201      	movs	r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fd ffa7 	bl	8000690 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002746:	f7fd ffa3 	bl	8000690 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e037      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x46a>
 8002764:	e02f      	b.n	80027c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002766:	4b1c      	ldr	r3, [pc, #112]	; (80027d8 <HAL_RCC_OscConfig+0x4fc>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fd ff90 	bl	8000690 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002774:	f7fd ff8c 	bl	8000690 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e020      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0x498>
 8002792:	e018      	b.n	80027c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e013      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40007000 	.word	0x40007000
 80027d8:	42420060 	.word	0x42420060

080027dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0d0      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b6a      	ldr	r3, [pc, #424]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d910      	bls.n	8002820 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b67      	ldr	r3, [pc, #412]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 0207 	bic.w	r2, r3, #7
 8002806:	4965      	ldr	r1, [pc, #404]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002842:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800285a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d040      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b41      	ldr	r3, [pc, #260]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e073      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06b      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4936      	ldr	r1, [pc, #216]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fd fee0 	bl	8000690 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fd fedc 	bl	8000690 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e053      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b27      	ldr	r3, [pc, #156]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d210      	bcs.n	800292c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	4922      	ldr	r1, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f821 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800296e:	4601      	mov	r1, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	5cd3      	ldrb	r3, [r2, r3]
 800297e:	fa21 f303 	lsr.w	r3, r1, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1d0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fe3e 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40022000 	.word	0x40022000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08009a88 	.word	0x08009a88
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	b490      	push	{r4, r7}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029b6:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029b8:	1d3c      	adds	r4, r7, #4
 80029ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	2300      	movs	r3, #0
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029da:	4b23      	ldr	r3, [pc, #140]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x40>
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x46>
 80029ee:	e02d      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029f2:	623b      	str	r3, [r7, #32]
      break;
 80029f4:	e02d      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	0c9b      	lsrs	r3, r3, #18
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a02:	4413      	add	r3, r2
 8002a04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	0c5b      	lsrs	r3, r3, #17
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a22:	4413      	add	r3, r2
 8002a24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a2e:	fb02 f203 	mul.w	r2, r2, r3
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e004      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	623b      	str	r3, [r7, #32]
      break;
 8002a4a:	e002      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a4e:	623b      	str	r3, [r7, #32]
      break;
 8002a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a52:	6a3b      	ldr	r3, [r7, #32]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3728      	adds	r7, #40	; 0x28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc90      	pop	{r4, r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	080099f0 	.word	0x080099f0
 8002a64:	08009a00 	.word	0x08009a00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	007a1200 	.word	0x007a1200
 8002a70:	003d0900 	.word	0x003d0900

08002a74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <RCC_Delay+0x34>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <RCC_Delay+0x38>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0a5b      	lsrs	r3, r3, #9
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a90:	bf00      	nop
  }
  while (Delay --);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1e5a      	subs	r2, r3, #1
 8002a96:	60fa      	str	r2, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1f9      	bne.n	8002a90 <RCC_Delay+0x1c>
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	10624dd3 	.word	0x10624dd3

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
 8002abc:	2300      	movs	r3, #0
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d07d      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad0:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b4c      	ldr	r3, [pc, #304]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	61d3      	str	r3, [r2, #28]
 8002ae8:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b46      	ldr	r3, [pc, #280]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d118      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b04:	4b43      	ldr	r3, [pc, #268]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b10:	f7fd fdbe 	bl	8000690 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	e008      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fd fdba 	bl	8000690 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e06d      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d02e      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d027      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	4b2c      	ldr	r3, [pc, #176]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b6a:	4a29      	ldr	r2, [pc, #164]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7a:	f7fd fd89 	bl	8000690 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b80:	e00a      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b82:	f7fd fd85 	bl	8000690 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e036      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0ee      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4917      	ldr	r1, [pc, #92]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d008      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	490b      	ldr	r1, [pc, #44]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d008      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	4904      	ldr	r1, [pc, #16]	; (8002c10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42420440 	.word	0x42420440

08002c1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	f107 0014 	add.w	r0, r7, #20
 8002c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	b004      	add	sp, #16
 8002c3a:	4770      	bx	lr

08002c3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c4c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c70:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4013      	ands	r3, r2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	f107 0014 	add.w	r0, r7, #20
 8002cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	b004      	add	sp, #16
 8002cf2:	4770      	bx	lr

08002cf4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b09b      	sub	sp, #108	; 0x6c
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	78db      	ldrb	r3, [r3, #3]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d81f      	bhi.n	8002d66 <USB_ActivateEndpoint+0x72>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <USB_ActivateEndpoint+0x38>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	08002d6f 	.word	0x08002d6f
 8002d38:	08002d4b 	.word	0x08002d4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002d3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d48:	e012      	b.n	8002d70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d4e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d56:	e00b      	b.n	8002d70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d58:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d60:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d64:	e004      	b.n	8002d70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002d6c:	e000      	b.n	8002d70 <USB_ActivateEndpoint+0x7c>
      break;
 8002d6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	441a      	add	r2, r3
 8002d7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	441a      	add	r2, r3
 8002dc0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7b1b      	ldrb	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 8149 	bne.w	8003074 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	785b      	ldrb	r3, [r3, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f000 8084 	beq.w	8002ef4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	011a      	lsls	r2, r3, #4
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	88db      	ldrh	r3, [r3, #6]
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	81fb      	strh	r3, [r7, #14]
 8002e2e:	89fb      	ldrh	r3, [r7, #14]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <USB_ActivateEndpoint+0x17c>
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e4e:	81bb      	strh	r3, [r7, #12]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	441a      	add	r2, r3
 8002e5a:	89bb      	ldrh	r3, [r7, #12]
 8002e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	78db      	ldrb	r3, [r3, #3]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d020      	beq.n	8002eba <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8e:	813b      	strh	r3, [r7, #8]
 8002e90:	893b      	ldrh	r3, [r7, #8]
 8002e92:	f083 0320 	eor.w	r3, r3, #32
 8002e96:	813b      	strh	r3, [r7, #8]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	893b      	ldrh	r3, [r7, #8]
 8002ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	8013      	strh	r3, [r2, #0]
 8002eb8:	e27f      	b.n	80033ba <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed0:	817b      	strh	r3, [r7, #10]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	441a      	add	r2, r3
 8002edc:	897b      	ldrh	r3, [r7, #10]
 8002ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	8013      	strh	r3, [r2, #0]
 8002ef2:	e262      	b.n	80033ba <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	4413      	add	r3, r2
 8002f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	011a      	lsls	r2, r3, #4
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	88db      	ldrh	r3, [r3, #6]
 8002f1c:	085b      	lsrs	r3, r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	4413      	add	r3, r2
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	011a      	lsls	r2, r3, #4
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	4413      	add	r3, r2
 8002f46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d112      	bne.n	8002f7a <USB_ActivateEndpoint+0x286>
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	e02f      	b.n	8002fda <USB_ActivateEndpoint+0x2e6>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f80:	d813      	bhi.n	8002faa <USB_ActivateEndpoint+0x2b6>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <USB_ActivateEndpoint+0x2a8>
 8002f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f98:	3301      	adds	r3, #1
 8002f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	e017      	b.n	8002fda <USB_ActivateEndpoint+0x2e6>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <USB_ActivateEndpoint+0x2d0>
 8002fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	029b      	lsls	r3, r3, #10
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	83fb      	strh	r3, [r7, #30]
 8002fe8:	8bfb      	ldrh	r3, [r7, #30]
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01b      	beq.n	800302a <USB_ActivateEndpoint+0x336>
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003008:	83bb      	strh	r3, [r7, #28]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	441a      	add	r2, r3
 8003014:	8bbb      	ldrh	r3, [r7, #28]
 8003016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800301e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003026:	b29b      	uxth	r3, r3
 8003028:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	837b      	strh	r3, [r7, #26]
 8003042:	8b7b      	ldrh	r3, [r7, #26]
 8003044:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003048:	837b      	strh	r3, [r7, #26]
 800304a:	8b7b      	ldrh	r3, [r7, #26]
 800304c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003050:	837b      	strh	r3, [r7, #26]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	441a      	add	r2, r3
 800305c:	8b7b      	ldrh	r3, [r7, #26]
 800305e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	b29b      	uxth	r3, r3
 8003070:	8013      	strh	r3, [r2, #0]
 8003072:	e1a2      	b.n	80033ba <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800308a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	441a      	add	r2, r3
 8003098:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800309c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80030a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030c0:	4413      	add	r3, r2
 80030c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	011a      	lsls	r2, r3, #4
 80030ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d2:	657b      	str	r3, [r7, #84]	; 0x54
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	891b      	ldrh	r3, [r3, #8]
 80030d8:	085b      	lsrs	r3, r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e2:	801a      	strh	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	653b      	str	r3, [r7, #80]	; 0x50
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f4:	4413      	add	r3, r2
 80030f6:	653b      	str	r3, [r7, #80]	; 0x50
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	011a      	lsls	r2, r3, #4
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	4413      	add	r3, r2
 8003102:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003106:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	895b      	ldrh	r3, [r3, #10]
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	b29b      	uxth	r3, r3
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003116:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	785b      	ldrb	r3, [r3, #1]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 8091 	bne.w	8003244 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003130:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01b      	beq.n	8003172 <USB_ActivateEndpoint+0x47e>
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003150:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	441a      	add	r2, r3
 800315c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800315e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003180:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01b      	beq.n	80031c2 <USB_ActivateEndpoint+0x4ce>
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800319c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	441a      	add	r2, r3
 80031ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80031be:	b29b      	uxth	r3, r3
 80031c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031da:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80031e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	441a      	add	r2, r3
 80031f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003206:	b29b      	uxth	r3, r3
 8003208:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003220:	867b      	strh	r3, [r7, #50]	; 0x32
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	441a      	add	r2, r3
 800322c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800322e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323e:	b29b      	uxth	r3, r3
 8003240:	8013      	strh	r3, [r2, #0]
 8003242:	e0ba      	b.n	80033ba <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003254:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d01d      	beq.n	800329c <USB_ActivateEndpoint+0x5a8>
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	441a      	add	r2, r3
 8003284:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800328c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003298:	b29b      	uxth	r3, r3
 800329a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80032ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80032b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01d      	beq.n	80032f4 <USB_ActivateEndpoint+0x600>
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	441a      	add	r2, r3
 80032dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80032e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	78db      	ldrb	r3, [r3, #3]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d024      	beq.n	8003346 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800330e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003312:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800331a:	f083 0320 	eor.w	r3, r3, #32
 800331e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	441a      	add	r2, r3
 800332c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003340:	b29b      	uxth	r3, r3
 8003342:	8013      	strh	r3, [r2, #0]
 8003344:	e01d      	b.n	8003382 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800336e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800337e:	b29b      	uxth	r3, r3
 8003380:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003398:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80033ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80033be:	4618      	mov	r0, r3
 80033c0:	376c      	adds	r7, #108	; 0x6c
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bc80      	pop	{r7}
 80033c6:	4770      	bx	lr

080033c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b08d      	sub	sp, #52	; 0x34
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	7b1b      	ldrb	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 808e 	bne.w	80034f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	785b      	ldrb	r3, [r3, #1]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d044      	beq.n	800346e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	81bb      	strh	r3, [r7, #12]
 80033f2:	89bb      	ldrh	r3, [r7, #12]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <USB_DeactivateEndpoint+0x6c>
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	817b      	strh	r3, [r7, #10]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	441a      	add	r2, r3
 800341e:	897b      	ldrh	r3, [r7, #10]
 8003420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800342c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003446:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800344a:	813b      	strh	r3, [r7, #8]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	441a      	add	r2, r3
 8003456:	893b      	ldrh	r3, [r7, #8]
 8003458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800345c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003468:	b29b      	uxth	r3, r3
 800346a:	8013      	strh	r3, [r2, #0]
 800346c:	e192      	b.n	8003794 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	827b      	strh	r3, [r7, #18]
 800347c:	8a7b      	ldrh	r3, [r7, #18]
 800347e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d01b      	beq.n	80034be <USB_DeactivateEndpoint+0xf6>
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	823b      	strh	r3, [r7, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	441a      	add	r2, r3
 80034a8:	8a3b      	ldrh	r3, [r7, #16]
 80034aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d4:	81fb      	strh	r3, [r7, #14]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	441a      	add	r2, r3
 80034e0:	89fb      	ldrh	r3, [r7, #14]
 80034e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8013      	strh	r3, [r2, #0]
 80034f6:	e14d      	b.n	8003794 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	785b      	ldrb	r3, [r3, #1]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f040 80a5 	bne.w	800364c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	843b      	strh	r3, [r7, #32]
 8003510:	8c3b      	ldrh	r3, [r7, #32]
 8003512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d01b      	beq.n	8003552 <USB_DeactivateEndpoint+0x18a>
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800352c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003530:	83fb      	strh	r3, [r7, #30]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	441a      	add	r2, r3
 800353c:	8bfb      	ldrh	r3, [r7, #30]
 800353e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003546:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800354a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354e:	b29b      	uxth	r3, r3
 8003550:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	83bb      	strh	r3, [r7, #28]
 8003560:	8bbb      	ldrh	r3, [r7, #28]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01b      	beq.n	80035a2 <USB_DeactivateEndpoint+0x1da>
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003580:	837b      	strh	r3, [r7, #26]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	8b7b      	ldrh	r3, [r7, #26]
 800358e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800359a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800359e:	b29b      	uxth	r3, r3
 80035a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b8:	833b      	strh	r3, [r7, #24]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	441a      	add	r2, r3
 80035c4:	8b3b      	ldrh	r3, [r7, #24]
 80035c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f0:	82fb      	strh	r3, [r7, #22]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	441a      	add	r2, r3
 80035fc:	8afb      	ldrh	r3, [r7, #22]
 80035fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360e:	b29b      	uxth	r3, r3
 8003610:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003628:	82bb      	strh	r3, [r7, #20]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	8abb      	ldrh	r3, [r7, #20]
 8003636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800363a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	b29b      	uxth	r3, r3
 8003648:	8013      	strh	r3, [r2, #0]
 800364a:	e0a3      	b.n	8003794 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800365a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800365c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01b      	beq.n	800369c <USB_DeactivateEndpoint+0x2d4>
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	441a      	add	r2, r3
 8003686:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800368c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	b29b      	uxth	r3, r3
 800369a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80036aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <USB_DeactivateEndpoint+0x324>
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	441a      	add	r2, r3
 80036d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	441a      	add	r2, r3
 800370e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800373a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800374c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003758:	b29b      	uxth	r3, r3
 800375a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	847b      	strh	r3, [r7, #34]	; 0x22
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003790:	b29b      	uxth	r3, r3
 8003792:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3734      	adds	r7, #52	; 0x34
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b0c4      	sub	sp, #272	; 0x110
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	6018      	str	r0, [r3, #0]
 80037aa:	463b      	mov	r3, r7
 80037ac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037ae:	463b      	mov	r3, r7
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	785b      	ldrb	r3, [r3, #1]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	f040 8557 	bne.w	8004268 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80037ba:	463b      	mov	r3, r7
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699a      	ldr	r2, [r3, #24]
 80037c0:	463b      	mov	r3, r7
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d905      	bls.n	80037d6 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80037ca:	463b      	mov	r3, r7
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80037d4:	e004      	b.n	80037e0 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80037d6:	463b      	mov	r3, r7
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80037e0:	463b      	mov	r3, r7
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	7b1b      	ldrb	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d12c      	bne.n	8003844 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037ea:	463b      	mov	r3, r7
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6959      	ldr	r1, [r3, #20]
 80037f0:	463b      	mov	r3, r7
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	88da      	ldrh	r2, [r3, #6]
 80037f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	1d38      	adds	r0, r7, #4
 80037fe:	6800      	ldr	r0, [r0, #0]
 8003800:	f001 fa2c 	bl	8004c5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	1d3b      	adds	r3, r7, #4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003812:	b29b      	uxth	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	4413      	add	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	463b      	mov	r3, r7
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	011a      	lsls	r2, r3, #4
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4413      	add	r3, r2
 8003828:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800382c:	f107 0310 	add.w	r3, r7, #16
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003836:	b29a      	uxth	r2, r3
 8003838:	f107 0310 	add.w	r3, r7, #16
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	f000 bcdd 	b.w	80041fe <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003844:	463b      	mov	r3, r7
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	78db      	ldrb	r3, [r3, #3]
 800384a:	2b02      	cmp	r3, #2
 800384c:	f040 8347 	bne.w	8003ede <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8003850:	463b      	mov	r3, r7
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a1a      	ldr	r2, [r3, #32]
 8003856:	463b      	mov	r3, r7
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	f240 82eb 	bls.w	8003e38 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003862:	1d3b      	adds	r3, r7, #4
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	463b      	mov	r3, r7
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003880:	1d3b      	adds	r3, r7, #4
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	463b      	mov	r3, r7
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	441a      	add	r2, r3
 800388e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800389a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800389e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80038a6:	463b      	mov	r3, r7
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6a1a      	ldr	r2, [r3, #32]
 80038ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b0:	1ad2      	subs	r2, r2, r3
 80038b2:	463b      	mov	r3, r7
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80038b8:	1d3b      	adds	r3, r7, #4
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	463b      	mov	r3, r7
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 8159 	beq.w	8003b86 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
 80038da:	463b      	mov	r3, r7
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	785b      	ldrb	r3, [r3, #1]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d164      	bne.n	80039ae <USB_EPStartXfer+0x20e>
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	461a      	mov	r2, r3
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	4413      	add	r3, r2
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fc:	463b      	mov	r3, r7
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	011a      	lsls	r2, r3, #4
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	4413      	add	r3, r2
 8003908:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800390c:	62bb      	str	r3, [r7, #40]	; 0x28
 800390e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d112      	bne.n	800393c <USB_EPStartXfer+0x19c>
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003920:	b29a      	uxth	r2, r3
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	e054      	b.n	80039e6 <USB_EPStartXfer+0x246>
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	2b3e      	cmp	r3, #62	; 0x3e
 8003942:	d817      	bhi.n	8003974 <USB_EPStartXfer+0x1d4>
 8003944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800394e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d004      	beq.n	8003964 <USB_EPStartXfer+0x1c4>
 800395a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800395e:	3301      	adds	r3, #1
 8003960:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003968:	b29b      	uxth	r3, r3
 800396a:	029b      	lsls	r3, r3, #10
 800396c:	b29a      	uxth	r2, r3
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	801a      	strh	r2, [r3, #0]
 8003972:	e038      	b.n	80039e6 <USB_EPStartXfer+0x246>
 8003974:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800397e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <USB_EPStartXfer+0x1f4>
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800398e:	3b01      	subs	r3, #1
 8003990:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003998:	b29b      	uxth	r3, r3
 800399a:	029b      	lsls	r3, r3, #10
 800399c:	b29b      	uxth	r3, r3
 800399e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	801a      	strh	r2, [r3, #0]
 80039ac:	e01b      	b.n	80039e6 <USB_EPStartXfer+0x246>
 80039ae:	463b      	mov	r3, r7
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d116      	bne.n	80039e6 <USB_EPStartXfer+0x246>
 80039b8:	1d3b      	adds	r3, r7, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	4413      	add	r3, r2
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ca:	463b      	mov	r3, r7
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	011a      	lsls	r2, r3, #4
 80039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d4:	4413      	add	r3, r2
 80039d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039da:	633b      	str	r3, [r7, #48]	; 0x30
 80039dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039e6:	463b      	mov	r3, r7
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	895b      	ldrh	r3, [r3, #10]
 80039ec:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039f0:	463b      	mov	r3, r7
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6959      	ldr	r1, [r3, #20]
 80039f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a00:	1d38      	adds	r0, r7, #4
 8003a02:	6800      	ldr	r0, [r0, #0]
 8003a04:	f001 f92a 	bl	8004c5c <USB_WritePMA>
            ep->xfer_buff += len;
 8003a08:	463b      	mov	r3, r7
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a12:	441a      	add	r2, r3
 8003a14:	463b      	mov	r3, r7
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	463b      	mov	r3, r7
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d909      	bls.n	8003a3e <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	463b      	mov	r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	621a      	str	r2, [r3, #32]
 8003a3c:	e008      	b.n	8003a50 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003a3e:	463b      	mov	r3, r7
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003a48:	463b      	mov	r3, r7
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a50:	463b      	mov	r3, r7
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d164      	bne.n	8003b24 <USB_EPStartXfer+0x384>
 8003a5a:	1d3b      	adds	r3, r7, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	463b      	mov	r3, r7
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	011a      	lsls	r2, r3, #4
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a82:	61bb      	str	r3, [r7, #24]
 8003a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d112      	bne.n	8003ab2 <USB_EPStartXfer+0x312>
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e057      	b.n	8003b62 <USB_EPStartXfer+0x3c2>
 8003ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab6:	2b3e      	cmp	r3, #62	; 0x3e
 8003ab8:	d817      	bhi.n	8003aea <USB_EPStartXfer+0x34a>
 8003aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d004      	beq.n	8003ada <USB_EPStartXfer+0x33a>
 8003ad0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ada:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	801a      	strh	r2, [r3, #0]
 8003ae8:	e03b      	b.n	8003b62 <USB_EPStartXfer+0x3c2>
 8003aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <USB_EPStartXfer+0x36a>
 8003b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b04:	3b01      	subs	r3, #1
 8003b06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	029b      	lsls	r3, r3, #10
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	e01e      	b.n	8003b62 <USB_EPStartXfer+0x3c2>
 8003b24:	463b      	mov	r3, r7
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	785b      	ldrb	r3, [r3, #1]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d119      	bne.n	8003b62 <USB_EPStartXfer+0x3c2>
 8003b2e:	1d3b      	adds	r3, r7, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
 8003b34:	1d3b      	adds	r3, r7, #4
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	4413      	add	r3, r2
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	463b      	mov	r3, r7
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	011a      	lsls	r2, r3, #4
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b62:	463b      	mov	r3, r7
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	891b      	ldrh	r3, [r3, #8]
 8003b68:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6959      	ldr	r1, [r3, #20]
 8003b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b7c:	1d38      	adds	r0, r7, #4
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	f001 f86c 	bl	8004c5c <USB_WritePMA>
 8003b84:	e33b      	b.n	80041fe <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b86:	463b      	mov	r3, r7
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	785b      	ldrb	r3, [r3, #1]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d164      	bne.n	8003c5a <USB_EPStartXfer+0x4ba>
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b96:	1d3b      	adds	r3, r7, #4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba4:	4413      	add	r3, r2
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	463b      	mov	r3, r7
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	011a      	lsls	r2, r3, #4
 8003bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d112      	bne.n	8003be8 <USB_EPStartXfer+0x448>
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd4:	881b      	ldrh	r3, [r3, #0]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	e057      	b.n	8003c98 <USB_EPStartXfer+0x4f8>
 8003be8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bec:	2b3e      	cmp	r3, #62	; 0x3e
 8003bee:	d817      	bhi.n	8003c20 <USB_EPStartXfer+0x480>
 8003bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d004      	beq.n	8003c10 <USB_EPStartXfer+0x470>
 8003c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	801a      	strh	r2, [r3, #0]
 8003c1e:	e03b      	b.n	8003c98 <USB_EPStartXfer+0x4f8>
 8003c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <USB_EPStartXfer+0x4a0>
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	029b      	lsls	r3, r3, #10
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	e01e      	b.n	8003c98 <USB_EPStartXfer+0x4f8>
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	785b      	ldrb	r3, [r3, #1]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d119      	bne.n	8003c98 <USB_EPStartXfer+0x4f8>
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	657b      	str	r3, [r7, #84]	; 0x54
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c78:	4413      	add	r3, r2
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7c:	463b      	mov	r3, r7
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	011a      	lsls	r2, r3, #4
 8003c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c86:	4413      	add	r3, r2
 8003c88:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c98:	463b      	mov	r3, r7
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	891b      	ldrh	r3, [r3, #8]
 8003c9e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6959      	ldr	r1, [r3, #20]
 8003ca8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003cb2:	1d38      	adds	r0, r7, #4
 8003cb4:	6800      	ldr	r0, [r0, #0]
 8003cb6:	f000 ffd1 	bl	8004c5c <USB_WritePMA>
            ep->xfer_buff += len;
 8003cba:	463b      	mov	r3, r7
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cc4:	441a      	add	r2, r3
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003ccc:	463b      	mov	r3, r7
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6a1a      	ldr	r2, [r3, #32]
 8003cd2:	463b      	mov	r3, r7
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d909      	bls.n	8003cf0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003cdc:	463b      	mov	r3, r7
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce6:	1ad2      	subs	r2, r2, r3
 8003ce8:	463b      	mov	r3, r7
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	621a      	str	r2, [r3, #32]
 8003cee:	e008      	b.n	8003d02 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003cfa:	463b      	mov	r3, r7
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d02:	1d3b      	adds	r3, r7, #4
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
 8003d08:	463b      	mov	r3, r7
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d164      	bne.n	8003ddc <USB_EPStartXfer+0x63c>
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d26:	4413      	add	r3, r2
 8003d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d2a:	463b      	mov	r3, r7
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	011a      	lsls	r2, r3, #4
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	4413      	add	r3, r2
 8003d36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d112      	bne.n	8003d6a <USB_EPStartXfer+0x5ca>
 8003d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	e054      	b.n	8003e14 <USB_EPStartXfer+0x674>
 8003d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d70:	d817      	bhi.n	8003da2 <USB_EPStartXfer+0x602>
 8003d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d004      	beq.n	8003d92 <USB_EPStartXfer+0x5f2>
 8003d88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	029b      	lsls	r3, r3, #10
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	801a      	strh	r2, [r3, #0]
 8003da0:	e038      	b.n	8003e14 <USB_EPStartXfer+0x674>
 8003da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d104      	bne.n	8003dc2 <USB_EPStartXfer+0x622>
 8003db8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	029b      	lsls	r3, r3, #10
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e01b      	b.n	8003e14 <USB_EPStartXfer+0x674>
 8003ddc:	463b      	mov	r3, r7
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d116      	bne.n	8003e14 <USB_EPStartXfer+0x674>
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	4413      	add	r3, r2
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	463b      	mov	r3, r7
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	011a      	lsls	r2, r3, #4
 8003e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e02:	4413      	add	r3, r2
 8003e04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e08:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e14:	463b      	mov	r3, r7
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	895b      	ldrh	r3, [r3, #10]
 8003e1a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e1e:	463b      	mov	r3, r7
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6959      	ldr	r1, [r3, #20]
 8003e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e2e:	1d38      	adds	r0, r7, #4
 8003e30:	6800      	ldr	r0, [r0, #0]
 8003e32:	f000 ff13 	bl	8004c5c <USB_WritePMA>
 8003e36:	e1e2      	b.n	80041fe <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003e38:	463b      	mov	r3, r7
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	463b      	mov	r3, r7
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	463b      	mov	r3, r7
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e9a:	4413      	add	r3, r2
 8003e9c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	011a      	lsls	r2, r3, #4
 8003ea6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003eba:	463b      	mov	r3, r7
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	891b      	ldrh	r3, [r3, #8]
 8003ec0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6959      	ldr	r1, [r3, #20]
 8003eca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003ed4:	1d38      	adds	r0, r7, #4
 8003ed6:	6800      	ldr	r0, [r0, #0]
 8003ed8:	f000 fec0 	bl	8004c5c <USB_WritePMA>
 8003edc:	e18f      	b.n	80041fe <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 808f 	beq.w	8004018 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f00:	463b      	mov	r3, r7
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d164      	bne.n	8003fd4 <USB_EPStartXfer+0x834>
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	673b      	str	r3, [r7, #112]	; 0x70
 8003f10:	1d3b      	adds	r3, r7, #4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f1e:	4413      	add	r3, r2
 8003f20:	673b      	str	r3, [r7, #112]	; 0x70
 8003f22:	463b      	mov	r3, r7
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	011a      	lsls	r2, r3, #4
 8003f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d112      	bne.n	8003f62 <USB_EPStartXfer+0x7c2>
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4a:	801a      	strh	r2, [r3, #0]
 8003f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	e054      	b.n	800400c <USB_EPStartXfer+0x86c>
 8003f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f66:	2b3e      	cmp	r3, #62	; 0x3e
 8003f68:	d817      	bhi.n	8003f9a <USB_EPStartXfer+0x7fa>
 8003f6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <USB_EPStartXfer+0x7ea>
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	3301      	adds	r3, #1
 8003f86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	029b      	lsls	r3, r3, #10
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f96:	801a      	strh	r2, [r3, #0]
 8003f98:	e038      	b.n	800400c <USB_EPStartXfer+0x86c>
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa8:	f003 031f 	and.w	r3, r3, #31
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <USB_EPStartXfer+0x81a>
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	029b      	lsls	r3, r3, #10
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	801a      	strh	r2, [r3, #0]
 8003fd2:	e01b      	b.n	800400c <USB_EPStartXfer+0x86c>
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d116      	bne.n	800400c <USB_EPStartXfer+0x86c>
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	4413      	add	r3, r2
 8003fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff0:	463b      	mov	r3, r7
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	011a      	lsls	r2, r3, #4
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004000:	677b      	str	r3, [r7, #116]	; 0x74
 8004002:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004006:	b29a      	uxth	r2, r3
 8004008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800400a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800400c:	463b      	mov	r3, r7
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	895b      	ldrh	r3, [r3, #10]
 8004012:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004016:	e097      	b.n	8004148 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004018:	463b      	mov	r3, r7
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d168      	bne.n	80040f4 <USB_EPStartXfer+0x954>
 8004022:	1d3b      	adds	r3, r7, #4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800403a:	4413      	add	r3, r2
 800403c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	011a      	lsls	r2, r3, #4
 8004048:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800404c:	4413      	add	r3, r2
 800404e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d112      	bne.n	8004082 <USB_EPStartXfer+0x8e2>
 800405c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004066:	b29a      	uxth	r2, r3
 8004068:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407a:	b29a      	uxth	r2, r3
 800407c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e05d      	b.n	800413e <USB_EPStartXfer+0x99e>
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004086:	2b3e      	cmp	r3, #62	; 0x3e
 8004088:	d817      	bhi.n	80040ba <USB_EPStartXfer+0x91a>
 800408a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408e:	085b      	lsrs	r3, r3, #1
 8004090:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	d004      	beq.n	80040aa <USB_EPStartXfer+0x90a>
 80040a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040a4:	3301      	adds	r3, #1
 80040a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	029b      	lsls	r3, r3, #10
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e041      	b.n	800413e <USB_EPStartXfer+0x99e>
 80040ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d104      	bne.n	80040da <USB_EPStartXfer+0x93a>
 80040d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040d4:	3b01      	subs	r3, #1
 80040d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80040da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80040de:	b29b      	uxth	r3, r3
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	e024      	b.n	800413e <USB_EPStartXfer+0x99e>
 80040f4:	463b      	mov	r3, r7
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d11f      	bne.n	800413e <USB_EPStartXfer+0x99e>
 80040fe:	1d3b      	adds	r3, r7, #4
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004116:	4413      	add	r3, r2
 8004118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800411c:	463b      	mov	r3, r7
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	011a      	lsls	r2, r3, #4
 8004124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004128:	4413      	add	r3, r2
 800412a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800412e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004136:	b29a      	uxth	r2, r3
 8004138:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800413c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800413e:	463b      	mov	r3, r7
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	891b      	ldrh	r3, [r3, #8]
 8004144:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6959      	ldr	r1, [r3, #20]
 800414e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004152:	b29b      	uxth	r3, r3
 8004154:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004158:	1d38      	adds	r0, r7, #4
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	f000 fd7e 	bl	8004c5c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004160:	463b      	mov	r3, r7
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d122      	bne.n	80041b0 <USB_EPStartXfer+0xa10>
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	463b      	mov	r3, r7
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	463b      	mov	r3, r7
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]
 80041ae:	e026      	b.n	80041fe <USB_EPStartXfer+0xa5e>
 80041b0:	463b      	mov	r3, r7
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	785b      	ldrb	r3, [r3, #1]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d121      	bne.n	80041fe <USB_EPStartXfer+0xa5e>
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80041d8:	1d3b      	adds	r3, r7, #4
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	463b      	mov	r3, r7
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	441a      	add	r2, r3
 80041e6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80041ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	463b      	mov	r3, r7
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	b29b      	uxth	r3, r3
 8004210:	f107 020e 	add.w	r2, r7, #14
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421c:	8013      	strh	r3, [r2, #0]
 800421e:	f107 030e 	add.w	r3, r7, #14
 8004222:	f107 020e 	add.w	r2, r7, #14
 8004226:	8812      	ldrh	r2, [r2, #0]
 8004228:	f082 0210 	eor.w	r2, r2, #16
 800422c:	801a      	strh	r2, [r3, #0]
 800422e:	f107 030e 	add.w	r3, r7, #14
 8004232:	f107 020e 	add.w	r2, r7, #14
 8004236:	8812      	ldrh	r2, [r2, #0]
 8004238:	f082 0220 	eor.w	r2, r2, #32
 800423c:	801a      	strh	r2, [r3, #0]
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	463b      	mov	r3, r7
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	441a      	add	r2, r3
 800424c:	f107 030e 	add.w	r3, r7, #14
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800425e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004262:	b29b      	uxth	r3, r3
 8004264:	8013      	strh	r3, [r2, #0]
 8004266:	e3b5      	b.n	80049d4 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004268:	463b      	mov	r3, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	7b1b      	ldrb	r3, [r3, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 8090 	bne.w	8004394 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004274:	463b      	mov	r3, r7
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	463b      	mov	r3, r7
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d90e      	bls.n	80042a2 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004284:	463b      	mov	r3, r7
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699a      	ldr	r2, [r3, #24]
 8004294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004298:	1ad2      	subs	r2, r2, r3
 800429a:	463b      	mov	r3, r7
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	619a      	str	r2, [r3, #24]
 80042a0:	e008      	b.n	80042b4 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 80042a2:	463b      	mov	r3, r7
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 80042ac:	463b      	mov	r3, r7
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80042b4:	1d3b      	adds	r3, r7, #4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042cc:	4413      	add	r3, r2
 80042ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042d2:	463b      	mov	r3, r7
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	011a      	lsls	r2, r3, #4
 80042da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80042de:	4413      	add	r3, r2
 80042e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d116      	bne.n	800431e <USB_EPStartXfer+0xb7e>
 80042f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004302:	801a      	strh	r2, [r3, #0]
 8004304:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004314:	b29a      	uxth	r2, r3
 8004316:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	e32c      	b.n	8004978 <USB_EPStartXfer+0x11d8>
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	2b3e      	cmp	r3, #62	; 0x3e
 8004324:	d818      	bhi.n	8004358 <USB_EPStartXfer+0xbb8>
 8004326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d004      	beq.n	8004346 <USB_EPStartXfer+0xba6>
 800433c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004340:	3301      	adds	r3, #1
 8004342:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004346:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800434a:	b29b      	uxth	r3, r3
 800434c:	029b      	lsls	r3, r3, #10
 800434e:	b29a      	uxth	r2, r3
 8004350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	e30f      	b.n	8004978 <USB_EPStartXfer+0x11d8>
 8004358:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <USB_EPStartXfer+0xbd8>
 800436e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004372:	3b01      	subs	r3, #1
 8004374:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004378:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800437c:	b29b      	uxth	r3, r3
 800437e:	029b      	lsls	r3, r3, #10
 8004380:	b29b      	uxth	r3, r3
 8004382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800438a:	b29a      	uxth	r2, r3
 800438c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004390:	801a      	strh	r2, [r3, #0]
 8004392:	e2f1      	b.n	8004978 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004394:	463b      	mov	r3, r7
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	78db      	ldrb	r3, [r3, #3]
 800439a:	2b02      	cmp	r3, #2
 800439c:	f040 818f 	bne.w	80046be <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80043a0:	463b      	mov	r3, r7
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d175      	bne.n	8004496 <USB_EPStartXfer+0xcf6>
 80043aa:	1d3b      	adds	r3, r7, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043c2:	4413      	add	r3, r2
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c8:	463b      	mov	r3, r7
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	011a      	lsls	r2, r3, #4
 80043d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043d4:	4413      	add	r3, r2
 80043d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043de:	463b      	mov	r3, r7
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d116      	bne.n	8004416 <USB_EPStartXfer+0xc76>
 80043e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043fa:	801a      	strh	r2, [r3, #0]
 80043fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800440c:	b29a      	uxth	r2, r3
 800440e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004412:	801a      	strh	r2, [r3, #0]
 8004414:	e065      	b.n	80044e2 <USB_EPStartXfer+0xd42>
 8004416:	463b      	mov	r3, r7
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b3e      	cmp	r3, #62	; 0x3e
 800441e:	d81a      	bhi.n	8004456 <USB_EPStartXfer+0xcb6>
 8004420:	463b      	mov	r3, r7
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800442c:	463b      	mov	r3, r7
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d004      	beq.n	8004444 <USB_EPStartXfer+0xca4>
 800443a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800443e:	3301      	adds	r3, #1
 8004440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004444:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004448:	b29b      	uxth	r3, r3
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	b29a      	uxth	r2, r3
 800444e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	e045      	b.n	80044e2 <USB_EPStartXfer+0xd42>
 8004456:	463b      	mov	r3, r7
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	095b      	lsrs	r3, r3, #5
 800445e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004462:	463b      	mov	r3, r7
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <USB_EPStartXfer+0xcda>
 8004470:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004474:	3b01      	subs	r3, #1
 8004476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800447a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800447e:	b29b      	uxth	r3, r3
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	b29b      	uxth	r3, r3
 8004484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004492:	801a      	strh	r2, [r3, #0]
 8004494:	e025      	b.n	80044e2 <USB_EPStartXfer+0xd42>
 8004496:	463b      	mov	r3, r7
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	785b      	ldrb	r3, [r3, #1]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d120      	bne.n	80044e2 <USB_EPStartXfer+0xd42>
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044b8:	4413      	add	r3, r2
 80044ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044be:	463b      	mov	r3, r7
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	011a      	lsls	r2, r3, #4
 80044c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ca:	4413      	add	r3, r2
 80044cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80044d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044d4:	463b      	mov	r3, r7
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	b29a      	uxth	r2, r3
 80044dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	1d3b      	adds	r3, r7, #4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ea:	463b      	mov	r3, r7
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d175      	bne.n	80045e0 <USB_EPStartXfer+0xe40>
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004504:	b29b      	uxth	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800450c:	4413      	add	r3, r2
 800450e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004512:	463b      	mov	r3, r7
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	011a      	lsls	r2, r3, #4
 800451a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800451e:	4413      	add	r3, r2
 8004520:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004528:	463b      	mov	r3, r7
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d116      	bne.n	8004560 <USB_EPStartXfer+0xdc0>
 8004532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004536:	881b      	ldrh	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800453e:	b29a      	uxth	r2, r3
 8004540:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004544:	801a      	strh	r2, [r3, #0]
 8004546:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004556:	b29a      	uxth	r2, r3
 8004558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800455c:	801a      	strh	r2, [r3, #0]
 800455e:	e061      	b.n	8004624 <USB_EPStartXfer+0xe84>
 8004560:	463b      	mov	r3, r7
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b3e      	cmp	r3, #62	; 0x3e
 8004568:	d81a      	bhi.n	80045a0 <USB_EPStartXfer+0xe00>
 800456a:	463b      	mov	r3, r7
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	085b      	lsrs	r3, r3, #1
 8004572:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004576:	463b      	mov	r3, r7
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d004      	beq.n	800458e <USB_EPStartXfer+0xdee>
 8004584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004588:	3301      	adds	r3, #1
 800458a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	b29b      	uxth	r3, r3
 8004594:	029b      	lsls	r3, r3, #10
 8004596:	b29a      	uxth	r2, r3
 8004598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	e041      	b.n	8004624 <USB_EPStartXfer+0xe84>
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045ac:	463b      	mov	r3, r7
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <USB_EPStartXfer+0xe24>
 80045ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045be:	3b01      	subs	r3, #1
 80045c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	e021      	b.n	8004624 <USB_EPStartXfer+0xe84>
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d11c      	bne.n	8004624 <USB_EPStartXfer+0xe84>
 80045ea:	1d3b      	adds	r3, r7, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045fa:	4413      	add	r3, r2
 80045fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004600:	463b      	mov	r3, r7
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	011a      	lsls	r2, r3, #4
 8004608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800460c:	4413      	add	r3, r2
 800460e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004616:	463b      	mov	r3, r7
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	b29a      	uxth	r2, r3
 800461e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004622:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004624:	463b      	mov	r3, r7
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 81a4 	beq.w	8004978 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	463b      	mov	r3, r7
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004644:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <USB_EPStartXfer+0xebc>
 8004650:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800465c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 8187 	bne.w	8004978 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800466a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 8180 	bne.w	8004978 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004678:	1d3b      	adds	r3, r7, #4
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	463b      	mov	r3, r7
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004696:	1d3b      	adds	r3, r7, #4
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	463b      	mov	r3, r7
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	441a      	add	r2, r3
 80046a4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
 80046bc:	e15c      	b.n	8004978 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	78db      	ldrb	r3, [r3, #3]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 8155 	bne.w	8004974 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80046ca:	463b      	mov	r3, r7
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699a      	ldr	r2, [r3, #24]
 80046d0:	463b      	mov	r3, r7
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d90e      	bls.n	80046f8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 80046da:	463b      	mov	r3, r7
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80046e4:	463b      	mov	r3, r7
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ee:	1ad2      	subs	r2, r2, r3
 80046f0:	463b      	mov	r3, r7
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	619a      	str	r2, [r3, #24]
 80046f6:	e008      	b.n	800470a <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80046f8:	463b      	mov	r3, r7
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 8004702:	463b      	mov	r3, r7
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2200      	movs	r2, #0
 8004708:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800470a:	463b      	mov	r3, r7
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d16f      	bne.n	80047f4 <USB_EPStartXfer+0x1054>
 8004714:	1d3b      	adds	r3, r7, #4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004724:	b29b      	uxth	r3, r3
 8004726:	461a      	mov	r2, r3
 8004728:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800472c:	4413      	add	r3, r2
 800472e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004732:	463b      	mov	r3, r7
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	011a      	lsls	r2, r3, #4
 800473a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800473e:	4413      	add	r3, r2
 8004740:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d116      	bne.n	800477e <USB_EPStartXfer+0xfde>
 8004750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800475c:	b29a      	uxth	r2, r3
 800475e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	b29b      	uxth	r3, r3
 800476c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004774:	b29a      	uxth	r2, r3
 8004776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800477a:	801a      	strh	r2, [r3, #0]
 800477c:	e05f      	b.n	800483e <USB_EPStartXfer+0x109e>
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004782:	2b3e      	cmp	r3, #62	; 0x3e
 8004784:	d818      	bhi.n	80047b8 <USB_EPStartXfer+0x1018>
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004790:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d004      	beq.n	80047a6 <USB_EPStartXfer+0x1006>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	3301      	adds	r3, #1
 80047a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	029b      	lsls	r3, r3, #10
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	e042      	b.n	800483e <USB_EPStartXfer+0x109e>
 80047b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047bc:	095b      	lsrs	r3, r3, #5
 80047be:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c6:	f003 031f 	and.w	r3, r3, #31
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d104      	bne.n	80047d8 <USB_EPStartXfer+0x1038>
 80047ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d2:	3b01      	subs	r3, #1
 80047d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047dc:	b29b      	uxth	r3, r3
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	e024      	b.n	800483e <USB_EPStartXfer+0x109e>
 80047f4:	463b      	mov	r3, r7
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d11f      	bne.n	800483e <USB_EPStartXfer+0x109e>
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004806:	1d3b      	adds	r3, r7, #4
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004816:	4413      	add	r3, r2
 8004818:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800481c:	463b      	mov	r3, r7
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	011a      	lsls	r2, r3, #4
 8004824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004828:	4413      	add	r3, r2
 800482a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800482e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	b29a      	uxth	r2, r3
 8004838:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004846:	463b      	mov	r3, r7
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	785b      	ldrb	r3, [r3, #1]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d16f      	bne.n	8004930 <USB_EPStartXfer+0x1190>
 8004850:	1d3b      	adds	r3, r7, #4
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004858:	1d3b      	adds	r3, r7, #4
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004860:	b29b      	uxth	r3, r3
 8004862:	461a      	mov	r2, r3
 8004864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004868:	4413      	add	r3, r2
 800486a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800486e:	463b      	mov	r3, r7
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	011a      	lsls	r2, r3, #4
 8004876:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800487a:	4413      	add	r3, r2
 800487c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004880:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d116      	bne.n	80048ba <USB_EPStartXfer+0x111a>
 800488c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004898:	b29a      	uxth	r2, r3
 800489a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048b6:	801a      	strh	r2, [r3, #0]
 80048b8:	e05e      	b.n	8004978 <USB_EPStartXfer+0x11d8>
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	2b3e      	cmp	r3, #62	; 0x3e
 80048c0:	d818      	bhi.n	80048f4 <USB_EPStartXfer+0x1154>
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d004      	beq.n	80048e2 <USB_EPStartXfer+0x1142>
 80048d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048dc:	3301      	adds	r3, #1
 80048de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	e041      	b.n	8004978 <USB_EPStartXfer+0x11d8>
 80048f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2b00      	cmp	r3, #0
 8004908:	d104      	bne.n	8004914 <USB_EPStartXfer+0x1174>
 800490a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800490e:	3b01      	subs	r3, #1
 8004910:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004918:	b29b      	uxth	r3, r3
 800491a:	029b      	lsls	r3, r3, #10
 800491c:	b29b      	uxth	r3, r3
 800491e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004926:	b29a      	uxth	r2, r3
 8004928:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	e023      	b.n	8004978 <USB_EPStartXfer+0x11d8>
 8004930:	463b      	mov	r3, r7
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	785b      	ldrb	r3, [r3, #1]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d11e      	bne.n	8004978 <USB_EPStartXfer+0x11d8>
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004942:	b29b      	uxth	r3, r3
 8004944:	461a      	mov	r2, r3
 8004946:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800494a:	4413      	add	r3, r2
 800494c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004950:	463b      	mov	r3, r7
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	011a      	lsls	r2, r3, #4
 8004958:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800495c:	4413      	add	r3, r2
 800495e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004962:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004966:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496a:	b29a      	uxth	r2, r3
 800496c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004970:	801a      	strh	r2, [r3, #0]
 8004972:	e001      	b.n	8004978 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e02e      	b.n	80049d6 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	463b      	mov	r3, r7
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800498e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004992:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004996:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800499a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800499e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80049ae:	1d3b      	adds	r3, r7, #4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	463b      	mov	r3, r7
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d020      	beq.n	8004a34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a08:	81bb      	strh	r3, [r7, #12]
 8004a0a:	89bb      	ldrh	r3, [r7, #12]
 8004a0c:	f083 0310 	eor.w	r3, r3, #16
 8004a10:	81bb      	strh	r3, [r7, #12]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	89bb      	ldrh	r3, [r7, #12]
 8004a1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	8013      	strh	r3, [r2, #0]
 8004a32:	e01f      	b.n	8004a74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	81fb      	strh	r3, [r7, #14]
 8004a4c:	89fb      	ldrh	r3, [r7, #14]
 8004a4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a52:	81fb      	strh	r3, [r7, #14]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	441a      	add	r2, r3
 8004a5e:	89fb      	ldrh	r3, [r7, #14]
 8004a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	7b1b      	ldrb	r3, [r3, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 809d 	bne.w	8004bce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d04c      	beq.n	8004b36 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	823b      	strh	r3, [r7, #16]
 8004aaa:	8a3b      	ldrh	r3, [r7, #16]
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <USB_EPClearStall+0x6c>
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	81fb      	strh	r3, [r7, #14]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	78db      	ldrb	r3, [r3, #3]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d06c      	beq.n	8004bce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0a:	81bb      	strh	r3, [r7, #12]
 8004b0c:	89bb      	ldrh	r3, [r7, #12]
 8004b0e:	f083 0320 	eor.w	r3, r3, #32
 8004b12:	81bb      	strh	r3, [r7, #12]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	89bb      	ldrh	r3, [r7, #12]
 8004b20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	8013      	strh	r3, [r2, #0]
 8004b34:	e04b      	b.n	8004bce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	82fb      	strh	r3, [r7, #22]
 8004b44:	8afb      	ldrh	r3, [r7, #22]
 8004b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01b      	beq.n	8004b86 <USB_EPClearStall+0x106>
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	82bb      	strh	r3, [r7, #20]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	441a      	add	r2, r3
 8004b70:	8abb      	ldrh	r3, [r7, #20]
 8004b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	827b      	strh	r3, [r7, #18]
 8004b9e:	8a7b      	ldrh	r3, [r7, #18]
 8004ba0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ba4:	827b      	strh	r3, [r7, #18]
 8004ba6:	8a7b      	ldrh	r3, [r7, #18]
 8004ba8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bac:	827b      	strh	r3, [r7, #18]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	8a7b      	ldrh	r3, [r7, #18]
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	371c      	adds	r7, #28
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bc80      	pop	{r7}
 8004bd8:	4770      	bx	lr

08004bda <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	460b      	mov	r3, r1
 8004be4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004be6:	78fb      	ldrb	r3, [r7, #3]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bc80      	pop	{r7}
 8004bfe:	4770      	bx	lr

08004c00 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bc80      	pop	{r7}
 8004c26:	4770      	bx	lr

08004c28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr

08004c5c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b08d      	sub	sp, #52	; 0x34
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	80fb      	strh	r3, [r7, #6]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c72:	88bb      	ldrh	r3, [r7, #4]
 8004c74:	3301      	adds	r3, #1
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	005a      	lsls	r2, r3, #1
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c94:	e01e      	b.n	8004cd4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	3301      	adds	r3, #1
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1dd      	bne.n	8004c96 <USB_WritePMA+0x3a>
  }
}
 8004cda:	bf00      	nop
 8004cdc:	3734      	adds	r7, #52	; 0x34
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b08b      	sub	sp, #44	; 0x2c
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	80fb      	strh	r3, [r7, #6]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004cfa:	88bb      	ldrh	r3, [r7, #4]
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	005a      	lsls	r2, r3, #1
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d16:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1c:	e01b      	b.n	8004d56 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	3302      	adds	r3, #2
 8004d2a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	3301      	adds	r3, #1
 8004d38:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	3301      	adds	r3, #1
 8004d48:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	3b01      	subs	r3, #1
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1e0      	bne.n	8004d1e <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d5c:	88bb      	ldrh	r3, [r7, #4]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d007      	beq.n	8004d78 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	b2da      	uxtb	r2, r3
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	701a      	strb	r2, [r3, #0]
  }
}
 8004d78:	bf00      	nop
 8004d7a:	372c      	adds	r7, #44	; 0x2c
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	7c1b      	ldrb	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d115      	bne.n	8004dc6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d9e:	2202      	movs	r2, #2
 8004da0:	2181      	movs	r1, #129	; 0x81
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f004 fbe5 	bl	8009572 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004db2:	2202      	movs	r2, #2
 8004db4:	2101      	movs	r1, #1
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f004 fbdb 	bl	8009572 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004dc4:	e012      	b.n	8004dec <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004dc6:	2340      	movs	r3, #64	; 0x40
 8004dc8:	2202      	movs	r2, #2
 8004dca:	2181      	movs	r1, #129	; 0x81
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f004 fbd0 	bl	8009572 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	2202      	movs	r2, #2
 8004ddc:	2101      	movs	r1, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f004 fbc7 	bl	8009572 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004dec:	2308      	movs	r3, #8
 8004dee:	2203      	movs	r2, #3
 8004df0:	2182      	movs	r1, #130	; 0x82
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f004 fbbd 	bl	8009572 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004dfe:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e02:	f004 fcdd 	bl	80097c0 <USBD_static_malloc>
 8004e06:	4602      	mov	r2, r0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d102      	bne.n	8004e1e <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e026      	b.n	8004e6c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e24:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7c1b      	ldrb	r3, [r3, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e52:	2101      	movs	r1, #1
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f004 fc7d 	bl	8009754 <USBD_LL_PrepareReceive>
 8004e5a:	e007      	b.n	8004e6c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e62:	2340      	movs	r3, #64	; 0x40
 8004e64:	2101      	movs	r1, #1
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f004 fc74 	bl	8009754 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e86:	2181      	movs	r1, #129	; 0x81
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f004 fb98 	bl	80095be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e94:	2101      	movs	r1, #1
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f004 fb91 	bl	80095be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ea4:	2182      	movs	r1, #130	; 0x82
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f004 fb89 	bl	80095be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f004 fc83 	bl	80097d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d039      	beq.n	8004f82 <USBD_CDC_Setup+0x9e>
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d17c      	bne.n	800500c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	88db      	ldrh	r3, [r3, #6]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d029      	beq.n	8004f6e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	da11      	bge.n	8004f48 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f30:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	88d2      	ldrh	r2, [r2, #6]
 8004f36:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f38:	6939      	ldr	r1, [r7, #16]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	88db      	ldrh	r3, [r3, #6]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f001 f9f9 	bl	8006338 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f46:	e068      	b.n	800501a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	785a      	ldrb	r2, [r3, #1]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	88db      	ldrh	r3, [r3, #6]
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f5e:	6939      	ldr	r1, [r7, #16]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	88db      	ldrh	r3, [r3, #6]
 8004f64:	461a      	mov	r2, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f001 fa14 	bl	8006394 <USBD_CtlPrepareRx>
      break;
 8004f6c:	e055      	b.n	800501a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	7850      	ldrb	r0, [r2, #1]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	6839      	ldr	r1, [r7, #0]
 8004f7e:	4798      	blx	r3
      break;
 8004f80:	e04b      	b.n	800501a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b0a      	cmp	r3, #10
 8004f88:	d017      	beq.n	8004fba <USBD_CDC_Setup+0xd6>
 8004f8a:	2b0b      	cmp	r3, #11
 8004f8c:	d029      	beq.n	8004fe2 <USBD_CDC_Setup+0xfe>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d133      	bne.n	8004ffa <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d107      	bne.n	8004fac <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004f9c:	f107 030c 	add.w	r3, r7, #12
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 f9c7 	bl	8006338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004faa:	e02e      	b.n	800500a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 f958 	bl	8006264 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fb8:	e027      	b.n	800500a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d107      	bne.n	8004fd4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004fc4:	f107 030f 	add.w	r3, r7, #15
 8004fc8:	2201      	movs	r2, #1
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f001 f9b3 	bl	8006338 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fd2:	e01a      	b.n	800500a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004fd4:	6839      	ldr	r1, [r7, #0]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 f944 	bl	8006264 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe0:	e013      	b.n	800500a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d00d      	beq.n	8005008 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 f938 	bl	8006264 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004ff8:	e006      	b.n	8005008 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004ffa:	6839      	ldr	r1, [r7, #0]
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 f931 	bl	8006264 <USBD_CtlError>
          ret = USBD_FAIL;
 8005002:	2302      	movs	r3, #2
 8005004:	75fb      	strb	r3, [r7, #23]
          break;
 8005006:	e000      	b.n	800500a <USBD_CDC_Setup+0x126>
          break;
 8005008:	bf00      	nop
      }
      break;
 800500a:	e006      	b.n	800501a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 f928 	bl	8006264 <USBD_CtlError>
      ret = USBD_FAIL;
 8005014:	2302      	movs	r3, #2
 8005016:	75fb      	strb	r3, [r7, #23]
      break;
 8005018:	bf00      	nop
  }

  return ret;
 800501a:	7dfb      	ldrb	r3, [r7, #23]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005036:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800503e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d03a      	beq.n	80050c0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800504a:	78fa      	ldrb	r2, [r7, #3]
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	440b      	add	r3, r1
 8005058:	331c      	adds	r3, #28
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d029      	beq.n	80050b4 <USBD_CDC_DataIn+0x90>
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	6879      	ldr	r1, [r7, #4]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	331c      	adds	r3, #28
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	78f9      	ldrb	r1, [r7, #3]
 8005074:	68b8      	ldr	r0, [r7, #8]
 8005076:	460b      	mov	r3, r1
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4403      	add	r3, r0
 8005080:	3338      	adds	r3, #56	; 0x38
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	fbb2 f1f3 	udiv	r1, r2, r3
 8005088:	fb03 f301 	mul.w	r3, r3, r1
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d110      	bne.n	80050b4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	331c      	adds	r3, #28
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050a6:	78f9      	ldrb	r1, [r7, #3]
 80050a8:	2300      	movs	r3, #0
 80050aa:	2200      	movs	r2, #0
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f004 fb2e 	bl	800970e <USBD_LL_Transmit>
 80050b2:	e003      	b.n	80050bc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	e000      	b.n	80050c2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80050c0:	2302      	movs	r3, #2
  }
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f004 fb59 	bl	800979a <USBD_LL_GetRxDataSize>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00d      	beq.n	8005116 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800510e:	4611      	mov	r1, r2
 8005110:	4798      	blx	r3

    return USBD_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	e000      	b.n	8005118 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005116:	2302      	movs	r3, #2
  }
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800512e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005136:	2b00      	cmp	r3, #0
 8005138:	d015      	beq.n	8005166 <USBD_CDC_EP0_RxReady+0x46>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005140:	2bff      	cmp	r3, #255	; 0xff
 8005142:	d010      	beq.n	8005166 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005152:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800515a:	b292      	uxth	r2, r2
 800515c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	22ff      	movs	r2, #255	; 0xff
 8005162:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2243      	movs	r2, #67	; 0x43
 800517c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800517e:	4b03      	ldr	r3, [pc, #12]	; (800518c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000094 	.word	0x20000094

08005190 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2243      	movs	r2, #67	; 0x43
 800519c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800519e:	4b03      	ldr	r3, [pc, #12]	; (80051ac <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000050 	.word	0x20000050

080051b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2243      	movs	r2, #67	; 0x43
 80051bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80051be:	4b03      	ldr	r3, [pc, #12]	; (80051cc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	200000d8 	.word	0x200000d8

080051d0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	220a      	movs	r2, #10
 80051dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80051de:	4b03      	ldr	r3, [pc, #12]	; (80051ec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	2000000c 	.word	0x2000000c

080051f0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80051fa:	2302      	movs	r3, #2
 80051fc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005210:	7bfb      	ldrb	r3, [r7, #15]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005230:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800523a:	88fa      	ldrh	r2, [r7, #6]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005282:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01c      	beq.n	80052c8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005294:	2b00      	cmp	r3, #0
 8005296:	d115      	bne.n	80052c4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2181      	movs	r1, #129	; 0x81
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f004 fa27 	bl	800970e <USBD_LL_Transmit>

      return USBD_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e002      	b.n	80052ca <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d017      	beq.n	800531c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7c1b      	ldrb	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f004 fa27 	bl	8009754 <USBD_LL_PrepareReceive>
 8005306:	e007      	b.n	8005318 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	2101      	movs	r1, #1
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f004 fa1e 	bl	8009754 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005326:	b580      	push	{r7, lr}
 8005328:	b084      	sub	sp, #16
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	4613      	mov	r3, r2
 8005332:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800533a:	2302      	movs	r3, #2
 800533c:	e01a      	b.n	8005374 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	79fa      	ldrb	r2, [r7, #7]
 800536a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f004 f88b 	bl	8009488 <USBD_LL_Init>

  return USBD_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
 800539c:	e001      	b.n	80053a2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800539e:	2302      	movs	r3, #2
 80053a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f004 f8c0 	bl	800953c <USBD_LL_Start>

  return USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bc80      	pop	{r7}
 80053d8:	4770      	bx	lr

080053da <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	460b      	mov	r3, r1
 80053e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053e6:	2302      	movs	r3, #2
 80053e8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00c      	beq.n	800540e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	78fa      	ldrb	r2, [r7, #3]
 80053fe:	4611      	mov	r1, r2
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	78fa      	ldrb	r2, [r7, #3]
 800542e:	4611      	mov	r1, r2
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	4798      	blx	r3

  return USBD_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b082      	sub	sp, #8
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fecb 	bl	80061ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2b01      	cmp	r3, #1
 8005478:	d00c      	beq.n	8005494 <USBD_LL_SetupStage+0x56>
 800547a:	2b01      	cmp	r3, #1
 800547c:	d302      	bcc.n	8005484 <USBD_LL_SetupStage+0x46>
 800547e:	2b02      	cmp	r3, #2
 8005480:	d010      	beq.n	80054a4 <USBD_LL_SetupStage+0x66>
 8005482:	e017      	b.n	80054b4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800548a:	4619      	mov	r1, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f9cb 	bl	8005828 <USBD_StdDevReq>
      break;
 8005492:	e01a      	b.n	80054ca <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fa2d 	bl	80058fc <USBD_StdItfReq>
      break;
 80054a2:	e012      	b.n	80054ca <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fa6b 	bl	8005988 <USBD_StdEPReq>
      break;
 80054b2:	e00a      	b.n	80054ca <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f004 f89a 	bl	80095fc <USBD_LL_StallEP>
      break;
 80054c8:	bf00      	nop
  }

  return USBD_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	460b      	mov	r3, r1
 80054de:	607a      	str	r2, [r7, #4]
 80054e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d14b      	bne.n	8005580 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d134      	bne.n	8005564 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	429a      	cmp	r2, r3
 8005504:	d919      	bls.n	800553a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	1ad2      	subs	r2, r2, r3
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	68da      	ldr	r2, [r3, #12]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800551c:	429a      	cmp	r2, r3
 800551e:	d203      	bcs.n	8005528 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005524:	b29b      	uxth	r3, r3
 8005526:	e002      	b.n	800552e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800552c:	b29b      	uxth	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 ff4c 	bl	80063d0 <USBD_CtlContinueRx>
 8005538:	e038      	b.n	80055ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800554c:	2b03      	cmp	r3, #3
 800554e:	d105      	bne.n	800555c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f000 ff49 	bl	80063f4 <USBD_CtlSendStatus>
 8005562:	e023      	b.n	80055ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800556a:	2b05      	cmp	r3, #5
 800556c:	d11e      	bne.n	80055ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005576:	2100      	movs	r1, #0
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f004 f83f 	bl	80095fc <USBD_LL_StallEP>
 800557e:	e015      	b.n	80055ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00d      	beq.n	80055a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005592:	2b03      	cmp	r3, #3
 8005594:	d108      	bne.n	80055a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	7afa      	ldrb	r2, [r7, #11]
 80055a0:	4611      	mov	r1, r2
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	4798      	blx	r3
 80055a6:	e001      	b.n	80055ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80055a8:	2302      	movs	r3, #2
 80055aa:	e000      	b.n	80055ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3718      	adds	r7, #24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b086      	sub	sp, #24
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	460b      	mov	r3, r1
 80055c0:	607a      	str	r2, [r7, #4]
 80055c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055c4:	7afb      	ldrb	r3, [r7, #11]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d17f      	bne.n	80056ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3314      	adds	r3, #20
 80055ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d15c      	bne.n	8005694 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d915      	bls.n	8005612 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 feb6 	bl	8006370 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005604:	2300      	movs	r3, #0
 8005606:	2200      	movs	r2, #0
 8005608:	2100      	movs	r1, #0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f004 f8a2 	bl	8009754 <USBD_LL_PrepareReceive>
 8005610:	e04e      	b.n	80056b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	6912      	ldr	r2, [r2, #16]
 800561a:	fbb3 f1f2 	udiv	r1, r3, r2
 800561e:	fb02 f201 	mul.w	r2, r2, r1
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11c      	bne.n	8005662 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	689a      	ldr	r2, [r3, #8]
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005630:	429a      	cmp	r2, r3
 8005632:	d316      	bcc.n	8005662 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800563e:	429a      	cmp	r2, r3
 8005640:	d20f      	bcs.n	8005662 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f000 fe92 	bl	8006370 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005654:	2300      	movs	r3, #0
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f004 f87a 	bl	8009754 <USBD_LL_PrepareReceive>
 8005660:	e026      	b.n	80056b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005674:	2b03      	cmp	r3, #3
 8005676:	d105      	bne.n	8005684 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f003 ffb8 	bl	80095fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fec4 	bl	800641a <USBD_CtlReceiveStatus>
 8005692:	e00d      	b.n	80056b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800569a:	2b04      	cmp	r3, #4
 800569c:	d004      	beq.n	80056a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d103      	bne.n	80056b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f003 ffa6 	bl	80095fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d11d      	bne.n	80056f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f7ff fe83 	bl	80053c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056c8:	e015      	b.n	80056f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00d      	beq.n	80056f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d108      	bne.n	80056f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	7afa      	ldrb	r2, [r7, #11]
 80056ea:	4611      	mov	r1, r2
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	4798      	blx	r3
 80056f0:	e001      	b.n	80056f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056f2:	2302      	movs	r3, #2
 80056f4:	e000      	b.n	80056f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005708:	2340      	movs	r3, #64	; 0x40
 800570a:	2200      	movs	r2, #0
 800570c:	2100      	movs	r1, #0
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f003 ff2f 	bl	8009572 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2240      	movs	r2, #64	; 0x40
 8005720:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005724:	2340      	movs	r3, #64	; 0x40
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f003 ff21 	bl	8009572 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2240      	movs	r2, #64	; 0x40
 800573a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6852      	ldr	r2, [r2, #4]
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	4611      	mov	r1, r2
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
  }

  return USBD_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2204      	movs	r2, #4
 80057b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d105      	bne.n	80057e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005800:	2b03      	cmp	r3, #3
 8005802:	d10b      	bne.n	800581c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800583e:	2b20      	cmp	r3, #32
 8005840:	d004      	beq.n	800584c <USBD_StdDevReq+0x24>
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d002      	beq.n	800584c <USBD_StdDevReq+0x24>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <USBD_StdDevReq+0x34>
 800584a:	e04c      	b.n	80058e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	4798      	blx	r3
      break;
 800585a:	e049      	b.n	80058f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	785b      	ldrb	r3, [r3, #1]
 8005860:	2b09      	cmp	r3, #9
 8005862:	d83a      	bhi.n	80058da <USBD_StdDevReq+0xb2>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <USBD_StdDevReq+0x44>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	080058bd 	.word	0x080058bd
 8005870:	080058d1 	.word	0x080058d1
 8005874:	080058db 	.word	0x080058db
 8005878:	080058c7 	.word	0x080058c7
 800587c:	080058db 	.word	0x080058db
 8005880:	0800589f 	.word	0x0800589f
 8005884:	08005895 	.word	0x08005895
 8005888:	080058db 	.word	0x080058db
 800588c:	080058b3 	.word	0x080058b3
 8005890:	080058a9 	.word	0x080058a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f9d4 	bl	8005c44 <USBD_GetDescriptor>
          break;
 800589c:	e022      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800589e:	6839      	ldr	r1, [r7, #0]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fb37 	bl	8005f14 <USBD_SetAddress>
          break;
 80058a6:	e01d      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fb74 	bl	8005f98 <USBD_SetConfig>
          break;
 80058b0:	e018      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058b2:	6839      	ldr	r1, [r7, #0]
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fbfd 	bl	80060b4 <USBD_GetConfig>
          break;
 80058ba:	e013      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fc2c 	bl	800611c <USBD_GetStatus>
          break;
 80058c4:	e00e      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc5a 	bl	8006182 <USBD_SetFeature>
          break;
 80058ce:	e009      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc69 	bl	80061aa <USBD_ClrFeature>
          break;
 80058d8:	e004      	b.n	80058e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fcc1 	bl	8006264 <USBD_CtlError>
          break;
 80058e2:	bf00      	nop
      }
      break;
 80058e4:	e004      	b.n	80058f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fcbb 	bl	8006264 <USBD_CtlError>
      break;
 80058ee:	bf00      	nop
  }

  return ret;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop

080058fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005912:	2b20      	cmp	r3, #32
 8005914:	d003      	beq.n	800591e <USBD_StdItfReq+0x22>
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d001      	beq.n	800591e <USBD_StdItfReq+0x22>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d12a      	bne.n	8005974 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005924:	3b01      	subs	r3, #1
 8005926:	2b02      	cmp	r3, #2
 8005928:	d81d      	bhi.n	8005966 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	889b      	ldrh	r3, [r3, #4]
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d813      	bhi.n	800595c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
 8005942:	4603      	mov	r3, r0
 8005944:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	88db      	ldrh	r3, [r3, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d110      	bne.n	8005970 <USBD_StdItfReq+0x74>
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10d      	bne.n	8005970 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fd4d 	bl	80063f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800595a:	e009      	b.n	8005970 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fc80 	bl	8006264 <USBD_CtlError>
          break;
 8005964:	e004      	b.n	8005970 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fc7b 	bl	8006264 <USBD_CtlError>
          break;
 800596e:	e000      	b.n	8005972 <USBD_StdItfReq+0x76>
          break;
 8005970:	bf00      	nop
      }
      break;
 8005972:	e004      	b.n	800597e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc74 	bl	8006264 <USBD_CtlError>
      break;
 800597c:	bf00      	nop
  }

  return USBD_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	889b      	ldrh	r3, [r3, #4]
 800599a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d004      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0x2a>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <USBD_StdEPReq+0x3a>
 80059b0:	e13d      	b.n	8005c2e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	4798      	blx	r3
      break;
 80059c0:	e13a      	b.n	8005c38 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d10a      	bne.n	80059e4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	4798      	blx	r3
 80059dc:	4603      	mov	r3, r0
 80059de:	73fb      	strb	r3, [r7, #15]

        return ret;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	e12a      	b.n	8005c3a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d03e      	beq.n	8005a6a <USBD_StdEPReq+0xe2>
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d002      	beq.n	80059f6 <USBD_StdEPReq+0x6e>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d070      	beq.n	8005ad6 <USBD_StdEPReq+0x14e>
 80059f4:	e115      	b.n	8005c22 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d002      	beq.n	8005a06 <USBD_StdEPReq+0x7e>
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d015      	beq.n	8005a30 <USBD_StdEPReq+0xa8>
 8005a04:	e02b      	b.n	8005a5e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00c      	beq.n	8005a26 <USBD_StdEPReq+0x9e>
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	2b80      	cmp	r3, #128	; 0x80
 8005a10:	d009      	beq.n	8005a26 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a12:	7bbb      	ldrb	r3, [r7, #14]
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f003 fdf0 	bl	80095fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a1c:	2180      	movs	r1, #128	; 0x80
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f003 fdec 	bl	80095fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a24:	e020      	b.n	8005a68 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fc1b 	bl	8006264 <USBD_CtlError>
              break;
 8005a2e:	e01b      	b.n	8005a68 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	885b      	ldrh	r3, [r3, #2]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10e      	bne.n	8005a56 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005a38:	7bbb      	ldrb	r3, [r7, #14]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <USBD_StdEPReq+0xce>
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d008      	beq.n	8005a56 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	88db      	ldrh	r3, [r3, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f003 fdd3 	bl	80095fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fccc 	bl	80063f4 <USBD_CtlSendStatus>

              break;
 8005a5c:	e004      	b.n	8005a68 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005a5e:	6839      	ldr	r1, [r7, #0]
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fbff 	bl	8006264 <USBD_CtlError>
              break;
 8005a66:	bf00      	nop
          }
          break;
 8005a68:	e0e0      	b.n	8005c2c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d002      	beq.n	8005a7a <USBD_StdEPReq+0xf2>
 8005a74:	2b03      	cmp	r3, #3
 8005a76:	d015      	beq.n	8005aa4 <USBD_StdEPReq+0x11c>
 8005a78:	e026      	b.n	8005ac8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a7a:	7bbb      	ldrb	r3, [r7, #14]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00c      	beq.n	8005a9a <USBD_StdEPReq+0x112>
 8005a80:	7bbb      	ldrb	r3, [r7, #14]
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	d009      	beq.n	8005a9a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f003 fdb6 	bl	80095fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f003 fdb2 	bl	80095fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a98:	e01c      	b.n	8005ad4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fbe1 	bl	8006264 <USBD_CtlError>
              break;
 8005aa2:	e017      	b.n	8005ad4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	885b      	ldrh	r3, [r3, #2]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d112      	bne.n	8005ad2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d004      	beq.n	8005ac0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ab6:	7bbb      	ldrb	r3, [r7, #14]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f003 fdbd 	bl	800963a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fc97 	bl	80063f4 <USBD_CtlSendStatus>
              }
              break;
 8005ac6:	e004      	b.n	8005ad2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fbca 	bl	8006264 <USBD_CtlError>
              break;
 8005ad0:	e000      	b.n	8005ad4 <USBD_StdEPReq+0x14c>
              break;
 8005ad2:	bf00      	nop
          }
          break;
 8005ad4:	e0aa      	b.n	8005c2c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d002      	beq.n	8005ae6 <USBD_StdEPReq+0x15e>
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d032      	beq.n	8005b4a <USBD_StdEPReq+0x1c2>
 8005ae4:	e097      	b.n	8005c16 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <USBD_StdEPReq+0x174>
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d004      	beq.n	8005afc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fbb5 	bl	8006264 <USBD_CtlError>
                break;
 8005afa:	e091      	b.n	8005c20 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	da0b      	bge.n	8005b1c <USBD_StdEPReq+0x194>
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	3310      	adds	r3, #16
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	4413      	add	r3, r2
 8005b18:	3304      	adds	r3, #4
 8005b1a:	e00b      	b.n	8005b34 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4413      	add	r3, r2
 8005b32:	3304      	adds	r3, #4
 8005b34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fbf8 	bl	8006338 <USBD_CtlSendData>
              break;
 8005b48:	e06a      	b.n	8005c20 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da11      	bge.n	8005b76 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	f003 020f 	and.w	r2, r3, #15
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	3318      	adds	r3, #24
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d117      	bne.n	8005b9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fb78 	bl	8006264 <USBD_CtlError>
                  break;
 8005b74:	e054      	b.n	8005c20 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d104      	bne.n	8005b9c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 fb65 	bl	8006264 <USBD_CtlError>
                  break;
 8005b9a:	e041      	b.n	8005c20 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da0b      	bge.n	8005bbc <USBD_StdEPReq+0x234>
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	3310      	adds	r3, #16
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	3304      	adds	r3, #4
 8005bba:	e00b      	b.n	8005bd4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3304      	adds	r3, #4
 8005bd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <USBD_StdEPReq+0x25a>
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	2b80      	cmp	r3, #128	; 0x80
 8005be0:	d103      	bne.n	8005bea <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e00e      	b.n	8005c08 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005bea:	7bbb      	ldrb	r3, [r7, #14]
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f003 fd42 	bl	8009678 <USBD_LL_IsStallEP>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fb92 	bl	8006338 <USBD_CtlSendData>
              break;
 8005c14:	e004      	b.n	8005c20 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fb23 	bl	8006264 <USBD_CtlError>
              break;
 8005c1e:	bf00      	nop
          }
          break;
 8005c20:	e004      	b.n	8005c2c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fb1d 	bl	8006264 <USBD_CtlError>
          break;
 8005c2a:	bf00      	nop
      }
      break;
 8005c2c:	e004      	b.n	8005c38 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fb17 	bl	8006264 <USBD_CtlError>
      break;
 8005c36:	bf00      	nop
  }

  return ret;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	885b      	ldrh	r3, [r3, #2]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	2b06      	cmp	r3, #6
 8005c66:	f200 8128 	bhi.w	8005eba <USBD_GetDescriptor+0x276>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <USBD_GetDescriptor+0x2c>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	08005ca5 	.word	0x08005ca5
 8005c78:	08005ce5 	.word	0x08005ce5
 8005c7c:	08005ebb 	.word	0x08005ebb
 8005c80:	08005ebb 	.word	0x08005ebb
 8005c84:	08005e5b 	.word	0x08005e5b
 8005c88:	08005e87 	.word	0x08005e87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	7c12      	ldrb	r2, [r2, #16]
 8005c98:	f107 0108 	add.w	r1, r7, #8
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
 8005ca0:	60f8      	str	r0, [r7, #12]
      break;
 8005ca2:	e112      	b.n	8005eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7c1b      	ldrb	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	f107 0208 	add.w	r2, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cc6:	e100      	b.n	8005eca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f107 0208 	add.w	r2, r7, #8
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
 8005cd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	2202      	movs	r2, #2
 8005ce0:	701a      	strb	r2, [r3, #0]
      break;
 8005ce2:	e0f2      	b.n	8005eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	885b      	ldrh	r3, [r3, #2]
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b05      	cmp	r3, #5
 8005cec:	f200 80ac 	bhi.w	8005e48 <USBD_GetDescriptor+0x204>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <USBD_GetDescriptor+0xb4>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d45 	.word	0x08005d45
 8005d00:	08005d79 	.word	0x08005d79
 8005d04:	08005dad 	.word	0x08005dad
 8005d08:	08005de1 	.word	0x08005de1
 8005d0c:	08005e15 	.word	0x08005e15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	7c12      	ldrb	r2, [r2, #16]
 8005d28:	f107 0108 	add.w	r1, r7, #8
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	4798      	blx	r3
 8005d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d32:	e091      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fa94 	bl	8006264 <USBD_CtlError>
            err++;
 8005d3c:	7afb      	ldrb	r3, [r7, #11]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	72fb      	strb	r3, [r7, #11]
          break;
 8005d42:	e089      	b.n	8005e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00b      	beq.n	8005d68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	7c12      	ldrb	r2, [r2, #16]
 8005d5c:	f107 0108 	add.w	r1, r7, #8
 8005d60:	4610      	mov	r0, r2
 8005d62:	4798      	blx	r3
 8005d64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d66:	e077      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d68:	6839      	ldr	r1, [r7, #0]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fa7a 	bl	8006264 <USBD_CtlError>
            err++;
 8005d70:	7afb      	ldrb	r3, [r7, #11]
 8005d72:	3301      	adds	r3, #1
 8005d74:	72fb      	strb	r3, [r7, #11]
          break;
 8005d76:	e06f      	b.n	8005e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00b      	beq.n	8005d9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	7c12      	ldrb	r2, [r2, #16]
 8005d90:	f107 0108 	add.w	r1, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9a:	e05d      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fa60 	bl	8006264 <USBD_CtlError>
            err++;
 8005da4:	7afb      	ldrb	r3, [r7, #11]
 8005da6:	3301      	adds	r3, #1
 8005da8:	72fb      	strb	r3, [r7, #11]
          break;
 8005daa:	e055      	b.n	8005e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00b      	beq.n	8005dd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	7c12      	ldrb	r2, [r2, #16]
 8005dc4:	f107 0108 	add.w	r1, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dce:	e043      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa46 	bl	8006264 <USBD_CtlError>
            err++;
 8005dd8:	7afb      	ldrb	r3, [r7, #11]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dde:	e03b      	b.n	8005e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	7c12      	ldrb	r2, [r2, #16]
 8005df8:	f107 0108 	add.w	r1, r7, #8
 8005dfc:	4610      	mov	r0, r2
 8005dfe:	4798      	blx	r3
 8005e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e02:	e029      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa2c 	bl	8006264 <USBD_CtlError>
            err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
          break;
 8005e12:	e021      	b.n	8005e58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e26:	699b      	ldr	r3, [r3, #24]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7c12      	ldrb	r2, [r2, #16]
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e36:	e00f      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa12 	bl	8006264 <USBD_CtlError>
            err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
          break;
 8005e46:	e007      	b.n	8005e58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa0a 	bl	8006264 <USBD_CtlError>
          err++;
 8005e50:	7afb      	ldrb	r3, [r7, #11]
 8005e52:	3301      	adds	r3, #1
 8005e54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e56:	e038      	b.n	8005eca <USBD_GetDescriptor+0x286>
 8005e58:	e037      	b.n	8005eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	7c1b      	ldrb	r3, [r3, #16]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6a:	f107 0208 	add.w	r2, r7, #8
 8005e6e:	4610      	mov	r0, r2
 8005e70:	4798      	blx	r3
 8005e72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e74:	e029      	b.n	8005eca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9f3 	bl	8006264 <USBD_CtlError>
        err++;
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	3301      	adds	r3, #1
 8005e82:	72fb      	strb	r3, [r7, #11]
      break;
 8005e84:	e021      	b.n	8005eca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	7c1b      	ldrb	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	f107 0208 	add.w	r2, r7, #8
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4798      	blx	r3
 8005e9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	2207      	movs	r2, #7
 8005ea6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ea8:	e00f      	b.n	8005eca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9d9 	bl	8006264 <USBD_CtlError>
        err++;
 8005eb2:	7afb      	ldrb	r3, [r7, #11]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8005eb8:	e007      	b.n	8005eca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f9d1 	bl	8006264 <USBD_CtlError>
      err++;
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ec8:	bf00      	nop
  }

  if (err != 0U)
 8005eca:	7afb      	ldrb	r3, [r7, #11]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11c      	bne.n	8005f0a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005ed0:	893b      	ldrh	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d011      	beq.n	8005efa <USBD_GetDescriptor+0x2b6>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	88db      	ldrh	r3, [r3, #6]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00d      	beq.n	8005efa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	88da      	ldrh	r2, [r3, #6]
 8005ee2:	893b      	ldrh	r3, [r7, #8]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	bf28      	it	cs
 8005ee8:	4613      	movcs	r3, r2
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eee:	893b      	ldrh	r3, [r7, #8]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68f9      	ldr	r1, [r7, #12]
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa1f 	bl	8006338 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	88db      	ldrh	r3, [r3, #6]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa76 	bl	80063f4 <USBD_CtlSendStatus>
 8005f08:	e000      	b.n	8005f0c <USBD_GetDescriptor+0x2c8>
    return;
 8005f0a:	bf00      	nop
    }
  }
}
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	889b      	ldrh	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d130      	bne.n	8005f88 <USBD_SetAddress+0x74>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	88db      	ldrh	r3, [r3, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12c      	bne.n	8005f88 <USBD_SetAddress+0x74>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	885b      	ldrh	r3, [r3, #2]
 8005f32:	2b7f      	cmp	r3, #127	; 0x7f
 8005f34:	d828      	bhi.n	8005f88 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	885b      	ldrh	r3, [r3, #2]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d104      	bne.n	8005f56 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f988 	bl	8006264 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f54:	e01c      	b.n	8005f90 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	7bfa      	ldrb	r2, [r7, #15]
 8005f5a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	4619      	mov	r1, r3
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f003 fbb4 	bl	80096d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa43 	bl	80063f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d004      	beq.n	8005f7e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7c:	e008      	b.n	8005f90 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f86:	e003      	b.n	8005f90 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f96a 	bl	8006264 <USBD_CtlError>
  }
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	885b      	ldrh	r3, [r3, #2]
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	4b41      	ldr	r3, [pc, #260]	; (80060b0 <USBD_SetConfig+0x118>)
 8005faa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fac:	4b40      	ldr	r3, [pc, #256]	; (80060b0 <USBD_SetConfig+0x118>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d904      	bls.n	8005fbe <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f954 	bl	8006264 <USBD_CtlError>
 8005fbc:	e075      	b.n	80060aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d002      	beq.n	8005fce <USBD_SetConfig+0x36>
 8005fc8:	2b03      	cmp	r3, #3
 8005fca:	d023      	beq.n	8006014 <USBD_SetConfig+0x7c>
 8005fcc:	e062      	b.n	8006094 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005fce:	4b38      	ldr	r3, [pc, #224]	; (80060b0 <USBD_SetConfig+0x118>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01a      	beq.n	800600c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005fd6:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <USBD_SetConfig+0x118>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005fe8:	4b31      	ldr	r3, [pc, #196]	; (80060b0 <USBD_SetConfig+0x118>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	4619      	mov	r1, r3
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff f9f3 	bl	80053da <USBD_SetClassConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d104      	bne.n	8006004 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f931 	bl	8006264 <USBD_CtlError>
            return;
 8006002:	e052      	b.n	80060aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f9f5 	bl	80063f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800600a:	e04e      	b.n	80060aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f9f1 	bl	80063f4 <USBD_CtlSendStatus>
        break;
 8006012:	e04a      	b.n	80060aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006014:	4b26      	ldr	r3, [pc, #152]	; (80060b0 <USBD_SetConfig+0x118>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d112      	bne.n	8006042 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006024:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <USBD_SetConfig+0x118>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800602e:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <USBD_SetConfig+0x118>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff f9ef 	bl	8005418 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f9da 	bl	80063f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006040:	e033      	b.n	80060aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006042:	4b1b      	ldr	r3, [pc, #108]	; (80060b0 <USBD_SetConfig+0x118>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d01d      	beq.n	800608c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff f9dd 	bl	8005418 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800605e:	4b14      	ldr	r3, [pc, #80]	; (80060b0 <USBD_SetConfig+0x118>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006068:	4b11      	ldr	r3, [pc, #68]	; (80060b0 <USBD_SetConfig+0x118>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff f9b3 	bl	80053da <USBD_SetClassConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b02      	cmp	r3, #2
 8006078:	d104      	bne.n	8006084 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800607a:	6839      	ldr	r1, [r7, #0]
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f8f1 	bl	8006264 <USBD_CtlError>
            return;
 8006082:	e012      	b.n	80060aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f9b5 	bl	80063f4 <USBD_CtlSendStatus>
        break;
 800608a:	e00e      	b.n	80060aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f9b1 	bl	80063f4 <USBD_CtlSendStatus>
        break;
 8006092:	e00a      	b.n	80060aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f8e4 	bl	8006264 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <USBD_SetConfig+0x118>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff f9b8 	bl	8005418 <USBD_ClrClassConfig>
        break;
 80060a8:	bf00      	nop
    }
  }
}
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	2000019c 	.word	0x2000019c

080060b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	88db      	ldrh	r3, [r3, #6]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d004      	beq.n	80060d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8cb 	bl	8006264 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060ce:	e021      	b.n	8006114 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	db17      	blt.n	800610a <USBD_GetConfig+0x56>
 80060da:	2b02      	cmp	r3, #2
 80060dc:	dd02      	ble.n	80060e4 <USBD_GetConfig+0x30>
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d00b      	beq.n	80060fa <USBD_GetConfig+0x46>
 80060e2:	e012      	b.n	800610a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3308      	adds	r3, #8
 80060ee:	2201      	movs	r2, #1
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f920 	bl	8006338 <USBD_CtlSendData>
        break;
 80060f8:	e00c      	b.n	8006114 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3304      	adds	r3, #4
 80060fe:	2201      	movs	r2, #1
 8006100:	4619      	mov	r1, r3
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f918 	bl	8006338 <USBD_CtlSendData>
        break;
 8006108:	e004      	b.n	8006114 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f8a9 	bl	8006264 <USBD_CtlError>
        break;
 8006112:	bf00      	nop
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612c:	3b01      	subs	r3, #1
 800612e:	2b02      	cmp	r3, #2
 8006130:	d81e      	bhi.n	8006170 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	88db      	ldrh	r3, [r3, #6]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d004      	beq.n	8006144 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f891 	bl	8006264 <USBD_CtlError>
        break;
 8006142:	e01a      	b.n	800617a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	f043 0202 	orr.w	r2, r3, #2
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	330c      	adds	r3, #12
 8006164:	2202      	movs	r2, #2
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f8e5 	bl	8006338 <USBD_CtlSendData>
      break;
 800616e:	e004      	b.n	800617a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f876 	bl	8006264 <USBD_CtlError>
      break;
 8006178:	bf00      	nop
  }
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	885b      	ldrh	r3, [r3, #2]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d106      	bne.n	80061a2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f929 	bl	80063f4 <USBD_CtlSendStatus>
  }
}
 80061a2:	bf00      	nop
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b082      	sub	sp, #8
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ba:	3b01      	subs	r3, #1
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d80b      	bhi.n	80061d8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	885b      	ldrh	r3, [r3, #2]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d10c      	bne.n	80061e2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f90f 	bl	80063f4 <USBD_CtlSendStatus>
      }
      break;
 80061d6:	e004      	b.n	80061e2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f842 	bl	8006264 <USBD_CtlError>
      break;
 80061e0:	e000      	b.n	80061e4 <USBD_ClrFeature+0x3a>
      break;
 80061e2:	bf00      	nop
  }
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	785a      	ldrb	r2, [r3, #1]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	3302      	adds	r3, #2
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	b29a      	uxth	r2, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	3303      	adds	r3, #3
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	021b      	lsls	r3, r3, #8
 8006218:	b29b      	uxth	r3, r3
 800621a:	4413      	add	r3, r2
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	3304      	adds	r3, #4
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b29a      	uxth	r2, r3
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	3305      	adds	r3, #5
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	b29b      	uxth	r3, r3
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	b29b      	uxth	r3, r3
 8006236:	4413      	add	r3, r2
 8006238:	b29a      	uxth	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	3306      	adds	r3, #6
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b29a      	uxth	r2, r3
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3307      	adds	r3, #7
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	b29b      	uxth	r3, r3
 8006252:	4413      	add	r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	80da      	strh	r2, [r3, #6]

}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f003 f9c3 	bl	80095fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006276:	2100      	movs	r1, #0
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f003 f9bf 	bl	80095fc <USBD_LL_StallEP>
}
 800627e:	bf00      	nop
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b086      	sub	sp, #24
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d032      	beq.n	8006302 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f834 	bl	800630a <USBD_GetLen>
 80062a2:	4603      	mov	r3, r0
 80062a4:	3301      	adds	r3, #1
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	005b      	lsls	r3, r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	75fa      	strb	r2, [r7, #23]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4413      	add	r3, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	7812      	ldrb	r2, [r2, #0]
 80062c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	75fa      	strb	r2, [r7, #23]
 80062c8:	461a      	mov	r2, r3
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	4413      	add	r3, r2
 80062ce:	2203      	movs	r2, #3
 80062d0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80062d2:	e012      	b.n	80062fa <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	60fa      	str	r2, [r7, #12]
 80062da:	7dfa      	ldrb	r2, [r7, #23]
 80062dc:	1c51      	adds	r1, r2, #1
 80062de:	75f9      	strb	r1, [r7, #23]
 80062e0:	4611      	mov	r1, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	440a      	add	r2, r1
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
 80062ec:	1c5a      	adds	r2, r3, #1
 80062ee:	75fa      	strb	r2, [r7, #23]
 80062f0:	461a      	mov	r2, r3
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4413      	add	r3, r2
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e8      	bne.n	80062d4 <USBD_GetString+0x4e>
    }
  }
}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800630a:	b480      	push	{r7}
 800630c:	b085      	sub	sp, #20
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006316:	e005      	b.n	8006324 <USBD_GetLen+0x1a>
  {
    len++;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
 800631a:	3301      	adds	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3301      	adds	r3, #1
 8006322:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f5      	bne.n	8006318 <USBD_GetLen+0xe>
  }

  return len;
 800632c:	7bfb      	ldrb	r3, [r7, #15]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2202      	movs	r2, #2
 800634a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006354:	88fa      	ldrh	r2, [r7, #6]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	2100      	movs	r1, #0
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f003 f9d4 	bl	800970e <USBD_LL_Transmit>

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	2100      	movs	r1, #0
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f003 f9c2 	bl	800970e <USBD_LL_Transmit>

  return USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	4613      	mov	r3, r2
 80063a0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2203      	movs	r2, #3
 80063a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	2100      	movs	r1, #0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f003 f9c7 	bl	8009754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	2100      	movs	r1, #0
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f003 f9b5 	bl	8009754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006404:	2300      	movs	r3, #0
 8006406:	2200      	movs	r2, #0
 8006408:	2100      	movs	r1, #0
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f003 f97f 	bl	800970e <USBD_LL_Transmit>

  return USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2205      	movs	r2, #5
 8006426:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800642a:	2300      	movs	r3, #0
 800642c:	2200      	movs	r2, #0
 800642e:	2100      	movs	r1, #0
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f003 f98f 	bl	8009754 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006446:	f3ef 8305 	mrs	r3, IPSR
 800644a:	60bb      	str	r3, [r7, #8]
  return(result);
 800644c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10f      	bne.n	8006472 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006452:	f3ef 8310 	mrs	r3, PRIMASK
 8006456:	607b      	str	r3, [r7, #4]
  return(result);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <osKernelInitialize+0x32>
 800645e:	4b10      	ldr	r3, [pc, #64]	; (80064a0 <osKernelInitialize+0x60>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d109      	bne.n	800647a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006466:	f3ef 8311 	mrs	r3, BASEPRI
 800646a:	603b      	str	r3, [r7, #0]
  return(result);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006472:	f06f 0305 	mvn.w	r3, #5
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e00c      	b.n	8006494 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800647a:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <osKernelInitialize+0x60>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <osKernelInitialize+0x60>)
 8006484:	2201      	movs	r2, #1
 8006486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	e002      	b.n	8006494 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006494:	68fb      	ldr	r3, [r7, #12]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr
 80064a0:	200001a0 	.word	0x200001a0

080064a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064aa:	f3ef 8305 	mrs	r3, IPSR
 80064ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10f      	bne.n	80064d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ba:	607b      	str	r3, [r7, #4]
  return(result);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <osKernelStart+0x32>
 80064c2:	4b11      	ldr	r3, [pc, #68]	; (8006508 <osKernelStart+0x64>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d109      	bne.n	80064de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064ca:	f3ef 8311 	mrs	r3, BASEPRI
 80064ce:	603b      	str	r3, [r7, #0]
  return(result);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <osKernelStart+0x3a>
    stat = osErrorISR;
 80064d6:	f06f 0305 	mvn.w	r3, #5
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e00e      	b.n	80064fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <osKernelStart+0x64>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d107      	bne.n	80064f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <osKernelStart+0x64>)
 80064e8:	2202      	movs	r2, #2
 80064ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80064ec:	f001 f918 	bl	8007720 <vTaskStartScheduler>
      stat = osOK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e002      	b.n	80064fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80064f6:	f04f 33ff 	mov.w	r3, #4294967295
 80064fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200001a0 	.word	0x200001a0

0800650c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b092      	sub	sp, #72	; 0x48
 8006510:	af04      	add	r7, sp, #16
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800651c:	f3ef 8305 	mrs	r3, IPSR
 8006520:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006524:	2b00      	cmp	r3, #0
 8006526:	f040 8094 	bne.w	8006652 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800652a:	f3ef 8310 	mrs	r3, PRIMASK
 800652e:	623b      	str	r3, [r7, #32]
  return(result);
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 808d 	bne.w	8006652 <osThreadNew+0x146>
 8006538:	4b48      	ldr	r3, [pc, #288]	; (800665c <osThreadNew+0x150>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d106      	bne.n	800654e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006540:	f3ef 8311 	mrs	r3, BASEPRI
 8006544:	61fb      	str	r3, [r7, #28]
  return(result);
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	f040 8082 	bne.w	8006652 <osThreadNew+0x146>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d07e      	beq.n	8006652 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006558:	2318      	movs	r3, #24
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800655c:	2300      	movs	r3, #0
 800655e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006560:	f107 031b 	add.w	r3, r7, #27
 8006564:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006566:	f04f 33ff 	mov.w	r3, #4294967295
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d045      	beq.n	80065fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <osThreadNew+0x74>
        name = attr->name;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <osThreadNew+0x9a>
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	2b38      	cmp	r3, #56	; 0x38
 8006598:	d805      	bhi.n	80065a6 <osThreadNew+0x9a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <osThreadNew+0x9e>
        return (NULL);
 80065a6:	2300      	movs	r3, #0
 80065a8:	e054      	b.n	8006654 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	089b      	lsrs	r3, r3, #2
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <osThreadNew+0xd4>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	2b73      	cmp	r3, #115	; 0x73
 80065c8:	d90a      	bls.n	80065e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d006      	beq.n	80065e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d002      	beq.n	80065e0 <osThreadNew+0xd4>
        mem = 1;
 80065da:	2301      	movs	r3, #1
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065de:	e010      	b.n	8006602 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10c      	bne.n	8006602 <osThreadNew+0xf6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d108      	bne.n	8006602 <osThreadNew+0xf6>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d104      	bne.n	8006602 <osThreadNew+0xf6>
          mem = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fc:	e001      	b.n	8006602 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80065fe:	2300      	movs	r3, #0
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8006602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006604:	2b01      	cmp	r3, #1
 8006606:	d110      	bne.n	800662a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006610:	9202      	str	r2, [sp, #8]
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fe3e 	bl	80072a0 <xTaskCreateStatic>
 8006624:	4603      	mov	r3, r0
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e013      	b.n	8006652 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	2b00      	cmp	r3, #0
 800662e:	d110      	bne.n	8006652 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	b29a      	uxth	r2, r3
 8006634:	f107 0314 	add.w	r3, r7, #20
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fe85 	bl	8007352 <xTaskCreate>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d001      	beq.n	8006652 <osThreadNew+0x146>
          hTask = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006652:	697b      	ldr	r3, [r7, #20]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3738      	adds	r7, #56	; 0x38
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200001a0 	.word	0x200001a0

08006660 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006668:	f3ef 8305 	mrs	r3, IPSR
 800666c:	613b      	str	r3, [r7, #16]
  return(result);
 800666e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10f      	bne.n	8006694 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006674:	f3ef 8310 	mrs	r3, PRIMASK
 8006678:	60fb      	str	r3, [r7, #12]
  return(result);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d109      	bne.n	8006694 <osDelay+0x34>
 8006680:	4b0d      	ldr	r3, [pc, #52]	; (80066b8 <osDelay+0x58>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d109      	bne.n	800669c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006688:	f3ef 8311 	mrs	r3, BASEPRI
 800668c:	60bb      	str	r3, [r7, #8]
  return(result);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <osDelay+0x3c>
    stat = osErrorISR;
 8006694:	f06f 0305 	mvn.w	r3, #5
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	e007      	b.n	80066ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 f806 	bl	80076b8 <vTaskDelay>
    }
  }

  return (stat);
 80066ac:	697b      	ldr	r3, [r7, #20]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200001a0 	.word	0x200001a0

080066bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4a06      	ldr	r2, [pc, #24]	; (80066e4 <vApplicationGetIdleTaskMemory+0x28>)
 80066cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4a05      	ldr	r2, [pc, #20]	; (80066e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80066d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2280      	movs	r2, #128	; 0x80
 80066d8:	601a      	str	r2, [r3, #0]
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr
 80066e4:	200001a4 	.word	0x200001a4
 80066e8:	20000218 	.word	0x20000218

080066ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	4a07      	ldr	r2, [pc, #28]	; (8006718 <vApplicationGetTimerTaskMemory+0x2c>)
 80066fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a06      	ldr	r2, [pc, #24]	; (800671c <vApplicationGetTimerTaskMemory+0x30>)
 8006702:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800670a:	601a      	str	r2, [r3, #0]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000418 	.word	0x20000418
 800671c:	2000048c 	.word	0x2000048c

08006720 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0208 	add.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f103 0208 	add.w	r2, r3, #8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f103 0208 	add.w	r2, r3, #8
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bc80      	pop	{r7}
 80067ba:	4770      	bx	lr

080067bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d2:	d103      	bne.n	80067dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	e00c      	b.n	80067f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3308      	adds	r3, #8
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	e002      	b.n	80067ea <vListInsert+0x2e>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d2f6      	bcs.n	80067e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	683a      	ldr	r2, [r7, #0]
 8006804:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	601a      	str	r2, [r3, #0]
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr

0800682c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6892      	ldr	r2, [r2, #8]
 8006842:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6852      	ldr	r2, [r2, #4]
 800684c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	429a      	cmp	r2, r3
 8006856:	d103      	bne.n	8006860 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
	...

08006880 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	e7fe      	b.n	80068a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80068a8:	f002 f866 	bl	8008978 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d8:	3b01      	subs	r3, #1
 80068da:	68f9      	ldr	r1, [r7, #12]
 80068dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	441a      	add	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	22ff      	movs	r2, #255	; 0xff
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d114      	bne.n	8006928 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d01a      	beq.n	800693c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3310      	adds	r3, #16
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f9aa 	bl	8007c64 <xTaskRemoveFromEventList>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d012      	beq.n	800693c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006916:	4b0d      	ldr	r3, [pc, #52]	; (800694c <xQueueGenericReset+0xcc>)
 8006918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800691c:	601a      	str	r2, [r3, #0]
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	e009      	b.n	800693c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3310      	adds	r3, #16
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fef7 	bl	8006720 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3324      	adds	r3, #36	; 0x24
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fef2 	bl	8006720 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800693c:	f002 f84a 	bl	80089d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006940:	2301      	movs	r3, #1
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	e000ed04 	.word	0xe000ed04

08006950 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08e      	sub	sp, #56	; 0x38
 8006954:	af02      	add	r7, sp, #8
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <xQueueGenericCreateStatic+0x28>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28
 8006976:	e7fe      	b.n	8006976 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <xQueueGenericCreateStatic+0x42>
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
 8006990:	e7fe      	b.n	8006990 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <xQueueGenericCreateStatic+0x4e>
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <xQueueGenericCreateStatic+0x52>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <xQueueGenericCreateStatic+0x54>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d109      	bne.n	80069bc <xQueueGenericCreateStatic+0x6c>
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	e7fe      	b.n	80069ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <xQueueGenericCreateStatic+0x78>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <xQueueGenericCreateStatic+0x7c>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <xQueueGenericCreateStatic+0x7e>
 80069cc:	2300      	movs	r3, #0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <xQueueGenericCreateStatic+0x96>
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069e6:	2350      	movs	r3, #80	; 0x50
 80069e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b50      	cmp	r3, #80	; 0x50
 80069ee:	d009      	beq.n	8006a04 <xQueueGenericCreateStatic+0xb4>
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	e7fe      	b.n	8006a02 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f842 	bl	8006aae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3730      	adds	r7, #48	; 0x30
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08a      	sub	sp, #40	; 0x28
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d109      	bne.n	8006a5c <xQueueGenericCreate+0x28>
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	e7fe      	b.n	8006a5a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61fb      	str	r3, [r7, #28]
 8006a66:	e004      	b.n	8006a72 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	fb02 f303 	mul.w	r3, r2, r3
 8006a70:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	3350      	adds	r3, #80	; 0x50
 8006a76:	4618      	mov	r0, r3
 8006a78:	f002 f874 	bl	8008b64 <pvPortMalloc>
 8006a7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00f      	beq.n	8006aa4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3350      	adds	r3, #80	; 0x50
 8006a88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a92:	79fa      	ldrb	r2, [r7, #7]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	68b9      	ldr	r1, [r7, #8]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f805 	bl	8006aae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006aa4:	69bb      	ldr	r3, [r7, #24]
	}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b084      	sub	sp, #16
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
 8006aba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	69ba      	ldr	r2, [r7, #24]
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e002      	b.n	8006ad0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006adc:	2101      	movs	r1, #1
 8006ade:	69b8      	ldr	r0, [r7, #24]
 8006ae0:	f7ff fece 	bl	8006880 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	78fa      	ldrb	r2, [r7, #3]
 8006ae8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b02:	2300      	movs	r3, #0
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <xQueueGenericSend+0x30>
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b22:	e7fe      	b.n	8006b22 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSend+0x3e>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSend+0x42>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSend+0x44>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d109      	bne.n	8006b50 <xQueueGenericSend+0x5c>
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	e7fe      	b.n	8006b4e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d103      	bne.n	8006b5e <xQueueGenericSend+0x6a>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d101      	bne.n	8006b62 <xQueueGenericSend+0x6e>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e000      	b.n	8006b64 <xQueueGenericSend+0x70>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <xQueueGenericSend+0x88>
 8006b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6c:	f383 8811 	msr	BASEPRI, r3
 8006b70:	f3bf 8f6f 	isb	sy
 8006b74:	f3bf 8f4f 	dsb	sy
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	e7fe      	b.n	8006b7a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b7c:	f001 fa2c 	bl	8007fd8 <xTaskGetSchedulerState>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d102      	bne.n	8006b8c <xQueueGenericSend+0x98>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <xQueueGenericSend+0x9c>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e000      	b.n	8006b92 <xQueueGenericSend+0x9e>
 8006b90:	2300      	movs	r3, #0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <xQueueGenericSend+0xb6>
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61fb      	str	r3, [r7, #28]
 8006ba8:	e7fe      	b.n	8006ba8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006baa:	f001 fee5 	bl	8008978 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d302      	bcc.n	8006bc0 <xQueueGenericSend+0xcc>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d129      	bne.n	8006c14 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bc6:	f000 f9ff 	bl	8006fc8 <prvCopyDataToQueue>
 8006bca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d010      	beq.n	8006bf6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd6:	3324      	adds	r3, #36	; 0x24
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 f843 	bl	8007c64 <xTaskRemoveFromEventList>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d013      	beq.n	8006c0c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006be4:	4b3f      	ldr	r3, [pc, #252]	; (8006ce4 <xQueueGenericSend+0x1f0>)
 8006be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	e00a      	b.n	8006c0c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006bfc:	4b39      	ldr	r3, [pc, #228]	; (8006ce4 <xQueueGenericSend+0x1f0>)
 8006bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c0c:	f001 fee2 	bl	80089d4 <vPortExitCritical>
				return pdPASS;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e063      	b.n	8006cdc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d103      	bne.n	8006c22 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c1a:	f001 fedb 	bl	80089d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	e05c      	b.n	8006cdc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d106      	bne.n	8006c36 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c28:	f107 0314 	add.w	r3, r7, #20
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f001 f87b 	bl	8007d28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c36:	f001 fecd 	bl	80089d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c3a:	f000 fdd7 	bl	80077ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c3e:	f001 fe9b 	bl	8008978 <vPortEnterCritical>
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c48:	b25b      	sxtb	r3, r3
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4e:	d103      	bne.n	8006c58 <xQueueGenericSend+0x164>
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c5e:	b25b      	sxtb	r3, r3
 8006c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c64:	d103      	bne.n	8006c6e <xQueueGenericSend+0x17a>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c6e:	f001 feb1 	bl	80089d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c72:	1d3a      	adds	r2, r7, #4
 8006c74:	f107 0314 	add.w	r3, r7, #20
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 f86a 	bl	8007d54 <xTaskCheckForTimeOut>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d124      	bne.n	8006cd0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c88:	f000 fa96 	bl	80071b8 <prvIsQueueFull>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	3310      	adds	r3, #16
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	4611      	mov	r1, r2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 ff94 	bl	8007bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ca2:	f000 fa21 	bl	80070e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ca6:	f000 fdaf 	bl	8007808 <xTaskResumeAll>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f47f af7c 	bne.w	8006baa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006cb2:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <xQueueGenericSend+0x1f0>)
 8006cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb8:	601a      	str	r2, [r3, #0]
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	e772      	b.n	8006baa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cc6:	f000 fa0f 	bl	80070e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cca:	f000 fd9d 	bl	8007808 <xTaskResumeAll>
 8006cce:	e76c      	b.n	8006baa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd2:	f000 fa09 	bl	80070e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cd6:	f000 fd97 	bl	8007808 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cda:	2300      	movs	r3, #0
		}
	}
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3738      	adds	r7, #56	; 0x38
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed04 	.word	0xe000ed04

08006ce8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08e      	sub	sp, #56	; 0x38
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <xQueueGenericSendFromISR+0x2c>
 8006d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
 8006d12:	e7fe      	b.n	8006d12 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d103      	bne.n	8006d22 <xQueueGenericSendFromISR+0x3a>
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <xQueueGenericSendFromISR+0x3e>
 8006d22:	2301      	movs	r3, #1
 8006d24:	e000      	b.n	8006d28 <xQueueGenericSendFromISR+0x40>
 8006d26:	2300      	movs	r3, #0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d109      	bne.n	8006d40 <xQueueGenericSendFromISR+0x58>
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	e7fe      	b.n	8006d3e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d103      	bne.n	8006d4e <xQueueGenericSendFromISR+0x66>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d101      	bne.n	8006d52 <xQueueGenericSendFromISR+0x6a>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <xQueueGenericSendFromISR+0x6c>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <xQueueGenericSendFromISR+0x84>
 8006d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e7fe      	b.n	8006d6a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d6c:	f001 febe 	bl	8008aec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d70:	f3ef 8211 	mrs	r2, BASEPRI
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	61ba      	str	r2, [r7, #24]
 8006d86:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d88:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <xQueueGenericSendFromISR+0xb6>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d12c      	bne.n	8006df8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dae:	f000 f90b 	bl	8006fc8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006db2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d112      	bne.n	8006de2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d016      	beq.n	8006df2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	3324      	adds	r3, #36	; 0x24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 ff4b 	bl	8007c64 <xTaskRemoveFromEventList>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00b      	beq.n	8006df2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e007      	b.n	8006df2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006de2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006de6:	3301      	adds	r3, #1
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	b25a      	sxtb	r2, r3
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006df2:	2301      	movs	r3, #1
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006df6:	e001      	b.n	8006dfc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3738      	adds	r7, #56	; 0x38
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08c      	sub	sp, #48	; 0x30
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <xQueueReceive+0x2e>
	__asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	e7fe      	b.n	8006e3c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d103      	bne.n	8006e4c <xQueueReceive+0x3c>
 8006e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <xQueueReceive+0x40>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <xQueueReceive+0x42>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d109      	bne.n	8006e6a <xQueueReceive+0x5a>
 8006e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	e7fe      	b.n	8006e68 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e6a:	f001 f8b5 	bl	8007fd8 <xTaskGetSchedulerState>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <xQueueReceive+0x6a>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <xQueueReceive+0x6e>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <xQueueReceive+0x70>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d109      	bne.n	8006e98 <xQueueReceive+0x88>
 8006e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e88:	f383 8811 	msr	BASEPRI, r3
 8006e8c:	f3bf 8f6f 	isb	sy
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	e7fe      	b.n	8006e96 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e98:	f001 fd6e 	bl	8008978 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01f      	beq.n	8006ee8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ea8:	68b9      	ldr	r1, [r7, #8]
 8006eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eac:	f000 f8f6 	bl	800709c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	1e5a      	subs	r2, r3, #1
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00f      	beq.n	8006ee0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	3310      	adds	r3, #16
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fecd 	bl	8007c64 <xTaskRemoveFromEventList>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ed0:	4b3c      	ldr	r3, [pc, #240]	; (8006fc4 <xQueueReceive+0x1b4>)
 8006ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ee0:	f001 fd78 	bl	80089d4 <vPortExitCritical>
				return pdPASS;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e069      	b.n	8006fbc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006eee:	f001 fd71 	bl	80089d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	e062      	b.n	8006fbc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d106      	bne.n	8006f0a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006efc:	f107 0310 	add.w	r3, r7, #16
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 ff11 	bl	8007d28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f06:	2301      	movs	r3, #1
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f0a:	f001 fd63 	bl	80089d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f0e:	f000 fc6d 	bl	80077ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f12:	f001 fd31 	bl	8008978 <vPortEnterCritical>
 8006f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f1c:	b25b      	sxtb	r3, r3
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d103      	bne.n	8006f2c <xQueueReceive+0x11c>
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f32:	b25b      	sxtb	r3, r3
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d103      	bne.n	8006f42 <xQueueReceive+0x132>
 8006f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f42:	f001 fd47 	bl	80089d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f46:	1d3a      	adds	r2, r7, #4
 8006f48:	f107 0310 	add.w	r3, r7, #16
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f000 ff00 	bl	8007d54 <xTaskCheckForTimeOut>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d123      	bne.n	8006fa2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5c:	f000 f916 	bl	800718c <prvIsQueueEmpty>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d017      	beq.n	8006f96 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	3324      	adds	r3, #36	; 0x24
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fe2a 	bl	8007bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f76:	f000 f8b7 	bl	80070e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f7a:	f000 fc45 	bl	8007808 <xTaskResumeAll>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d189      	bne.n	8006e98 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006f84:	4b0f      	ldr	r3, [pc, #60]	; (8006fc4 <xQueueReceive+0x1b4>)
 8006f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	e780      	b.n	8006e98 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f98:	f000 f8a6 	bl	80070e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f9c:	f000 fc34 	bl	8007808 <xTaskResumeAll>
 8006fa0:	e77a      	b.n	8006e98 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa4:	f000 f8a0 	bl	80070e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fa8:	f000 fc2e 	bl	8007808 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fae:	f000 f8ed 	bl	800718c <prvIsQueueEmpty>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f43f af6f 	beq.w	8006e98 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3730      	adds	r7, #48	; 0x30
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d14d      	bne.n	800708a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f001 f80e 	bl	8008014 <xTaskPriorityDisinherit>
 8006ff8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	605a      	str	r2, [r3, #4]
 8007000:	e043      	b.n	800708a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d119      	bne.n	800703c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6898      	ldr	r0, [r3, #8]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	461a      	mov	r2, r3
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	f002 fc44 	bl	80098a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	441a      	add	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	429a      	cmp	r2, r3
 8007030:	d32b      	bcc.n	800708a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	609a      	str	r2, [r3, #8]
 800703a:	e026      	b.n	800708a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68d8      	ldr	r0, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	461a      	mov	r2, r3
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	f002 fc2a 	bl	80098a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	425b      	negs	r3, r3
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d207      	bcs.n	8007078 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	685a      	ldr	r2, [r3, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	425b      	negs	r3, r3
 8007072:	441a      	add	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d105      	bne.n	800708a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	3b01      	subs	r3, #1
 8007088:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007092:	697b      	ldr	r3, [r7, #20]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d018      	beq.n	80070e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68da      	ldr	r2, [r3, #12]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	441a      	add	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d303      	bcc.n	80070d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68d9      	ldr	r1, [r3, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	461a      	mov	r2, r3
 80070da:	6838      	ldr	r0, [r7, #0]
 80070dc:	f002 fbe0 	bl	80098a0 <memcpy>
	}
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070f0:	f001 fc42 	bl	8008978 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070fc:	e011      	b.n	8007122 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d012      	beq.n	800712c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3324      	adds	r3, #36	; 0x24
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fdaa 	bl	8007c64 <xTaskRemoveFromEventList>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007116:	f000 fe7d 	bl	8007e14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	3b01      	subs	r3, #1
 800711e:	b2db      	uxtb	r3, r3
 8007120:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	dce9      	bgt.n	80070fe <prvUnlockQueue+0x16>
 800712a:	e000      	b.n	800712e <prvUnlockQueue+0x46>
					break;
 800712c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007136:	f001 fc4d 	bl	80089d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800713a:	f001 fc1d 	bl	8008978 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007144:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007146:	e011      	b.n	800716c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	691b      	ldr	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d012      	beq.n	8007176 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3310      	adds	r3, #16
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fd85 	bl	8007c64 <xTaskRemoveFromEventList>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007160:	f000 fe58 	bl	8007e14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	3b01      	subs	r3, #1
 8007168:	b2db      	uxtb	r3, r3
 800716a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800716c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007170:	2b00      	cmp	r3, #0
 8007172:	dce9      	bgt.n	8007148 <prvUnlockQueue+0x60>
 8007174:	e000      	b.n	8007178 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007176:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	22ff      	movs	r2, #255	; 0xff
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007180:	f001 fc28 	bl	80089d4 <vPortExitCritical>
}
 8007184:	bf00      	nop
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007194:	f001 fbf0 	bl	8008978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d102      	bne.n	80071a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e001      	b.n	80071aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071aa:	f001 fc13 	bl	80089d4 <vPortExitCritical>

	return xReturn;
 80071ae:	68fb      	ldr	r3, [r7, #12]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071c0:	f001 fbda 	bl	8008978 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d102      	bne.n	80071d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071d0:	2301      	movs	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e001      	b.n	80071da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071da:	f001 fbfb 	bl	80089d4 <vPortExitCritical>

	return xReturn;
 80071de:	68fb      	ldr	r3, [r7, #12]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071e8:	b480      	push	{r7}
 80071ea:	b085      	sub	sp, #20
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e014      	b.n	8007222 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071f8:	4a0e      	ldr	r2, [pc, #56]	; (8007234 <vQueueAddToRegistry+0x4c>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007204:	490b      	ldr	r1, [pc, #44]	; (8007234 <vQueueAddToRegistry+0x4c>)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800720e:	4a09      	ldr	r2, [pc, #36]	; (8007234 <vQueueAddToRegistry+0x4c>)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	4413      	add	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800721a:	e005      	b.n	8007228 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3301      	adds	r3, #1
 8007220:	60fb      	str	r3, [r7, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2b07      	cmp	r3, #7
 8007226:	d9e7      	bls.n	80071f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	2000316c 	.word	0x2000316c

08007238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007248:	f001 fb96 	bl	8008978 <vPortEnterCritical>
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007252:	b25b      	sxtb	r3, r3
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d103      	bne.n	8007262 <vQueueWaitForMessageRestricted+0x2a>
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007268:	b25b      	sxtb	r3, r3
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d103      	bne.n	8007278 <vQueueWaitForMessageRestricted+0x40>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007278:	f001 fbac 	bl	80089d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fcbf 	bl	8007c10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007292:	6978      	ldr	r0, [r7, #20]
 8007294:	f7ff ff28 	bl	80070e8 <prvUnlockQueue>
	}
 8007298:	bf00      	nop
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08e      	sub	sp, #56	; 0x38
 80072a4:	af04      	add	r7, sp, #16
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <xTaskCreateStatic+0x28>
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	e7fe      	b.n	80072c6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80072c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d109      	bne.n	80072e2 <xTaskCreateStatic+0x42>
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	61fb      	str	r3, [r7, #28]
 80072e0:	e7fe      	b.n	80072e0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072e2:	2374      	movs	r3, #116	; 0x74
 80072e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b74      	cmp	r3, #116	; 0x74
 80072ea:	d009      	beq.n	8007300 <xTaskCreateStatic+0x60>
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	e7fe      	b.n	80072fe <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	2b00      	cmp	r3, #0
 8007304:	d01e      	beq.n	8007344 <xTaskCreateStatic+0xa4>
 8007306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01b      	beq.n	8007344 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007314:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	2202      	movs	r2, #2
 800731a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800731e:	2300      	movs	r3, #0
 8007320:	9303      	str	r3, [sp, #12]
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	9302      	str	r3, [sp, #8]
 8007326:	f107 0314 	add.w	r3, r7, #20
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	9300      	str	r3, [sp, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 f850 	bl	80073dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800733c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800733e:	f000 f8d9 	bl	80074f4 <prvAddNewTaskToReadyList>
 8007342:	e001      	b.n	8007348 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007348:	697b      	ldr	r3, [r7, #20]
	}
 800734a:	4618      	mov	r0, r3
 800734c:	3728      	adds	r7, #40	; 0x28
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007352:	b580      	push	{r7, lr}
 8007354:	b08c      	sub	sp, #48	; 0x30
 8007356:	af04      	add	r7, sp, #16
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f001 fbfc 	bl	8008b64 <pvPortMalloc>
 800736c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00e      	beq.n	8007392 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007374:	2074      	movs	r0, #116	; 0x74
 8007376:	f001 fbf5 	bl	8008b64 <pvPortMalloc>
 800737a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	631a      	str	r2, [r3, #48]	; 0x30
 8007388:	e005      	b.n	8007396 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800738a:	6978      	ldr	r0, [r7, #20]
 800738c:	f001 fcac 	bl	8008ce8 <vPortFree>
 8007390:	e001      	b.n	8007396 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007392:	2300      	movs	r3, #0
 8007394:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d017      	beq.n	80073cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073a4:	88fa      	ldrh	r2, [r7, #6]
 80073a6:	2300      	movs	r3, #0
 80073a8:	9303      	str	r3, [sp, #12]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	9302      	str	r3, [sp, #8]
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	9301      	str	r3, [sp, #4]
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68b9      	ldr	r1, [r7, #8]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f000 f80e 	bl	80073dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c0:	69f8      	ldr	r0, [r7, #28]
 80073c2:	f000 f897 	bl	80074f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073c6:	2301      	movs	r3, #1
 80073c8:	61bb      	str	r3, [r7, #24]
 80073ca:	e002      	b.n	80073d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073cc:	f04f 33ff 	mov.w	r3, #4294967295
 80073d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073d2:	69bb      	ldr	r3, [r7, #24]
	}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3720      	adds	r7, #32
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	461a      	mov	r2, r3
 80073f4:	21a5      	movs	r1, #165	; 0xa5
 80073f6:	f002 fa5e 	bl	80098b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007404:	3b01      	subs	r3, #1
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f023 0307 	bic.w	r3, r3, #7
 8007412:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <prvInitialiseNewTask+0x56>
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	e7fe      	b.n	8007430 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e012      	b.n	8007464 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	4413      	add	r3, r2
 8007444:	7819      	ldrb	r1, [r3, #0]
 8007446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	4413      	add	r3, r2
 800744c:	3334      	adds	r3, #52	; 0x34
 800744e:	460a      	mov	r2, r1
 8007450:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d006      	beq.n	800746c <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	3301      	adds	r3, #1
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	2b1f      	cmp	r3, #31
 8007468:	d9e9      	bls.n	800743e <prvInitialiseNewTask+0x62>
 800746a:	e000      	b.n	800746e <prvInitialiseNewTask+0x92>
		{
			break;
 800746c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	2b37      	cmp	r3, #55	; 0x37
 800747a:	d901      	bls.n	8007480 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800747c:	2337      	movs	r3, #55	; 0x37
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007484:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748a:	661a      	str	r2, [r3, #96]	; 0x60
		pxNewTCB->uxMutexesHeld = 0;
 800748c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748e:	2200      	movs	r2, #0
 8007490:	665a      	str	r2, [r3, #100]	; 0x64
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	3304      	adds	r3, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff f961 	bl	800675e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	3318      	adds	r3, #24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f7ff f95c 	bl	800675e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	2200      	movs	r2, #0
 80074c0:	669a      	str	r2, [r3, #104]	; 0x68
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	2200      	movs	r2, #0
 80074c6:	66da      	str	r2, [r3, #108]	; 0x6c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	69b8      	ldr	r0, [r7, #24]
 80074d6:	f001 f967 	bl	80087a8 <pxPortInitialiseStack>
 80074da:	4602      	mov	r2, r0
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ec:	bf00      	nop
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074fc:	f001 fa3c 	bl	8008978 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007500:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a2c      	ldr	r2, [pc, #176]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 8007508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800750a:	4b2c      	ldr	r3, [pc, #176]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007518:	4b27      	ldr	r3, [pc, #156]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d110      	bne.n	8007542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007520:	f000 fc9c 	bl	8007e5c <prvInitialiseTaskLists>
 8007524:	e00d      	b.n	8007542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <prvAddNewTaskToReadyList+0xcc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800752e:	4b23      	ldr	r3, [pc, #140]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d802      	bhi.n	8007542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800753c:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 800754a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	659a      	str	r2, [r3, #88]	; 0x58
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <prvAddNewTaskToReadyList+0xd4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d903      	bls.n	8007568 <prvAddNewTaskToReadyList+0x74>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <prvAddNewTaskToReadyList+0xd4>)
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <prvAddNewTaskToReadyList+0xd8>)
 8007576:	441a      	add	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7ff f8f9 	bl	8006776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007584:	f001 fa26 	bl	80089d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <prvAddNewTaskToReadyList+0xcc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	429a      	cmp	r2, r3
 800759c:	d207      	bcs.n	80075ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <prvAddNewTaskToReadyList+0xdc>)
 80075a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	20000d60 	.word	0x20000d60
 80075bc:	2000088c 	.word	0x2000088c
 80075c0:	20000d6c 	.word	0x20000d6c
 80075c4:	20000d7c 	.word	0x20000d7c
 80075c8:	20000d68 	.word	0x20000d68
 80075cc:	20000890 	.word	0x20000890
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80075dc:	f001 f9cc 	bl	8008978 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d102      	bne.n	80075ec <vTaskDelete+0x18>
 80075e6:	4b2c      	ldr	r3, [pc, #176]	; (8007698 <vTaskDelete+0xc4>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	e000      	b.n	80075ee <vTaskDelete+0x1a>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3304      	adds	r3, #4
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7ff f919 	bl	800682c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3318      	adds	r3, #24
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff f910 	bl	800682c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800760c:	4b23      	ldr	r3, [pc, #140]	; (800769c <vTaskDelete+0xc8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a22      	ldr	r2, [pc, #136]	; (800769c <vTaskDelete+0xc8>)
 8007614:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007616:	4b20      	ldr	r3, [pc, #128]	; (8007698 <vTaskDelete+0xc4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	429a      	cmp	r2, r3
 800761e:	d10b      	bne.n	8007638 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	481e      	ldr	r0, [pc, #120]	; (80076a0 <vTaskDelete+0xcc>)
 8007628:	f7ff f8a5 	bl	8006776 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800762c:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <vTaskDelete+0xd0>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3301      	adds	r3, #1
 8007632:	4a1c      	ldr	r2, [pc, #112]	; (80076a4 <vTaskDelete+0xd0>)
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	e009      	b.n	800764c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <vTaskDelete+0xd4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3b01      	subs	r3, #1
 800763e:	4a1a      	ldr	r2, [pc, #104]	; (80076a8 <vTaskDelete+0xd4>)
 8007640:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fc76 	bl	8007f34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007648:	f000 fca2 	bl	8007f90 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800764c:	f001 f9c2 	bl	80089d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007650:	4b16      	ldr	r3, [pc, #88]	; (80076ac <vTaskDelete+0xd8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01a      	beq.n	800768e <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <vTaskDelete+0xc4>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	429a      	cmp	r2, r3
 8007660:	d115      	bne.n	800768e <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007662:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <vTaskDelete+0xdc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d009      	beq.n	800767e <vTaskDelete+0xaa>
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	60bb      	str	r3, [r7, #8]
 800767c:	e7fe      	b.n	800767c <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 800767e:	4b0d      	ldr	r3, [pc, #52]	; (80076b4 <vTaskDelete+0xe0>)
 8007680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800768e:	bf00      	nop
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	2000088c 	.word	0x2000088c
 800769c:	20000d7c 	.word	0x20000d7c
 80076a0:	20000d34 	.word	0x20000d34
 80076a4:	20000d48 	.word	0x20000d48
 80076a8:	20000d60 	.word	0x20000d60
 80076ac:	20000d6c 	.word	0x20000d6c
 80076b0:	20000d88 	.word	0x20000d88
 80076b4:	e000ed04 	.word	0xe000ed04

080076b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d016      	beq.n	80076f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076ca:	4b13      	ldr	r3, [pc, #76]	; (8007718 <vTaskDelay+0x60>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d009      	beq.n	80076e6 <vTaskDelay+0x2e>
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	60bb      	str	r3, [r7, #8]
 80076e4:	e7fe      	b.n	80076e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80076e6:	f000 f881 	bl	80077ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076ea:	2100      	movs	r1, #0
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fcfd 	bl	80080ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076f2:	f000 f889 	bl	8007808 <xTaskResumeAll>
 80076f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d107      	bne.n	800770e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <vTaskDelay+0x64>)
 8007700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20000d88 	.word	0x20000d88
 800771c:	e000ed04 	.word	0xe000ed04

08007720 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08a      	sub	sp, #40	; 0x28
 8007724:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007726:	2300      	movs	r3, #0
 8007728:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800772a:	2300      	movs	r3, #0
 800772c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800772e:	463a      	mov	r2, r7
 8007730:	1d39      	adds	r1, r7, #4
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe ffc0 	bl	80066bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800773c:	6839      	ldr	r1, [r7, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	9202      	str	r2, [sp, #8]
 8007744:	9301      	str	r3, [sp, #4]
 8007746:	2300      	movs	r3, #0
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	2300      	movs	r3, #0
 800774c:	460a      	mov	r2, r1
 800774e:	4921      	ldr	r1, [pc, #132]	; (80077d4 <vTaskStartScheduler+0xb4>)
 8007750:	4821      	ldr	r0, [pc, #132]	; (80077d8 <vTaskStartScheduler+0xb8>)
 8007752:	f7ff fda5 	bl	80072a0 <xTaskCreateStatic>
 8007756:	4602      	mov	r2, r0
 8007758:	4b20      	ldr	r3, [pc, #128]	; (80077dc <vTaskStartScheduler+0xbc>)
 800775a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800775c:	4b1f      	ldr	r3, [pc, #124]	; (80077dc <vTaskStartScheduler+0xbc>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007764:	2301      	movs	r3, #1
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e001      	b.n	800776e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d102      	bne.n	800777a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007774:	f000 fd0e 	bl	8008194 <xTimerCreateTimerTask>
 8007778:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d117      	bne.n	80077b0 <vTaskStartScheduler+0x90>
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007792:	4b13      	ldr	r3, [pc, #76]	; (80077e0 <vTaskStartScheduler+0xc0>)
 8007794:	f04f 32ff 	mov.w	r2, #4294967295
 8007798:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800779a:	4b12      	ldr	r3, [pc, #72]	; (80077e4 <vTaskStartScheduler+0xc4>)
 800779c:	2201      	movs	r2, #1
 800779e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80077a0:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <vTaskStartScheduler+0xc8>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80077a6:	f7f8 fdae 	bl	8000306 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077aa:	f001 f875 	bl	8008898 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077ae:	e00d      	b.n	80077cc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b6:	d109      	bne.n	80077cc <vTaskStartScheduler+0xac>
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e7fe      	b.n	80077ca <vTaskStartScheduler+0xaa>
}
 80077cc:	bf00      	nop
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	08009a04 	.word	0x08009a04
 80077d8:	08007e2d 	.word	0x08007e2d
 80077dc:	20000d84 	.word	0x20000d84
 80077e0:	20000d80 	.word	0x20000d80
 80077e4:	20000d6c 	.word	0x20000d6c
 80077e8:	20000d64 	.word	0x20000d64

080077ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80077f0:	4b04      	ldr	r3, [pc, #16]	; (8007804 <vTaskSuspendAll+0x18>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	4a03      	ldr	r2, [pc, #12]	; (8007804 <vTaskSuspendAll+0x18>)
 80077f8:	6013      	str	r3, [r2, #0]
}
 80077fa:	bf00      	nop
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bc80      	pop	{r7}
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	20000d88 	.word	0x20000d88

08007808 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800780e:	2300      	movs	r3, #0
 8007810:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007812:	2300      	movs	r3, #0
 8007814:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007816:	4b41      	ldr	r3, [pc, #260]	; (800791c <xTaskResumeAll+0x114>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <xTaskResumeAll+0x2a>
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	603b      	str	r3, [r7, #0]
 8007830:	e7fe      	b.n	8007830 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007832:	f001 f8a1 	bl	8008978 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007836:	4b39      	ldr	r3, [pc, #228]	; (800791c <xTaskResumeAll+0x114>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a37      	ldr	r2, [pc, #220]	; (800791c <xTaskResumeAll+0x114>)
 800783e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007840:	4b36      	ldr	r3, [pc, #216]	; (800791c <xTaskResumeAll+0x114>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d162      	bne.n	800790e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007848:	4b35      	ldr	r3, [pc, #212]	; (8007920 <xTaskResumeAll+0x118>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d05e      	beq.n	800790e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007850:	e02f      	b.n	80078b2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007852:	4b34      	ldr	r3, [pc, #208]	; (8007924 <xTaskResumeAll+0x11c>)
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3318      	adds	r3, #24
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe ffe4 	bl	800682c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3304      	adds	r3, #4
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe ffdf 	bl	800682c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	4b2d      	ldr	r3, [pc, #180]	; (8007928 <xTaskResumeAll+0x120>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	429a      	cmp	r2, r3
 8007878:	d903      	bls.n	8007882 <xTaskResumeAll+0x7a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787e:	4a2a      	ldr	r2, [pc, #168]	; (8007928 <xTaskResumeAll+0x120>)
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007886:	4613      	mov	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	4a27      	ldr	r2, [pc, #156]	; (800792c <xTaskResumeAll+0x124>)
 8007890:	441a      	add	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3304      	adds	r3, #4
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7fe ff6c 	bl	8006776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	4b23      	ldr	r3, [pc, #140]	; (8007930 <xTaskResumeAll+0x128>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d302      	bcc.n	80078b2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80078ac:	4b21      	ldr	r3, [pc, #132]	; (8007934 <xTaskResumeAll+0x12c>)
 80078ae:	2201      	movs	r2, #1
 80078b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078b2:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <xTaskResumeAll+0x11c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1cb      	bne.n	8007852 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078c0:	f000 fb66 	bl	8007f90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078c4:	4b1c      	ldr	r3, [pc, #112]	; (8007938 <xTaskResumeAll+0x130>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078d0:	f000 f844 	bl	800795c <xTaskIncrementTick>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80078da:	4b16      	ldr	r3, [pc, #88]	; (8007934 <xTaskResumeAll+0x12c>)
 80078dc:	2201      	movs	r2, #1
 80078de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1f1      	bne.n	80078d0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80078ec:	4b12      	ldr	r3, [pc, #72]	; (8007938 <xTaskResumeAll+0x130>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <xTaskResumeAll+0x12c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d009      	beq.n	800790e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <xTaskResumeAll+0x134>)
 8007900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007904:	601a      	str	r2, [r3, #0]
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800790e:	f001 f861 	bl	80089d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007912:	68bb      	ldr	r3, [r7, #8]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000d88 	.word	0x20000d88
 8007920:	20000d60 	.word	0x20000d60
 8007924:	20000d20 	.word	0x20000d20
 8007928:	20000d68 	.word	0x20000d68
 800792c:	20000890 	.word	0x20000890
 8007930:	2000088c 	.word	0x2000088c
 8007934:	20000d74 	.word	0x20000d74
 8007938:	20000d70 	.word	0x20000d70
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007946:	4b04      	ldr	r3, [pc, #16]	; (8007958 <xTaskGetTickCount+0x18>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800794c:	687b      	ldr	r3, [r7, #4]
}
 800794e:	4618      	mov	r0, r3
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	bc80      	pop	{r7}
 8007956:	4770      	bx	lr
 8007958:	20000d64 	.word	0x20000d64

0800795c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007966:	4b51      	ldr	r3, [pc, #324]	; (8007aac <xTaskIncrementTick+0x150>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f040 808d 	bne.w	8007a8a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007970:	4b4f      	ldr	r3, [pc, #316]	; (8007ab0 <xTaskIncrementTick+0x154>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007978:	4a4d      	ldr	r2, [pc, #308]	; (8007ab0 <xTaskIncrementTick+0x154>)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d11f      	bne.n	80079c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007984:	4b4b      	ldr	r3, [pc, #300]	; (8007ab4 <xTaskIncrementTick+0x158>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <xTaskIncrementTick+0x46>
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	e7fe      	b.n	80079a0 <xTaskIncrementTick+0x44>
 80079a2:	4b44      	ldr	r3, [pc, #272]	; (8007ab4 <xTaskIncrementTick+0x158>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
 80079a8:	4b43      	ldr	r3, [pc, #268]	; (8007ab8 <xTaskIncrementTick+0x15c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a41      	ldr	r2, [pc, #260]	; (8007ab4 <xTaskIncrementTick+0x158>)
 80079ae:	6013      	str	r3, [r2, #0]
 80079b0:	4a41      	ldr	r2, [pc, #260]	; (8007ab8 <xTaskIncrementTick+0x15c>)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	4b41      	ldr	r3, [pc, #260]	; (8007abc <xTaskIncrementTick+0x160>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	4a3f      	ldr	r2, [pc, #252]	; (8007abc <xTaskIncrementTick+0x160>)
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	f000 fae6 	bl	8007f90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079c4:	4b3e      	ldr	r3, [pc, #248]	; (8007ac0 <xTaskIncrementTick+0x164>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d34e      	bcc.n	8007a6c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ce:	4b39      	ldr	r3, [pc, #228]	; (8007ab4 <xTaskIncrementTick+0x158>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <xTaskIncrementTick+0x80>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <xTaskIncrementTick+0x82>
 80079dc:	2300      	movs	r3, #0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e2:	4b37      	ldr	r3, [pc, #220]	; (8007ac0 <xTaskIncrementTick+0x164>)
 80079e4:	f04f 32ff 	mov.w	r2, #4294967295
 80079e8:	601a      	str	r2, [r3, #0]
					break;
 80079ea:	e03f      	b.n	8007a6c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80079ec:	4b31      	ldr	r3, [pc, #196]	; (8007ab4 <xTaskIncrementTick+0x158>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d203      	bcs.n	8007a0c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a04:	4a2e      	ldr	r2, [pc, #184]	; (8007ac0 <xTaskIncrementTick+0x164>)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6013      	str	r3, [r2, #0]
						break;
 8007a0a:	e02f      	b.n	8007a6c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe ff0b 	bl	800682c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d004      	beq.n	8007a28 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	3318      	adds	r3, #24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe ff02 	bl	800682c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2c:	4b25      	ldr	r3, [pc, #148]	; (8007ac4 <xTaskIncrementTick+0x168>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d903      	bls.n	8007a3c <xTaskIncrementTick+0xe0>
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	4a22      	ldr	r2, [pc, #136]	; (8007ac4 <xTaskIncrementTick+0x168>)
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4a1f      	ldr	r2, [pc, #124]	; (8007ac8 <xTaskIncrementTick+0x16c>)
 8007a4a:	441a      	add	r2, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f7fe fe8f 	bl	8006776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5c:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <xTaskIncrementTick+0x170>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d3b3      	bcc.n	80079ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007a66:	2301      	movs	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a6a:	e7b0      	b.n	80079ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a6c:	4b17      	ldr	r3, [pc, #92]	; (8007acc <xTaskIncrementTick+0x170>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a72:	4915      	ldr	r1, [pc, #84]	; (8007ac8 <xTaskIncrementTick+0x16c>)
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d907      	bls.n	8007a94 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
 8007a88:	e004      	b.n	8007a94 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a8a:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <xTaskIncrementTick+0x174>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <xTaskIncrementTick+0x174>)
 8007a92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a94:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <xTaskIncrementTick+0x178>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007aa0:	697b      	ldr	r3, [r7, #20]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000d88 	.word	0x20000d88
 8007ab0:	20000d64 	.word	0x20000d64
 8007ab4:	20000d18 	.word	0x20000d18
 8007ab8:	20000d1c 	.word	0x20000d1c
 8007abc:	20000d78 	.word	0x20000d78
 8007ac0:	20000d80 	.word	0x20000d80
 8007ac4:	20000d68 	.word	0x20000d68
 8007ac8:	20000890 	.word	0x20000890
 8007acc:	2000088c 	.word	0x2000088c
 8007ad0:	20000d70 	.word	0x20000d70
 8007ad4:	20000d74 	.word	0x20000d74

08007ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ade:	4b33      	ldr	r3, [pc, #204]	; (8007bac <vTaskSwitchContext+0xd4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ae6:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <vTaskSwitchContext+0xd8>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007aec:	e059      	b.n	8007ba2 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007aee:	4b30      	ldr	r3, [pc, #192]	; (8007bb0 <vTaskSwitchContext+0xd8>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007af4:	f7f8 fc0d 	bl	8000312 <getRunTimeCounterValue>
 8007af8:	4602      	mov	r2, r0
 8007afa:	4b2e      	ldr	r3, [pc, #184]	; (8007bb4 <vTaskSwitchContext+0xdc>)
 8007afc:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007afe:	4b2d      	ldr	r3, [pc, #180]	; (8007bb4 <vTaskSwitchContext+0xdc>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b2d      	ldr	r3, [pc, #180]	; (8007bb8 <vTaskSwitchContext+0xe0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d909      	bls.n	8007b1e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007b0a:	4b2c      	ldr	r3, [pc, #176]	; (8007bbc <vTaskSwitchContext+0xe4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8007b10:	4a28      	ldr	r2, [pc, #160]	; (8007bb4 <vTaskSwitchContext+0xdc>)
 8007b12:	6810      	ldr	r0, [r2, #0]
 8007b14:	4a28      	ldr	r2, [pc, #160]	; (8007bb8 <vTaskSwitchContext+0xe0>)
 8007b16:	6812      	ldr	r2, [r2, #0]
 8007b18:	1a82      	subs	r2, r0, r2
 8007b1a:	440a      	add	r2, r1
 8007b1c:	669a      	str	r2, [r3, #104]	; 0x68
				ulTaskSwitchedInTime = ulTotalRunTime;
 8007b1e:	4b25      	ldr	r3, [pc, #148]	; (8007bb4 <vTaskSwitchContext+0xdc>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a25      	ldr	r2, [pc, #148]	; (8007bb8 <vTaskSwitchContext+0xe0>)
 8007b24:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b26:	4b26      	ldr	r3, [pc, #152]	; (8007bc0 <vTaskSwitchContext+0xe8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	e00f      	b.n	8007b4e <vTaskSwitchContext+0x76>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <vTaskSwitchContext+0x70>
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	e7fe      	b.n	8007b46 <vTaskSwitchContext+0x6e>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	491d      	ldr	r1, [pc, #116]	; (8007bc4 <vTaskSwitchContext+0xec>)
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0e5      	beq.n	8007b2e <vTaskSwitchContext+0x56>
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a15      	ldr	r2, [pc, #84]	; (8007bc4 <vTaskSwitchContext+0xec>)
 8007b6e:	4413      	add	r3, r2
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	605a      	str	r2, [r3, #4]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	3308      	adds	r3, #8
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d104      	bne.n	8007b92 <vTaskSwitchContext+0xba>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <vTaskSwitchContext+0xe4>)
 8007b9a:	6013      	str	r3, [r2, #0]
 8007b9c:	4a08      	ldr	r2, [pc, #32]	; (8007bc0 <vTaskSwitchContext+0xe8>)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6013      	str	r3, [r2, #0]
}
 8007ba2:	bf00      	nop
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20000d88 	.word	0x20000d88
 8007bb0:	20000d74 	.word	0x20000d74
 8007bb4:	20000d90 	.word	0x20000d90
 8007bb8:	20000d8c 	.word	0x20000d8c
 8007bbc:	2000088c 	.word	0x2000088c
 8007bc0:	20000d68 	.word	0x20000d68
 8007bc4:	20000890 	.word	0x20000890

08007bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <vTaskPlaceOnEventList+0x24>
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e7fe      	b.n	8007bea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <vTaskPlaceOnEventList+0x44>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3318      	adds	r3, #24
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe fde1 	bl	80067bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6838      	ldr	r0, [r7, #0]
 8007bfe:	f000 fa75 	bl	80080ec <prvAddCurrentTaskToDelayedList>
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000088c 	.word	0x2000088c

08007c10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <vTaskPlaceOnEventListRestricted+0x26>
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e7fe      	b.n	8007c34 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c36:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <vTaskPlaceOnEventListRestricted+0x50>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	3318      	adds	r3, #24
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	68f8      	ldr	r0, [r7, #12]
 8007c40:	f7fe fd99 	bl	8006776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	68b8      	ldr	r0, [r7, #8]
 8007c54:	f000 fa4a 	bl	80080ec <prvAddCurrentTaskToDelayedList>
	}
 8007c58:	bf00      	nop
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	2000088c 	.word	0x2000088c

08007c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <xTaskRemoveFromEventList+0x2a>
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e7fe      	b.n	8007c8c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3318      	adds	r3, #24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7fe fdca 	bl	800682c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <xTaskRemoveFromEventList+0xac>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d11d      	bne.n	8007cdc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fdc1 	bl	800682c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cae:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <xTaskRemoveFromEventList+0xb0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d903      	bls.n	8007cbe <xTaskRemoveFromEventList+0x5a>
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <xTaskRemoveFromEventList+0xb0>)
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4a13      	ldr	r2, [pc, #76]	; (8007d18 <xTaskRemoveFromEventList+0xb4>)
 8007ccc:	441a      	add	r2, r3
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	3304      	adds	r3, #4
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7fe fd4e 	bl	8006776 <vListInsertEnd>
 8007cda:	e005      	b.n	8007ce8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	3318      	adds	r3, #24
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	480e      	ldr	r0, [pc, #56]	; (8007d1c <xTaskRemoveFromEventList+0xb8>)
 8007ce4:	f7fe fd47 	bl	8006776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <xTaskRemoveFromEventList+0xbc>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d905      	bls.n	8007d02 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <xTaskRemoveFromEventList+0xc0>)
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e001      	b.n	8007d06 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d06:	697b      	ldr	r3, [r7, #20]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000d88 	.word	0x20000d88
 8007d14:	20000d68 	.word	0x20000d68
 8007d18:	20000890 	.word	0x20000890
 8007d1c:	20000d20 	.word	0x20000d20
 8007d20:	2000088c 	.word	0x2000088c
 8007d24:	20000d74 	.word	0x20000d74

08007d28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d30:	4b06      	ldr	r3, [pc, #24]	; (8007d4c <vTaskInternalSetTimeOutState+0x24>)
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d38:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <vTaskInternalSetTimeOutState+0x28>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	605a      	str	r2, [r3, #4]
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20000d78 	.word	0x20000d78
 8007d50:	20000d64 	.word	0x20000d64

08007d54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <xTaskCheckForTimeOut+0x24>
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	e7fe      	b.n	8007d76 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d109      	bne.n	8007d92 <xTaskCheckForTimeOut+0x3e>
 8007d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	60fb      	str	r3, [r7, #12]
 8007d90:	e7fe      	b.n	8007d90 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007d92:	f000 fdf1 	bl	8008978 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d96:	4b1d      	ldr	r3, [pc, #116]	; (8007e0c <xTaskCheckForTimeOut+0xb8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d102      	bne.n	8007db6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]
 8007db4:	e023      	b.n	8007dfe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <xTaskCheckForTimeOut+0xbc>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d007      	beq.n	8007dd2 <xTaskCheckForTimeOut+0x7e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e015      	b.n	8007dfe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d20b      	bcs.n	8007df4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	1ad2      	subs	r2, r2, r3
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7ff ff9d 	bl	8007d28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61fb      	str	r3, [r7, #28]
 8007df2:	e004      	b.n	8007dfe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f000 fde9 	bl	80089d4 <vPortExitCritical>

	return xReturn;
 8007e02:	69fb      	ldr	r3, [r7, #28]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000d64 	.word	0x20000d64
 8007e10:	20000d78 	.word	0x20000d78

08007e14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <vTaskMissedYield+0x14>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	20000d74 	.word	0x20000d74

08007e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e34:	f000 f852 	bl	8007edc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <prvIdleTask+0x28>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d9f9      	bls.n	8007e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <prvIdleTask+0x2c>)
 8007e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e46:	601a      	str	r2, [r3, #0]
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e50:	e7f0      	b.n	8007e34 <prvIdleTask+0x8>
 8007e52:	bf00      	nop
 8007e54:	20000890 	.word	0x20000890
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e62:	2300      	movs	r3, #0
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e00c      	b.n	8007e82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	4a12      	ldr	r2, [pc, #72]	; (8007ebc <prvInitialiseTaskLists+0x60>)
 8007e74:	4413      	add	r3, r2
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fc52 	bl	8006720 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2b37      	cmp	r3, #55	; 0x37
 8007e86:	d9ef      	bls.n	8007e68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e88:	480d      	ldr	r0, [pc, #52]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007e8a:	f7fe fc49 	bl	8006720 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e8e:	480d      	ldr	r0, [pc, #52]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007e90:	f7fe fc46 	bl	8006720 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e94:	480c      	ldr	r0, [pc, #48]	; (8007ec8 <prvInitialiseTaskLists+0x6c>)
 8007e96:	f7fe fc43 	bl	8006720 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e9a:	480c      	ldr	r0, [pc, #48]	; (8007ecc <prvInitialiseTaskLists+0x70>)
 8007e9c:	f7fe fc40 	bl	8006720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ea0:	480b      	ldr	r0, [pc, #44]	; (8007ed0 <prvInitialiseTaskLists+0x74>)
 8007ea2:	f7fe fc3d 	bl	8006720 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <prvInitialiseTaskLists+0x78>)
 8007ea8:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <prvInitialiseTaskLists+0x64>)
 8007eaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <prvInitialiseTaskLists+0x7c>)
 8007eae:	4a05      	ldr	r2, [pc, #20]	; (8007ec4 <prvInitialiseTaskLists+0x68>)
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000890 	.word	0x20000890
 8007ec0:	20000cf0 	.word	0x20000cf0
 8007ec4:	20000d04 	.word	0x20000d04
 8007ec8:	20000d20 	.word	0x20000d20
 8007ecc:	20000d34 	.word	0x20000d34
 8007ed0:	20000d4c 	.word	0x20000d4c
 8007ed4:	20000d18 	.word	0x20000d18
 8007ed8:	20000d1c 	.word	0x20000d1c

08007edc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ee2:	e019      	b.n	8007f18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ee4:	f000 fd48 	bl	8008978 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ee8:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <prvCheckTasksWaitingTermination+0x4c>)
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fc99 	bl	800682c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007efa:	4b0c      	ldr	r3, [pc, #48]	; (8007f2c <prvCheckTasksWaitingTermination+0x50>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <prvCheckTasksWaitingTermination+0x50>)
 8007f02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f04:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	4a09      	ldr	r2, [pc, #36]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007f0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f0e:	f000 fd61 	bl	80089d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f80e 	bl	8007f34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f18:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <prvCheckTasksWaitingTermination+0x54>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e1      	bne.n	8007ee4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	20000d34 	.word	0x20000d34
 8007f2c:	20000d60 	.word	0x20000d60
 8007f30:	20000d48 	.word	0x20000d48

08007f34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d108      	bne.n	8007f58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 fecc 	bl	8008ce8 <vPortFree>
				vPortFree( pxTCB );
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fec9 	bl	8008ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f56:	e017      	b.n	8007f88 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d103      	bne.n	8007f6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fec0 	bl	8008ce8 <vPortFree>
	}
 8007f68:	e00e      	b.n	8007f88 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d009      	beq.n	8007f88 <prvDeleteTCB+0x54>
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	60fb      	str	r3, [r7, #12]
 8007f86:	e7fe      	b.n	8007f86 <prvDeleteTCB+0x52>
	}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f96:	4b0e      	ldr	r3, [pc, #56]	; (8007fd0 <prvResetNextTaskUnblockTime+0x40>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <prvResetNextTaskUnblockTime+0x14>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <prvResetNextTaskUnblockTime+0x16>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <prvResetNextTaskUnblockTime+0x44>)
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fb2:	e008      	b.n	8007fc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <prvResetNextTaskUnblockTime+0x40>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	4a04      	ldr	r2, [pc, #16]	; (8007fd4 <prvResetNextTaskUnblockTime+0x44>)
 8007fc4:	6013      	str	r3, [r2, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bc80      	pop	{r7}
 8007fce:	4770      	bx	lr
 8007fd0:	20000d18 	.word	0x20000d18
 8007fd4:	20000d80 	.word	0x20000d80

08007fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fde:	4b0b      	ldr	r3, [pc, #44]	; (800800c <xTaskGetSchedulerState+0x34>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	607b      	str	r3, [r7, #4]
 8007fea:	e008      	b.n	8007ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fec:	4b08      	ldr	r3, [pc, #32]	; (8008010 <xTaskGetSchedulerState+0x38>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	607b      	str	r3, [r7, #4]
 8007ff8:	e001      	b.n	8007ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ffe:	687b      	ldr	r3, [r7, #4]
	}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000d6c 	.word	0x20000d6c
 8008010:	20000d88 	.word	0x20000d88

08008014 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008020:	2300      	movs	r3, #0
 8008022:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d054      	beq.n	80080d4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800802a:	4b2d      	ldr	r3, [pc, #180]	; (80080e0 <xTaskPriorityDisinherit+0xcc>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	429a      	cmp	r2, r3
 8008032:	d009      	beq.n	8008048 <xTaskPriorityDisinherit+0x34>
 8008034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e7fe      	b.n	8008046 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <xTaskPriorityDisinherit+0x50>
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	60bb      	str	r3, [r7, #8]
 8008062:	e7fe      	b.n	8008062 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008068:	1e5a      	subs	r2, r3, #1
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	665a      	str	r2, [r3, #100]	; 0x64

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008076:	429a      	cmp	r2, r3
 8008078:	d02c      	beq.n	80080d4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807e:	2b00      	cmp	r3, #0
 8008080:	d128      	bne.n	80080d4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3304      	adds	r3, #4
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fbd0 	bl	800682c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <xTaskPriorityDisinherit+0xd0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d903      	bls.n	80080b4 <xTaskPriorityDisinherit+0xa0>
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b0:	4a0c      	ldr	r2, [pc, #48]	; (80080e4 <xTaskPriorityDisinherit+0xd0>)
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4a09      	ldr	r2, [pc, #36]	; (80080e8 <xTaskPriorityDisinherit+0xd4>)
 80080c2:	441a      	add	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	3304      	adds	r3, #4
 80080c8:	4619      	mov	r1, r3
 80080ca:	4610      	mov	r0, r2
 80080cc:	f7fe fb53 	bl	8006776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d0:	2301      	movs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080d4:	697b      	ldr	r3, [r7, #20]
	}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	2000088c 	.word	0x2000088c
 80080e4:	20000d68 	.word	0x20000d68
 80080e8:	20000890 	.word	0x20000890

080080ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080f6:	4b21      	ldr	r3, [pc, #132]	; (800817c <prvAddCurrentTaskToDelayedList+0x90>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080fc:	4b20      	ldr	r3, [pc, #128]	; (8008180 <prvAddCurrentTaskToDelayedList+0x94>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3304      	adds	r3, #4
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fb92 	bl	800682c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800810e:	d10a      	bne.n	8008126 <prvAddCurrentTaskToDelayedList+0x3a>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008116:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <prvAddCurrentTaskToDelayedList+0x94>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3304      	adds	r3, #4
 800811c:	4619      	mov	r1, r3
 800811e:	4819      	ldr	r0, [pc, #100]	; (8008184 <prvAddCurrentTaskToDelayedList+0x98>)
 8008120:	f7fe fb29 	bl	8006776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008124:	e026      	b.n	8008174 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4413      	add	r3, r2
 800812c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800812e:	4b14      	ldr	r3, [pc, #80]	; (8008180 <prvAddCurrentTaskToDelayedList+0x94>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	429a      	cmp	r2, r3
 800813c:	d209      	bcs.n	8008152 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800813e:	4b12      	ldr	r3, [pc, #72]	; (8008188 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <prvAddCurrentTaskToDelayedList+0x94>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3304      	adds	r3, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f7fe fb36 	bl	80067bc <vListInsert>
}
 8008150:	e010      	b.n	8008174 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008152:	4b0e      	ldr	r3, [pc, #56]	; (800818c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <prvAddCurrentTaskToDelayedList+0x94>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3304      	adds	r3, #4
 800815c:	4619      	mov	r1, r3
 800815e:	4610      	mov	r0, r2
 8008160:	f7fe fb2c 	bl	80067bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008164:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	429a      	cmp	r2, r3
 800816c:	d202      	bcs.n	8008174 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800816e:	4a08      	ldr	r2, [pc, #32]	; (8008190 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	6013      	str	r3, [r2, #0]
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	20000d64 	.word	0x20000d64
 8008180:	2000088c 	.word	0x2000088c
 8008184:	20000d4c 	.word	0x20000d4c
 8008188:	20000d1c 	.word	0x20000d1c
 800818c:	20000d18 	.word	0x20000d18
 8008190:	20000d80 	.word	0x20000d80

08008194 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08a      	sub	sp, #40	; 0x28
 8008198:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800819a:	2300      	movs	r3, #0
 800819c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800819e:	f000 fac3 	bl	8008728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081a2:	4b1c      	ldr	r3, [pc, #112]	; (8008214 <xTimerCreateTimerTask+0x80>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d021      	beq.n	80081ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081b2:	1d3a      	adds	r2, r7, #4
 80081b4:	f107 0108 	add.w	r1, r7, #8
 80081b8:	f107 030c 	add.w	r3, r7, #12
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fa95 	bl	80066ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081c2:	6879      	ldr	r1, [r7, #4]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	9202      	str	r2, [sp, #8]
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	2302      	movs	r3, #2
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	2300      	movs	r3, #0
 80081d2:	460a      	mov	r2, r1
 80081d4:	4910      	ldr	r1, [pc, #64]	; (8008218 <xTimerCreateTimerTask+0x84>)
 80081d6:	4811      	ldr	r0, [pc, #68]	; (800821c <xTimerCreateTimerTask+0x88>)
 80081d8:	f7ff f862 	bl	80072a0 <xTaskCreateStatic>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b10      	ldr	r3, [pc, #64]	; (8008220 <xTimerCreateTimerTask+0x8c>)
 80081e0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081e2:	4b0f      	ldr	r3, [pc, #60]	; (8008220 <xTimerCreateTimerTask+0x8c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081ea:	2301      	movs	r3, #1
 80081ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d109      	bne.n	8008208 <xTimerCreateTimerTask+0x74>
 80081f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	613b      	str	r3, [r7, #16]
 8008206:	e7fe      	b.n	8008206 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008208:	697b      	ldr	r3, [r7, #20]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000dc4 	.word	0x20000dc4
 8008218:	08009a0c 	.word	0x08009a0c
 800821c:	0800833d 	.word	0x0800833d
 8008220:	20000dc8 	.word	0x20000dc8

08008224 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	; 0x28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008232:	2300      	movs	r3, #0
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d109      	bne.n	8008250 <xTimerGenericCommand+0x2c>
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
 800824e:	e7fe      	b.n	800824e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008250:	4b19      	ldr	r3, [pc, #100]	; (80082b8 <xTimerGenericCommand+0x94>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d02a      	beq.n	80082ae <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b05      	cmp	r3, #5
 8008268:	dc18      	bgt.n	800829c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800826a:	f7ff feb5 	bl	8007fd8 <xTaskGetSchedulerState>
 800826e:	4603      	mov	r3, r0
 8008270:	2b02      	cmp	r3, #2
 8008272:	d109      	bne.n	8008288 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008274:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <xTimerGenericCommand+0x94>)
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	f107 0110 	add.w	r1, r7, #16
 800827c:	2300      	movs	r3, #0
 800827e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008280:	f7fe fc38 	bl	8006af4 <xQueueGenericSend>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24
 8008286:	e012      	b.n	80082ae <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <xTimerGenericCommand+0x94>)
 800828a:	6818      	ldr	r0, [r3, #0]
 800828c:	f107 0110 	add.w	r1, r7, #16
 8008290:	2300      	movs	r3, #0
 8008292:	2200      	movs	r2, #0
 8008294:	f7fe fc2e 	bl	8006af4 <xQueueGenericSend>
 8008298:	6278      	str	r0, [r7, #36]	; 0x24
 800829a:	e008      	b.n	80082ae <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <xTimerGenericCommand+0x94>)
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	f107 0110 	add.w	r1, r7, #16
 80082a4:	2300      	movs	r3, #0
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	f7fe fd1e 	bl	8006ce8 <xQueueGenericSendFromISR>
 80082ac:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3728      	adds	r7, #40	; 0x28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000dc4 	.word	0x20000dc4

080082bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082c6:	4b1c      	ldr	r3, [pc, #112]	; (8008338 <prvProcessExpiredTimer+0x7c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe faa9 	bl	800682c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d121      	bne.n	8008326 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	699a      	ldr	r2, [r3, #24]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	18d1      	adds	r1, r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	683a      	ldr	r2, [r7, #0]
 80082ee:	6978      	ldr	r0, [r7, #20]
 80082f0:	f000 f8c8 	bl	8008484 <prvInsertTimerInActiveList>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d015      	beq.n	8008326 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082fa:	2300      	movs	r3, #0
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	2300      	movs	r3, #0
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	2100      	movs	r1, #0
 8008304:	6978      	ldr	r0, [r7, #20]
 8008306:	f7ff ff8d 	bl	8008224 <xTimerGenericCommand>
 800830a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <prvProcessExpiredTimer+0x6a>
 8008312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	e7fe      	b.n	8008324 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	6978      	ldr	r0, [r7, #20]
 800832c:	4798      	blx	r3
}
 800832e:	bf00      	nop
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000dbc 	.word	0x20000dbc

0800833c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f857 	bl	80083fc <prvGetNextExpireTime>
 800834e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4619      	mov	r1, r3
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f803 	bl	8008360 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800835a:	f000 f8d5 	bl	8008508 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800835e:	e7f1      	b.n	8008344 <prvTimerTask+0x8>

08008360 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800836a:	f7ff fa3f 	bl	80077ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836e:	f107 0308 	add.w	r3, r7, #8
 8008372:	4618      	mov	r0, r3
 8008374:	f000 f866 	bl	8008444 <prvSampleTimeNow>
 8008378:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d130      	bne.n	80083e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <prvProcessTimerOrBlockTask+0x3c>
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	429a      	cmp	r2, r3
 800838c:	d806      	bhi.n	800839c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800838e:	f7ff fa3b 	bl	8007808 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008392:	68f9      	ldr	r1, [r7, #12]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f7ff ff91 	bl	80082bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800839a:	e024      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083a2:	4b13      	ldr	r3, [pc, #76]	; (80083f0 <prvProcessTimerOrBlockTask+0x90>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bf0c      	ite	eq
 80083ac:	2301      	moveq	r3, #1
 80083ae:	2300      	movne	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083b4:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <prvProcessTimerOrBlockTask+0x94>)
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	4619      	mov	r1, r3
 80083c2:	f7fe ff39 	bl	8007238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083c6:	f7ff fa1f 	bl	8007808 <xTaskResumeAll>
 80083ca:	4603      	mov	r3, r0
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <prvProcessTimerOrBlockTask+0x98>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
}
 80083e0:	e001      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083e2:	f7ff fa11 	bl	8007808 <xTaskResumeAll>
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000dc0 	.word	0x20000dc0
 80083f4:	20000dc4 	.word	0x20000dc4
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <prvGetNextExpireTime+0x44>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	bf0c      	ite	eq
 800840e:	2301      	moveq	r3, #1
 8008410:	2300      	movne	r3, #0
 8008412:	b2db      	uxtb	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d105      	bne.n	800842e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <prvGetNextExpireTime+0x44>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e001      	b.n	8008432 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800842e:	2300      	movs	r3, #0
 8008430:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008432:	68fb      	ldr	r3, [r7, #12]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000dbc 	.word	0x20000dbc

08008444 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800844c:	f7ff fa78 	bl	8007940 <xTaskGetTickCount>
 8008450:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008452:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <prvSampleTimeNow+0x3c>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	429a      	cmp	r2, r3
 800845a:	d205      	bcs.n	8008468 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800845c:	f000 f904 	bl	8008668 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e002      	b.n	800846e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800846e:	4a04      	ldr	r2, [pc, #16]	; (8008480 <prvSampleTimeNow+0x3c>)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	20000dcc 	.word	0x20000dcc

08008484 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d812      	bhi.n	80084d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	1ad2      	subs	r2, r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d302      	bcc.n	80084be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	e01b      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <prvInsertTimerInActiveList+0x7c>)
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3304      	adds	r3, #4
 80084c6:	4619      	mov	r1, r3
 80084c8:	4610      	mov	r0, r2
 80084ca:	f7fe f977 	bl	80067bc <vListInsert>
 80084ce:	e012      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d206      	bcs.n	80084e6 <prvInsertTimerInActiveList+0x62>
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d302      	bcc.n	80084e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e007      	b.n	80084f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084e6:	4b07      	ldr	r3, [pc, #28]	; (8008504 <prvInsertTimerInActiveList+0x80>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4619      	mov	r1, r3
 80084f0:	4610      	mov	r0, r2
 80084f2:	f7fe f963 	bl	80067bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084f6:	697b      	ldr	r3, [r7, #20]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	20000dc0 	.word	0x20000dc0
 8008504:	20000dbc 	.word	0x20000dbc

08008508 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	; 0x38
 800850c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800850e:	e099      	b.n	8008644 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	da17      	bge.n	8008546 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008516:	1d3b      	adds	r3, r7, #4
 8008518:	3304      	adds	r3, #4
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <prvProcessReceivedCommands+0x2e>
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	e7fe      	b.n	8008534 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800853c:	6850      	ldr	r0, [r2, #4]
 800853e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	4611      	mov	r1, r2
 8008544:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	db7a      	blt.n	8008642 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	3304      	adds	r3, #4
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe f965 	bl	800682c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008562:	463b      	mov	r3, r7
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff ff6d 	bl	8008444 <prvSampleTimeNow>
 800856a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b09      	cmp	r3, #9
 8008570:	d868      	bhi.n	8008644 <prvProcessReceivedCommands+0x13c>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <prvProcessReceivedCommands+0x70>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	080085a1 	.word	0x080085a1
 800857c:	080085a1 	.word	0x080085a1
 8008580:	080085a1 	.word	0x080085a1
 8008584:	08008645 	.word	0x08008645
 8008588:	080085fb 	.word	0x080085fb
 800858c:	08008631 	.word	0x08008631
 8008590:	080085a1 	.word	0x080085a1
 8008594:	080085a1 	.word	0x080085a1
 8008598:	08008645 	.word	0x08008645
 800859c:	080085fb 	.word	0x080085fb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	18d1      	adds	r1, r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ae:	f7ff ff69 	bl	8008484 <prvInsertTimerInActiveList>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d045      	beq.n	8008644 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d13d      	bne.n	8008644 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	441a      	add	r2, r3
 80085d0:	2300      	movs	r3, #0
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085da:	f7ff fe23 	bl	8008224 <xTimerGenericCommand>
 80085de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d12e      	bne.n	8008644 <prvProcessReceivedCommands+0x13c>
 80085e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e7fe      	b.n	80085f8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d109      	bne.n	800861c <prvProcessReceivedCommands+0x114>
 8008608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	e7fe      	b.n	800861a <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	18d1      	adds	r1, r2, r3
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800862a:	f7ff ff2b 	bl	8008484 <prvInsertTimerInActiveList>
					break;
 800862e:	e009      	b.n	8008644 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	d104      	bne.n	8008644 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800863a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863c:	f000 fb54 	bl	8008ce8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008640:	e000      	b.n	8008644 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008642:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <prvProcessReceivedCommands+0x15c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	1d39      	adds	r1, r7, #4
 800864a:	2200      	movs	r2, #0
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe fbdf 	bl	8006e10 <xQueueReceive>
 8008652:	4603      	mov	r3, r0
 8008654:	2b00      	cmp	r3, #0
 8008656:	f47f af5b 	bne.w	8008510 <prvProcessReceivedCommands+0x8>
	}
}
 800865a:	bf00      	nop
 800865c:	3730      	adds	r7, #48	; 0x30
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20000dc4 	.word	0x20000dc4

08008668 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b088      	sub	sp, #32
 800866c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800866e:	e044      	b.n	80086fa <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008670:	4b2b      	ldr	r3, [pc, #172]	; (8008720 <prvSwitchTimerLists+0xb8>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <prvSwitchTimerLists+0xb8>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3304      	adds	r3, #4
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe f8cf 	bl	800682c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d12d      	bne.n	80086fa <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	4413      	add	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d90e      	bls.n	80086ce <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	68ba      	ldr	r2, [r7, #8]
 80086b4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086bc:	4b18      	ldr	r3, [pc, #96]	; (8008720 <prvSwitchTimerLists+0xb8>)
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f7fe f878 	bl	80067bc <vListInsert>
 80086cc:	e015      	b.n	80086fa <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086ce:	2300      	movs	r3, #0
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	2300      	movs	r3, #0
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	2100      	movs	r1, #0
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7ff fda3 	bl	8008224 <xTimerGenericCommand>
 80086de:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <prvSwitchTimerLists+0x92>
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	e7fe      	b.n	80086f8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <prvSwitchTimerLists+0xb8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1b5      	bne.n	8008670 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <prvSwitchTimerLists+0xb8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800870a:	4b06      	ldr	r3, [pc, #24]	; (8008724 <prvSwitchTimerLists+0xbc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a04      	ldr	r2, [pc, #16]	; (8008720 <prvSwitchTimerLists+0xb8>)
 8008710:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008712:	4a04      	ldr	r2, [pc, #16]	; (8008724 <prvSwitchTimerLists+0xbc>)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6013      	str	r3, [r2, #0]
}
 8008718:	bf00      	nop
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000dbc 	.word	0x20000dbc
 8008724:	20000dc0 	.word	0x20000dc0

08008728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800872e:	f000 f923 	bl	8008978 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <prvCheckForValidListAndQueue+0x60>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d120      	bne.n	800877c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800873a:	4814      	ldr	r0, [pc, #80]	; (800878c <prvCheckForValidListAndQueue+0x64>)
 800873c:	f7fd fff0 	bl	8006720 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008740:	4813      	ldr	r0, [pc, #76]	; (8008790 <prvCheckForValidListAndQueue+0x68>)
 8008742:	f7fd ffed 	bl	8006720 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008746:	4b13      	ldr	r3, [pc, #76]	; (8008794 <prvCheckForValidListAndQueue+0x6c>)
 8008748:	4a10      	ldr	r2, [pc, #64]	; (800878c <prvCheckForValidListAndQueue+0x64>)
 800874a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800874c:	4b12      	ldr	r3, [pc, #72]	; (8008798 <prvCheckForValidListAndQueue+0x70>)
 800874e:	4a10      	ldr	r2, [pc, #64]	; (8008790 <prvCheckForValidListAndQueue+0x68>)
 8008750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008752:	2300      	movs	r3, #0
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4b11      	ldr	r3, [pc, #68]	; (800879c <prvCheckForValidListAndQueue+0x74>)
 8008758:	4a11      	ldr	r2, [pc, #68]	; (80087a0 <prvCheckForValidListAndQueue+0x78>)
 800875a:	2110      	movs	r1, #16
 800875c:	200a      	movs	r0, #10
 800875e:	f7fe f8f7 	bl	8006950 <xQueueGenericCreateStatic>
 8008762:	4602      	mov	r2, r0
 8008764:	4b08      	ldr	r3, [pc, #32]	; (8008788 <prvCheckForValidListAndQueue+0x60>)
 8008766:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008768:	4b07      	ldr	r3, [pc, #28]	; (8008788 <prvCheckForValidListAndQueue+0x60>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <prvCheckForValidListAndQueue+0x60>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	490b      	ldr	r1, [pc, #44]	; (80087a4 <prvCheckForValidListAndQueue+0x7c>)
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fd36 	bl	80071e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800877c:	f000 f92a 	bl	80089d4 <vPortExitCritical>
}
 8008780:	bf00      	nop
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000dc4 	.word	0x20000dc4
 800878c:	20000d94 	.word	0x20000d94
 8008790:	20000da8 	.word	0x20000da8
 8008794:	20000dbc 	.word	0x20000dbc
 8008798:	20000dc0 	.word	0x20000dc0
 800879c:	20000e70 	.word	0x20000e70
 80087a0:	20000dd0 	.word	0x20000dd0
 80087a4:	08009a14 	.word	0x08009a14

080087a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3b04      	subs	r3, #4
 80087b8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3b04      	subs	r3, #4
 80087c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	f023 0201 	bic.w	r2, r3, #1
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087d8:	4a08      	ldr	r2, [pc, #32]	; (80087fc <pxPortInitialiseStack+0x54>)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3b14      	subs	r3, #20
 80087e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b20      	subs	r3, #32
 80087ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087f0:	68fb      	ldr	r3, [r7, #12]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr
 80087fc:	08008801 	.word	0x08008801

08008800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008806:	2300      	movs	r3, #0
 8008808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800880a:	4b10      	ldr	r3, [pc, #64]	; (800884c <prvTaskExitError+0x4c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008812:	d009      	beq.n	8008828 <prvTaskExitError+0x28>
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	60fb      	str	r3, [r7, #12]
 8008826:	e7fe      	b.n	8008826 <prvTaskExitError+0x26>
 8008828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882c:	f383 8811 	msr	BASEPRI, r3
 8008830:	f3bf 8f6f 	isb	sy
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800883a:	bf00      	nop
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0fc      	beq.n	800883c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008842:	bf00      	nop
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr
 800884c:	2000011c 	.word	0x2000011c

08008850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	f04e 0e0d 	orr.w	lr, lr, #13
 800886e:	4770      	bx	lr

08008870 <pxCurrentTCBConst2>:
 8008870:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008878:	4806      	ldr	r0, [pc, #24]	; (8008894 <prvPortStartFirstTask+0x1c>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	b662      	cpsie	i
 8008884:	b661      	cpsie	f
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	df00      	svc	0
 8008890:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008892:	bf00      	nop
 8008894:	e000ed08 	.word	0xe000ed08

08008898 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800889e:	4b31      	ldr	r3, [pc, #196]	; (8008964 <xPortStartScheduler+0xcc>)
 80088a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	22ff      	movs	r2, #255	; 0xff
 80088ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	4b29      	ldr	r3, [pc, #164]	; (8008968 <xPortStartScheduler+0xd0>)
 80088c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088c6:	4b29      	ldr	r3, [pc, #164]	; (800896c <xPortStartScheduler+0xd4>)
 80088c8:	2207      	movs	r2, #7
 80088ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088cc:	e009      	b.n	80088e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80088ce:	4b27      	ldr	r3, [pc, #156]	; (800896c <xPortStartScheduler+0xd4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	4a25      	ldr	r2, [pc, #148]	; (800896c <xPortStartScheduler+0xd4>)
 80088d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088d8:	78fb      	ldrb	r3, [r7, #3]
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088e2:	78fb      	ldrb	r3, [r7, #3]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b80      	cmp	r3, #128	; 0x80
 80088ec:	d0ef      	beq.n	80088ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088ee:	4b1f      	ldr	r3, [pc, #124]	; (800896c <xPortStartScheduler+0xd4>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f1c3 0307 	rsb	r3, r3, #7
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	d009      	beq.n	800890e <xPortStartScheduler+0x76>
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	60bb      	str	r3, [r7, #8]
 800890c:	e7fe      	b.n	800890c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800890e:	4b17      	ldr	r3, [pc, #92]	; (800896c <xPortStartScheduler+0xd4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	4a15      	ldr	r2, [pc, #84]	; (800896c <xPortStartScheduler+0xd4>)
 8008916:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008918:	4b14      	ldr	r3, [pc, #80]	; (800896c <xPortStartScheduler+0xd4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008920:	4a12      	ldr	r2, [pc, #72]	; (800896c <xPortStartScheduler+0xd4>)
 8008922:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	b2da      	uxtb	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <xPortStartScheduler+0xd8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a0f      	ldr	r2, [pc, #60]	; (8008970 <xPortStartScheduler+0xd8>)
 8008932:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008936:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <xPortStartScheduler+0xd8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a0c      	ldr	r2, [pc, #48]	; (8008970 <xPortStartScheduler+0xd8>)
 800893e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008942:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008944:	f000 f8b0 	bl	8008aa8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <xPortStartScheduler+0xdc>)
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800894e:	f7ff ff93 	bl	8008878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008952:	f7ff f8c1 	bl	8007ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8008956:	f7ff ff53 	bl	8008800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	e000e400 	.word	0xe000e400
 8008968:	20000ec0 	.word	0x20000ec0
 800896c:	20000ec4 	.word	0x20000ec4
 8008970:	e000ed20 	.word	0xe000ed20
 8008974:	2000011c 	.word	0x2000011c

08008978 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <vPortEnterCritical+0x54>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3301      	adds	r3, #1
 8008996:	4a0d      	ldr	r2, [pc, #52]	; (80089cc <vPortEnterCritical+0x54>)
 8008998:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800899a:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <vPortEnterCritical+0x54>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d10e      	bne.n	80089c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089a2:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <vPortEnterCritical+0x58>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d009      	beq.n	80089c0 <vPortEnterCritical+0x48>
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	603b      	str	r3, [r7, #0]
 80089be:	e7fe      	b.n	80089be <vPortEnterCritical+0x46>
	}
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bc80      	pop	{r7}
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	2000011c 	.word	0x2000011c
 80089d0:	e000ed04 	.word	0xe000ed04

080089d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089da:	4b10      	ldr	r3, [pc, #64]	; (8008a1c <vPortExitCritical+0x48>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <vPortExitCritical+0x22>
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	e7fe      	b.n	80089f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <vPortExitCritical+0x48>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3b01      	subs	r3, #1
 80089fc:	4a07      	ldr	r2, [pc, #28]	; (8008a1c <vPortExitCritical+0x48>)
 80089fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a00:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <vPortExitCritical+0x48>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d104      	bne.n	8008a12 <vPortExitCritical+0x3e>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a12:	bf00      	nop
 8008a14:	370c      	adds	r7, #12
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	2000011c 	.word	0x2000011c

08008a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a20:	f3ef 8009 	mrs	r0, PSP
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <pxCurrentTCBConst>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a30:	6010      	str	r0, [r2, #0]
 8008a32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a3a:	f380 8811 	msr	BASEPRI, r0
 8008a3e:	f7ff f84b 	bl	8007ad8 <vTaskSwitchContext>
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	6808      	ldr	r0, [r1, #0]
 8008a52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a56:	f380 8809 	msr	PSP, r0
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	4770      	bx	lr

08008a60 <pxCurrentTCBConst>:
 8008a60:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop

08008a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a80:	f7fe ff6c 	bl	800795c <xTaskIncrementTick>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <xPortSysTickHandler+0x3c>)
 8008a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	2300      	movs	r3, #0
 8008a94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a9c:	bf00      	nop
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <vPortSetupTimerInterrupt+0x30>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <vPortSetupTimerInterrupt+0x34>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ab8:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <vPortSetupTimerInterrupt+0x38>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <vPortSetupTimerInterrupt+0x3c>)
 8008abe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac2:	099b      	lsrs	r3, r3, #6
 8008ac4:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <vPortSetupTimerInterrupt+0x40>)
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008aca:	4b03      	ldr	r3, [pc, #12]	; (8008ad8 <vPortSetupTimerInterrupt+0x30>)
 8008acc:	2207      	movs	r2, #7
 8008ace:	601a      	str	r2, [r3, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr
 8008ad8:	e000e010 	.word	0xe000e010
 8008adc:	e000e018 	.word	0xe000e018
 8008ae0:	20000000 	.word	0x20000000
 8008ae4:	10624dd3 	.word	0x10624dd3
 8008ae8:	e000e014 	.word	0xe000e014

08008aec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008af2:	f3ef 8305 	mrs	r3, IPSR
 8008af6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b0f      	cmp	r3, #15
 8008afc:	d913      	bls.n	8008b26 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008afe:	4a15      	ldr	r2, [pc, #84]	; (8008b54 <vPortValidateInterruptPriority+0x68>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4413      	add	r3, r2
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b08:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <vPortValidateInterruptPriority+0x6c>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	7afa      	ldrb	r2, [r7, #11]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d209      	bcs.n	8008b26 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b16:	f383 8811 	msr	BASEPRI, r3
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	f3bf 8f4f 	dsb	sy
 8008b22:	607b      	str	r3, [r7, #4]
 8008b24:	e7fe      	b.n	8008b24 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b26:	4b0d      	ldr	r3, [pc, #52]	; (8008b5c <vPortValidateInterruptPriority+0x70>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b2e:	4b0c      	ldr	r3, [pc, #48]	; (8008b60 <vPortValidateInterruptPriority+0x74>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d909      	bls.n	8008b4a <vPortValidateInterruptPriority+0x5e>
 8008b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3a:	f383 8811 	msr	BASEPRI, r3
 8008b3e:	f3bf 8f6f 	isb	sy
 8008b42:	f3bf 8f4f 	dsb	sy
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	e7fe      	b.n	8008b48 <vPortValidateInterruptPriority+0x5c>
	}
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr
 8008b54:	e000e3f0 	.word	0xe000e3f0
 8008b58:	20000ec0 	.word	0x20000ec0
 8008b5c:	e000ed0c 	.word	0xe000ed0c
 8008b60:	20000ec4 	.word	0x20000ec4

08008b64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	; 0x28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b70:	f7fe fe3c 	bl	80077ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b74:	4b57      	ldr	r3, [pc, #348]	; (8008cd4 <pvPortMalloc+0x170>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b7c:	f000 f90c 	bl	8008d98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b80:	4b55      	ldr	r3, [pc, #340]	; (8008cd8 <pvPortMalloc+0x174>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4013      	ands	r3, r2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f040 808c 	bne.w	8008ca6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d01c      	beq.n	8008bce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008b94:	2208      	movs	r2, #8
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4413      	add	r3, r2
 8008b9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f003 0307 	and.w	r3, r3, #7
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d013      	beq.n	8008bce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f023 0307 	bic.w	r3, r3, #7
 8008bac:	3308      	adds	r3, #8
 8008bae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d009      	beq.n	8008bce <pvPortMalloc+0x6a>
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e7fe      	b.n	8008bcc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d068      	beq.n	8008ca6 <pvPortMalloc+0x142>
 8008bd4:	4b41      	ldr	r3, [pc, #260]	; (8008cdc <pvPortMalloc+0x178>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d863      	bhi.n	8008ca6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bde:	4b40      	ldr	r3, [pc, #256]	; (8008ce0 <pvPortMalloc+0x17c>)
 8008be0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008be2:	4b3f      	ldr	r3, [pc, #252]	; (8008ce0 <pvPortMalloc+0x17c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008be8:	e004      	b.n	8008bf4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d903      	bls.n	8008c06 <pvPortMalloc+0xa2>
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f1      	bne.n	8008bea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c06:	4b33      	ldr	r3, [pc, #204]	; (8008cd4 <pvPortMalloc+0x170>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d04a      	beq.n	8008ca6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2208      	movs	r2, #8
 8008c16:	4413      	add	r3, r2
 8008c18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	6a3b      	ldr	r3, [r7, #32]
 8008c20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	1ad2      	subs	r2, r2, r3
 8008c2a:	2308      	movs	r3, #8
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d91e      	bls.n	8008c70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4413      	add	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d009      	beq.n	8008c58 <pvPortMalloc+0xf4>
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	e7fe      	b.n	8008c56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c6a:	69b8      	ldr	r0, [r7, #24]
 8008c6c:	f000 f8f6 	bl	8008e5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <pvPortMalloc+0x178>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <pvPortMalloc+0x178>)
 8008c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c7e:	4b17      	ldr	r3, [pc, #92]	; (8008cdc <pvPortMalloc+0x178>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b18      	ldr	r3, [pc, #96]	; (8008ce4 <pvPortMalloc+0x180>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d203      	bcs.n	8008c92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c8a:	4b14      	ldr	r3, [pc, #80]	; (8008cdc <pvPortMalloc+0x178>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a15      	ldr	r2, [pc, #84]	; (8008ce4 <pvPortMalloc+0x180>)
 8008c90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4b10      	ldr	r3, [pc, #64]	; (8008cd8 <pvPortMalloc+0x174>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ca6:	f7fe fdaf 	bl	8007808 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	f003 0307 	and.w	r3, r3, #7
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d009      	beq.n	8008cc8 <pvPortMalloc+0x164>
 8008cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	e7fe      	b.n	8008cc6 <pvPortMalloc+0x162>
	return pvReturn;
 8008cc8:	69fb      	ldr	r3, [r7, #28]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3728      	adds	r7, #40	; 0x28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20002ed0 	.word	0x20002ed0
 8008cd8:	20002edc 	.word	0x20002edc
 8008cdc:	20002ed4 	.word	0x20002ed4
 8008ce0:	20002ec8 	.word	0x20002ec8
 8008ce4:	20002ed8 	.word	0x20002ed8

08008ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d046      	beq.n	8008d88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	425b      	negs	r3, r3
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4413      	add	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	4b20      	ldr	r3, [pc, #128]	; (8008d90 <vPortFree+0xa8>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4013      	ands	r3, r2
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <vPortFree+0x42>
 8008d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e7fe      	b.n	8008d28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d009      	beq.n	8008d46 <vPortFree+0x5e>
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	f383 8811 	msr	BASEPRI, r3
 8008d3a:	f3bf 8f6f 	isb	sy
 8008d3e:	f3bf 8f4f 	dsb	sy
 8008d42:	60bb      	str	r3, [r7, #8]
 8008d44:	e7fe      	b.n	8008d44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	4b11      	ldr	r3, [pc, #68]	; (8008d90 <vPortFree+0xa8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d019      	beq.n	8008d88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d115      	bne.n	8008d88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <vPortFree+0xa8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	43db      	mvns	r3, r3
 8008d66:	401a      	ands	r2, r3
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d6c:	f7fe fd3e 	bl	80077ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <vPortFree+0xac>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4413      	add	r3, r2
 8008d7a:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <vPortFree+0xac>)
 8008d7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d7e:	6938      	ldr	r0, [r7, #16]
 8008d80:	f000 f86c 	bl	8008e5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008d84:	f7fe fd40 	bl	8007808 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d88:	bf00      	nop
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20002edc 	.word	0x20002edc
 8008d94:	20002ed4 	.word	0x20002ed4

08008d98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008da2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <prvHeapInit+0xac>)
 8008da6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f003 0307 	and.w	r3, r3, #7
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00c      	beq.n	8008dcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3307      	adds	r3, #7
 8008db6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dc0:	68ba      	ldr	r2, [r7, #8]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <prvHeapInit+0xac>)
 8008dc8:	4413      	add	r3, r2
 8008dca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dd0:	4a1d      	ldr	r2, [pc, #116]	; (8008e48 <prvHeapInit+0xb0>)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dd6:	4b1c      	ldr	r3, [pc, #112]	; (8008e48 <prvHeapInit+0xb0>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	4413      	add	r3, r2
 8008de2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008de4:	2208      	movs	r2, #8
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <prvHeapInit+0xb4>)
 8008df8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dfa:	4b14      	ldr	r3, [pc, #80]	; (8008e4c <prvHeapInit+0xb4>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e02:	4b12      	ldr	r3, [pc, #72]	; (8008e4c <prvHeapInit+0xb4>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	1ad2      	subs	r2, r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e18:	4b0c      	ldr	r3, [pc, #48]	; (8008e4c <prvHeapInit+0xb4>)
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a0a      	ldr	r2, [pc, #40]	; (8008e50 <prvHeapInit+0xb8>)
 8008e26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <prvHeapInit+0xbc>)
 8008e2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <prvHeapInit+0xc0>)
 8008e32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e36:	601a      	str	r2, [r3, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bc80      	pop	{r7}
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	20000ec8 	.word	0x20000ec8
 8008e48:	20002ec8 	.word	0x20002ec8
 8008e4c:	20002ed0 	.word	0x20002ed0
 8008e50:	20002ed8 	.word	0x20002ed8
 8008e54:	20002ed4 	.word	0x20002ed4
 8008e58:	20002edc 	.word	0x20002edc

08008e5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e64:	4b27      	ldr	r3, [pc, #156]	; (8008f04 <prvInsertBlockIntoFreeList+0xa8>)
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e002      	b.n	8008e70 <prvInsertBlockIntoFreeList+0x14>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d8f7      	bhi.n	8008e6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d108      	bne.n	8008e9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	441a      	add	r2, r3
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	441a      	add	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d118      	bne.n	8008ee4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <prvInsertBlockIntoFreeList+0xac>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d00d      	beq.n	8008eda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	441a      	add	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	e008      	b.n	8008eec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eda:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <prvInsertBlockIntoFreeList+0xac>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e003      	b.n	8008eec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d002      	beq.n	8008efa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bc80      	pop	{r7}
 8008f02:	4770      	bx	lr
 8008f04:	20002ec8 	.word	0x20002ec8
 8008f08:	20002ed0 	.word	0x20002ed0

08008f0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f10:	2200      	movs	r2, #0
 8008f12:	4912      	ldr	r1, [pc, #72]	; (8008f5c <MX_USB_DEVICE_Init+0x50>)
 8008f14:	4812      	ldr	r0, [pc, #72]	; (8008f60 <MX_USB_DEVICE_Init+0x54>)
 8008f16:	f7fc fa06 	bl	8005326 <USBD_Init>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f20:	f7f7 faca 	bl	80004b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f24:	490f      	ldr	r1, [pc, #60]	; (8008f64 <MX_USB_DEVICE_Init+0x58>)
 8008f26:	480e      	ldr	r0, [pc, #56]	; (8008f60 <MX_USB_DEVICE_Init+0x54>)
 8008f28:	f7fc fa28 	bl	800537c <USBD_RegisterClass>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f32:	f7f7 fac1 	bl	80004b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f36:	490c      	ldr	r1, [pc, #48]	; (8008f68 <MX_USB_DEVICE_Init+0x5c>)
 8008f38:	4809      	ldr	r0, [pc, #36]	; (8008f60 <MX_USB_DEVICE_Init+0x54>)
 8008f3a:	f7fc f959 	bl	80051f0 <USBD_CDC_RegisterInterface>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f44:	f7f7 fab8 	bl	80004b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f48:	4805      	ldr	r0, [pc, #20]	; (8008f60 <MX_USB_DEVICE_Init+0x54>)
 8008f4a:	f7fc fa30 	bl	80053ae <USBD_Start>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d001      	beq.n	8008f58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f54:	f7f7 fab0 	bl	80004b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f58:	bf00      	nop
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20000130 	.word	0x20000130
 8008f60:	200031ac 	.word	0x200031ac
 8008f64:	20000018 	.word	0x20000018
 8008f68:	20000120 	.word	0x20000120

08008f6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f70:	2200      	movs	r2, #0
 8008f72:	4905      	ldr	r1, [pc, #20]	; (8008f88 <CDC_Init_FS+0x1c>)
 8008f74:	4805      	ldr	r0, [pc, #20]	; (8008f8c <CDC_Init_FS+0x20>)
 8008f76:	f7fc f951 	bl	800521c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f7a:	4905      	ldr	r1, [pc, #20]	; (8008f90 <CDC_Init_FS+0x24>)
 8008f7c:	4803      	ldr	r0, [pc, #12]	; (8008f8c <CDC_Init_FS+0x20>)
 8008f7e:	f7fc f966 	bl	800524e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	bd80      	pop	{r7, pc}
 8008f88:	200034b0 	.word	0x200034b0
 8008f8c:	200031ac 	.word	0x200031ac
 8008f90:	20003470 	.word	0x20003470

08008f94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc80      	pop	{r7}
 8008fa0:	4770      	bx	lr
	...

08008fa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	4603      	mov	r3, r0
 8008fac:	6039      	str	r1, [r7, #0]
 8008fae:	71fb      	strb	r3, [r7, #7]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	2b23      	cmp	r3, #35	; 0x23
 8008fb8:	d84a      	bhi.n	8009050 <CDC_Control_FS+0xac>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <CDC_Control_FS+0x1c>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08009051 	.word	0x08009051
 8008fc4:	08009051 	.word	0x08009051
 8008fc8:	08009051 	.word	0x08009051
 8008fcc:	08009051 	.word	0x08009051
 8008fd0:	08009051 	.word	0x08009051
 8008fd4:	08009051 	.word	0x08009051
 8008fd8:	08009051 	.word	0x08009051
 8008fdc:	08009051 	.word	0x08009051
 8008fe0:	08009051 	.word	0x08009051
 8008fe4:	08009051 	.word	0x08009051
 8008fe8:	08009051 	.word	0x08009051
 8008fec:	08009051 	.word	0x08009051
 8008ff0:	08009051 	.word	0x08009051
 8008ff4:	08009051 	.word	0x08009051
 8008ff8:	08009051 	.word	0x08009051
 8008ffc:	08009051 	.word	0x08009051
 8009000:	08009051 	.word	0x08009051
 8009004:	08009051 	.word	0x08009051
 8009008:	08009051 	.word	0x08009051
 800900c:	08009051 	.word	0x08009051
 8009010:	08009051 	.word	0x08009051
 8009014:	08009051 	.word	0x08009051
 8009018:	08009051 	.word	0x08009051
 800901c:	08009051 	.word	0x08009051
 8009020:	08009051 	.word	0x08009051
 8009024:	08009051 	.word	0x08009051
 8009028:	08009051 	.word	0x08009051
 800902c:	08009051 	.word	0x08009051
 8009030:	08009051 	.word	0x08009051
 8009034:	08009051 	.word	0x08009051
 8009038:	08009051 	.word	0x08009051
 800903c:	08009051 	.word	0x08009051
 8009040:	08009051 	.word	0x08009051
 8009044:	08009051 	.word	0x08009051
 8009048:	08009051 	.word	0x08009051
 800904c:	08009051 	.word	0x08009051
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009050:	bf00      	nop
  }

  return (USBD_OK);
 8009052:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	bc80      	pop	{r7}
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop

08009060 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);

  strncpy(VCP_Rx_Buf, (char*)Buf, *Len);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4808      	ldr	r0, [pc, #32]	; (8009094 <CDC_Receive_FS+0x34>)
 8009074:	f000 fc27 	bl	80098c6 <strncpy>
  VCP_Rx_Buf[*Len] = 0; //Конец строки
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a05      	ldr	r2, [pc, #20]	; (8009094 <CDC_Receive_FS+0x34>)
 800907e:	2100      	movs	r1, #0
 8009080:	54d1      	strb	r1, [r2, r3]

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009082:	4805      	ldr	r0, [pc, #20]	; (8009098 <CDC_Receive_FS+0x38>)
 8009084:	f7fc f925 	bl	80052d2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009088:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20003120 	.word	0x20003120
 8009098:	200031ac 	.word	0x200031ac

0800909c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090ac:	4b0d      	ldr	r3, [pc, #52]	; (80090e4 <CDC_Transmit_FS+0x48>)
 80090ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090be:	2301      	movs	r3, #1
 80090c0:	e00b      	b.n	80090da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090c2:	887b      	ldrh	r3, [r7, #2]
 80090c4:	461a      	mov	r2, r3
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	4806      	ldr	r0, [pc, #24]	; (80090e4 <CDC_Transmit_FS+0x48>)
 80090ca:	f7fc f8a7 	bl	800521c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090ce:	4805      	ldr	r0, [pc, #20]	; (80090e4 <CDC_Transmit_FS+0x48>)
 80090d0:	f7fc f8d0 	bl	8005274 <USBD_CDC_TransmitPacket>
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	200031ac 	.word	0x200031ac

080090e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	6039      	str	r1, [r7, #0]
 80090f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2212      	movs	r2, #18
 80090f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090fa:	4b03      	ldr	r3, [pc, #12]	; (8009108 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	2000014c 	.word	0x2000014c

0800910c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	6039      	str	r1, [r7, #0]
 8009116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2204      	movs	r2, #4
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800911e:	4b03      	ldr	r3, [pc, #12]	; (800912c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000160 	.word	0x20000160

08009130 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d105      	bne.n	800914e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009142:	683a      	ldr	r2, [r7, #0]
 8009144:	4907      	ldr	r1, [pc, #28]	; (8009164 <USBD_FS_ProductStrDescriptor+0x34>)
 8009146:	4808      	ldr	r0, [pc, #32]	; (8009168 <USBD_FS_ProductStrDescriptor+0x38>)
 8009148:	f7fd f89d 	bl	8006286 <USBD_GetString>
 800914c:	e004      	b.n	8009158 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	4904      	ldr	r1, [pc, #16]	; (8009164 <USBD_FS_ProductStrDescriptor+0x34>)
 8009152:	4805      	ldr	r0, [pc, #20]	; (8009168 <USBD_FS_ProductStrDescriptor+0x38>)
 8009154:	f7fd f897 	bl	8006286 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009158:	4b02      	ldr	r3, [pc, #8]	; (8009164 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	200034f0 	.word	0x200034f0
 8009168:	08009a1c 	.word	0x08009a1c

0800916c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	6039      	str	r1, [r7, #0]
 8009176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	4904      	ldr	r1, [pc, #16]	; (800918c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800917c:	4804      	ldr	r0, [pc, #16]	; (8009190 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800917e:	f7fd f882 	bl	8006286 <USBD_GetString>
  return USBD_StrDesc;
 8009182:	4b02      	ldr	r3, [pc, #8]	; (800918c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	200034f0 	.word	0x200034f0
 8009190:	08009a34 	.word	0x08009a34

08009194 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	6039      	str	r1, [r7, #0]
 800919e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	221a      	movs	r2, #26
 80091a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091a6:	f000 f843 	bl	8009230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091aa:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3708      	adds	r7, #8
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	20000164 	.word	0x20000164

080091b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	4907      	ldr	r1, [pc, #28]	; (80091ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80091ce:	4808      	ldr	r0, [pc, #32]	; (80091f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091d0:	f7fd f859 	bl	8006286 <USBD_GetString>
 80091d4:	e004      	b.n	80091e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	4904      	ldr	r1, [pc, #16]	; (80091ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80091da:	4805      	ldr	r0, [pc, #20]	; (80091f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091dc:	f7fd f853 	bl	8006286 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091e0:	4b02      	ldr	r3, [pc, #8]	; (80091ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	200034f0 	.word	0x200034f0
 80091f0:	08009a48 	.word	0x08009a48

080091f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4907      	ldr	r1, [pc, #28]	; (8009228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800920a:	4808      	ldr	r0, [pc, #32]	; (800922c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800920c:	f7fd f83b 	bl	8006286 <USBD_GetString>
 8009210:	e004      	b.n	800921c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	4904      	ldr	r1, [pc, #16]	; (8009228 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009216:	4805      	ldr	r0, [pc, #20]	; (800922c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009218:	f7fd f835 	bl	8006286 <USBD_GetString>
  }
  return USBD_StrDesc;
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	200034f0 	.word	0x200034f0
 800922c:	08009a54 	.word	0x08009a54

08009230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009236:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <Get_SerialNum+0x44>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800923c:	4b0e      	ldr	r3, [pc, #56]	; (8009278 <Get_SerialNum+0x48>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009242:	4b0e      	ldr	r3, [pc, #56]	; (800927c <Get_SerialNum+0x4c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d009      	beq.n	800926a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009256:	2208      	movs	r2, #8
 8009258:	4909      	ldr	r1, [pc, #36]	; (8009280 <Get_SerialNum+0x50>)
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f814 	bl	8009288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009260:	2204      	movs	r2, #4
 8009262:	4908      	ldr	r1, [pc, #32]	; (8009284 <Get_SerialNum+0x54>)
 8009264:	68b8      	ldr	r0, [r7, #8]
 8009266:	f000 f80f 	bl	8009288 <IntToUnicode>
  }
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	1ffff7e8 	.word	0x1ffff7e8
 8009278:	1ffff7ec 	.word	0x1ffff7ec
 800927c:	1ffff7f0 	.word	0x1ffff7f0
 8009280:	20000166 	.word	0x20000166
 8009284:	20000176 	.word	0x20000176

08009288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800929a:	2300      	movs	r3, #0
 800929c:	75fb      	strb	r3, [r7, #23]
 800929e:	e027      	b.n	80092f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	0f1b      	lsrs	r3, r3, #28
 80092a4:	2b09      	cmp	r3, #9
 80092a6:	d80b      	bhi.n	80092c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	0f1b      	lsrs	r3, r3, #28
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	4619      	mov	r1, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	440b      	add	r3, r1
 80092b8:	3230      	adds	r2, #48	; 0x30
 80092ba:	b2d2      	uxtb	r2, r2
 80092bc:	701a      	strb	r2, [r3, #0]
 80092be:	e00a      	b.n	80092d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	0f1b      	lsrs	r3, r3, #28
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	7dfb      	ldrb	r3, [r7, #23]
 80092c8:	005b      	lsls	r3, r3, #1
 80092ca:	4619      	mov	r1, r3
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	440b      	add	r3, r1
 80092d0:	3237      	adds	r2, #55	; 0x37
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	011b      	lsls	r3, r3, #4
 80092da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
 80092de:	005b      	lsls	r3, r3, #1
 80092e0:	3301      	adds	r3, #1
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	4413      	add	r3, r2
 80092e6:	2200      	movs	r2, #0
 80092e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	3301      	adds	r3, #1
 80092ee:	75fb      	strb	r3, [r7, #23]
 80092f0:	7dfa      	ldrb	r2, [r7, #23]
 80092f2:	79fb      	ldrb	r3, [r7, #7]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d3d3      	bcc.n	80092a0 <IntToUnicode+0x18>
  }
}
 80092f8:	bf00      	nop
 80092fa:	371c      	adds	r7, #28
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc80      	pop	{r7}
 8009300:	4770      	bx	lr
	...

08009304 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a0d      	ldr	r2, [pc, #52]	; (8009348 <HAL_PCD_MspInit+0x44>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d113      	bne.n	800933e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009316:	4b0d      	ldr	r3, [pc, #52]	; (800934c <HAL_PCD_MspInit+0x48>)
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	4a0c      	ldr	r2, [pc, #48]	; (800934c <HAL_PCD_MspInit+0x48>)
 800931c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009320:	61d3      	str	r3, [r2, #28]
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <HAL_PCD_MspInit+0x48>)
 8009324:	69db      	ldr	r3, [r3, #28]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800932e:	2200      	movs	r2, #0
 8009330:	2105      	movs	r1, #5
 8009332:	2014      	movs	r0, #20
 8009334:	f7f7 fa8d 	bl	8000852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009338:	2014      	movs	r0, #20
 800933a:	f7f7 faa6 	bl	800088a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800933e:	bf00      	nop
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	40005c00 	.word	0x40005c00
 800934c:	40021000 	.word	0x40021000

08009350 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009364:	4619      	mov	r1, r3
 8009366:	4610      	mov	r0, r2
 8009368:	f7fc f869 	bl	800543e <USBD_LL_SetupStage>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	460b      	mov	r3, r1
 800937e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	6879      	ldr	r1, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	440b      	add	r3, r1
 8009394:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	4619      	mov	r1, r3
 800939e:	f7fc f899 	bl	80054d4 <USBD_LL_DataOutStage>
}
 80093a2:	bf00      	nop
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b082      	sub	sp, #8
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093bc:	78fa      	ldrb	r2, [r7, #3]
 80093be:	6879      	ldr	r1, [r7, #4]
 80093c0:	4613      	mov	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	4413      	add	r3, r2
 80093c6:	00db      	lsls	r3, r3, #3
 80093c8:	440b      	add	r3, r1
 80093ca:	333c      	adds	r3, #60	; 0x3c
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	4619      	mov	r1, r3
 80093d2:	f7fc f8f0 	bl	80055b6 <USBD_LL_DataInStage>
}
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fc fa00 	bl	80057f2 <USBD_LL_SOF>
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009402:	2301      	movs	r3, #1
 8009404:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b02      	cmp	r3, #2
 800940c:	d001      	beq.n	8009412 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800940e:	f7f7 f853 	bl	80004b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009418:	7bfa      	ldrb	r2, [r7, #15]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7fc f9b0 	bl	8005782 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009428:	4618      	mov	r0, r3
 800942a:	f7fc f969 	bl	8005700 <USBD_LL_Reset>
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009446:	4618      	mov	r0, r3
 8009448:	f7fc f9aa 	bl	80057a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009454:	4b04      	ldr	r3, [pc, #16]	; (8009468 <HAL_PCD_SuspendCallback+0x30>)
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	4a03      	ldr	r2, [pc, #12]	; (8009468 <HAL_PCD_SuspendCallback+0x30>)
 800945a:	f043 0306 	orr.w	r3, r3, #6
 800945e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	e000ed00 	.word	0xe000ed00

0800946c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800947a:	4618      	mov	r0, r3
 800947c:	f7fc f9a4 	bl	80057c8 <USBD_LL_Resume>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009490:	4a28      	ldr	r2, [pc, #160]	; (8009534 <USBD_LL_Init+0xac>)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a26      	ldr	r2, [pc, #152]	; (8009534 <USBD_LL_Init+0xac>)
 800949c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80094a0:	4b24      	ldr	r3, [pc, #144]	; (8009534 <USBD_LL_Init+0xac>)
 80094a2:	4a25      	ldr	r2, [pc, #148]	; (8009538 <USBD_LL_Init+0xb0>)
 80094a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094a6:	4b23      	ldr	r3, [pc, #140]	; (8009534 <USBD_LL_Init+0xac>)
 80094a8:	2208      	movs	r2, #8
 80094aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80094ac:	4b21      	ldr	r3, [pc, #132]	; (8009534 <USBD_LL_Init+0xac>)
 80094ae:	2202      	movs	r2, #2
 80094b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80094b2:	4b20      	ldr	r3, [pc, #128]	; (8009534 <USBD_LL_Init+0xac>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80094b8:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <USBD_LL_Init+0xac>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80094be:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <USBD_LL_Init+0xac>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80094c4:	481b      	ldr	r0, [pc, #108]	; (8009534 <USBD_LL_Init+0xac>)
 80094c6:	f7f7 fb86 	bl	8000bd6 <HAL_PCD_Init>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80094d0:	f7f6 fff2 	bl	80004b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094da:	2318      	movs	r3, #24
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	f7f8 feba 	bl	8002258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094ea:	2358      	movs	r3, #88	; 0x58
 80094ec:	2200      	movs	r2, #0
 80094ee:	2180      	movs	r1, #128	; 0x80
 80094f0:	f7f8 feb2 	bl	8002258 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094fa:	23c0      	movs	r3, #192	; 0xc0
 80094fc:	2200      	movs	r2, #0
 80094fe:	2181      	movs	r1, #129	; 0x81
 8009500:	f7f8 feaa 	bl	8002258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800950a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800950e:	2200      	movs	r2, #0
 8009510:	2101      	movs	r1, #1
 8009512:	f7f8 fea1 	bl	8002258 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800951c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009520:	2200      	movs	r2, #0
 8009522:	2182      	movs	r1, #130	; 0x82
 8009524:	f7f8 fe98 	bl	8002258 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200036f0 	.word	0x200036f0
 8009538:	40005c00 	.word	0x40005c00

0800953c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009552:	4618      	mov	r0, r3
 8009554:	f7f7 fc4a 	bl	8000dec <HAL_PCD_Start>
 8009558:	4603      	mov	r3, r0
 800955a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	4618      	mov	r0, r3
 8009560:	f000 f94e 	bl	8009800 <USBD_Get_USB_Status>
 8009564:	4603      	mov	r3, r0
 8009566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009568:	7bbb      	ldrb	r3, [r7, #14]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	4608      	mov	r0, r1
 800957c:	4611      	mov	r1, r2
 800957e:	461a      	mov	r2, r3
 8009580:	4603      	mov	r3, r0
 8009582:	70fb      	strb	r3, [r7, #3]
 8009584:	460b      	mov	r3, r1
 8009586:	70bb      	strb	r3, [r7, #2]
 8009588:	4613      	mov	r3, r2
 800958a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009590:	2300      	movs	r3, #0
 8009592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800959a:	78bb      	ldrb	r3, [r7, #2]
 800959c:	883a      	ldrh	r2, [r7, #0]
 800959e:	78f9      	ldrb	r1, [r7, #3]
 80095a0:	f7f7 fdc4 	bl	800112c <HAL_PCD_EP_Open>
 80095a4:	4603      	mov	r3, r0
 80095a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f928 	bl	8009800 <USBD_Get_USB_Status>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d8:	78fa      	ldrb	r2, [r7, #3]
 80095da:	4611      	mov	r1, r2
 80095dc:	4618      	mov	r0, r3
 80095de:	f7f7 fe0b 	bl	80011f8 <HAL_PCD_EP_Close>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 f909 	bl	8009800 <USBD_Get_USB_Status>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009616:	78fa      	ldrb	r2, [r7, #3]
 8009618:	4611      	mov	r1, r2
 800961a:	4618      	mov	r0, r3
 800961c:	f7f7 fecb 	bl	80013b6 <HAL_PCD_EP_SetStall>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f8ea 	bl	8009800 <USBD_Get_USB_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7f7 ff0c 	bl	8001476 <HAL_PCD_EP_ClrStall>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8cb 	bl	8009800 <USBD_Get_USB_Status>
 800966a:	4603      	mov	r3, r0
 800966c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800968a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800968c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009690:	2b00      	cmp	r3, #0
 8009692:	da0c      	bge.n	80096ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969a:	68f9      	ldr	r1, [r7, #12]
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	4613      	mov	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	00db      	lsls	r3, r3, #3
 80096a6:	440b      	add	r3, r1
 80096a8:	3302      	adds	r3, #2
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	e00b      	b.n	80096c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096ae:	78fb      	ldrb	r3, [r7, #3]
 80096b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096b4:	68f9      	ldr	r1, [r7, #12]
 80096b6:	4613      	mov	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	440b      	add	r3, r1
 80096c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80096c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr

080096d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	4611      	mov	r1, r2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7f7 fcf7 	bl	80010e2 <HAL_PCD_SetAddress>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f880 	bl	8009800 <USBD_Get_USB_Status>
 8009700:	4603      	mov	r3, r0
 8009702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009704:	7bbb      	ldrb	r3, [r7, #14]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b086      	sub	sp, #24
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	607a      	str	r2, [r7, #4]
 8009718:	461a      	mov	r2, r3
 800971a:	460b      	mov	r3, r1
 800971c:	72fb      	strb	r3, [r7, #11]
 800971e:	4613      	mov	r3, r2
 8009720:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009730:	893b      	ldrh	r3, [r7, #8]
 8009732:	7af9      	ldrb	r1, [r7, #11]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	f7f7 fdfb 	bl	8001330 <HAL_PCD_EP_Transmit>
 800973a:	4603      	mov	r3, r0
 800973c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f85d 	bl	8009800 <USBD_Get_USB_Status>
 8009746:	4603      	mov	r3, r0
 8009748:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800974a:	7dbb      	ldrb	r3, [r7, #22]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	607a      	str	r2, [r7, #4]
 800975e:	461a      	mov	r2, r3
 8009760:	460b      	mov	r3, r1
 8009762:	72fb      	strb	r3, [r7, #11]
 8009764:	4613      	mov	r3, r2
 8009766:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009776:	893b      	ldrh	r3, [r7, #8]
 8009778:	7af9      	ldrb	r1, [r7, #11]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	f7f7 fd84 	bl	8001288 <HAL_PCD_EP_Receive>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f83a 	bl	8009800 <USBD_Get_USB_Status>
 800978c:	4603      	mov	r3, r0
 800978e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009790:	7dbb      	ldrb	r3, [r7, #22]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	4611      	mov	r1, r2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7f7 fda6 	bl	8001302 <HAL_PCD_EP_GetRxCount>
 80097b6:	4603      	mov	r3, r0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <USBD_static_malloc+0x14>)
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr
 80097d4:	20002ee0 	.word	0x20002ee0

080097d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]

}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bc80      	pop	{r7}
 80097e8:	4770      	bx	lr

080097ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	460b      	mov	r3, r1
 80097f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bc80      	pop	{r7}
 80097fe:	4770      	bx	lr

08009800 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	2b03      	cmp	r3, #3
 8009812:	d817      	bhi.n	8009844 <USBD_Get_USB_Status+0x44>
 8009814:	a201      	add	r2, pc, #4	; (adr r2, 800981c <USBD_Get_USB_Status+0x1c>)
 8009816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981a:	bf00      	nop
 800981c:	0800982d 	.word	0x0800982d
 8009820:	08009833 	.word	0x08009833
 8009824:	08009839 	.word	0x08009839
 8009828:	0800983f 	.word	0x0800983f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
    break;
 8009830:	e00b      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009832:	2302      	movs	r3, #2
 8009834:	73fb      	strb	r3, [r7, #15]
    break;
 8009836:	e008      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009838:	2301      	movs	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
    break;
 800983c:	e005      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800983e:	2302      	movs	r3, #2
 8009840:	73fb      	strb	r3, [r7, #15]
    break;
 8009842:	e002      	b.n	800984a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009844:	2302      	movs	r3, #2
 8009846:	73fb      	strb	r3, [r7, #15]
    break;
 8009848:	bf00      	nop
  }
  return usb_status;
 800984a:	7bfb      	ldrb	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	2500      	movs	r5, #0
 800985c:	4e0c      	ldr	r6, [pc, #48]	; (8009890 <__libc_init_array+0x38>)
 800985e:	4c0d      	ldr	r4, [pc, #52]	; (8009894 <__libc_init_array+0x3c>)
 8009860:	1ba4      	subs	r4, r4, r6
 8009862:	10a4      	asrs	r4, r4, #2
 8009864:	42a5      	cmp	r5, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	f000 f842 	bl	80098f0 <_init>
 800986c:	2500      	movs	r5, #0
 800986e:	4e0a      	ldr	r6, [pc, #40]	; (8009898 <__libc_init_array+0x40>)
 8009870:	4c0a      	ldr	r4, [pc, #40]	; (800989c <__libc_init_array+0x44>)
 8009872:	1ba4      	subs	r4, r4, r6
 8009874:	10a4      	asrs	r4, r4, #2
 8009876:	42a5      	cmp	r5, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009880:	4798      	blx	r3
 8009882:	3501      	adds	r5, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800988a:	4798      	blx	r3
 800988c:	3501      	adds	r5, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	08009a98 	.word	0x08009a98
 8009894:	08009a98 	.word	0x08009a98
 8009898:	08009a98 	.word	0x08009a98
 800989c:	08009a9c 	.word	0x08009a9c

080098a0 <memcpy>:
 80098a0:	b510      	push	{r4, lr}
 80098a2:	1e43      	subs	r3, r0, #1
 80098a4:	440a      	add	r2, r1
 80098a6:	4291      	cmp	r1, r2
 80098a8:	d100      	bne.n	80098ac <memcpy+0xc>
 80098aa:	bd10      	pop	{r4, pc}
 80098ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b4:	e7f7      	b.n	80098a6 <memcpy+0x6>

080098b6 <memset>:
 80098b6:	4603      	mov	r3, r0
 80098b8:	4402      	add	r2, r0
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d100      	bne.n	80098c0 <memset+0xa>
 80098be:	4770      	bx	lr
 80098c0:	f803 1b01 	strb.w	r1, [r3], #1
 80098c4:	e7f9      	b.n	80098ba <memset+0x4>

080098c6 <strncpy>:
 80098c6:	b570      	push	{r4, r5, r6, lr}
 80098c8:	4604      	mov	r4, r0
 80098ca:	3901      	subs	r1, #1
 80098cc:	b902      	cbnz	r2, 80098d0 <strncpy+0xa>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	4623      	mov	r3, r4
 80098d2:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80098d6:	1e56      	subs	r6, r2, #1
 80098d8:	f803 5b01 	strb.w	r5, [r3], #1
 80098dc:	b92d      	cbnz	r5, 80098ea <strncpy+0x24>
 80098de:	4414      	add	r4, r2
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d0f4      	beq.n	80098ce <strncpy+0x8>
 80098e4:	f803 5b01 	strb.w	r5, [r3], #1
 80098e8:	e7fa      	b.n	80098e0 <strncpy+0x1a>
 80098ea:	461c      	mov	r4, r3
 80098ec:	4632      	mov	r2, r6
 80098ee:	e7ed      	b.n	80098cc <strncpy+0x6>

080098f0 <_init>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr

080098fc <_fini>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr
