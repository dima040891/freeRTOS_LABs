
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080098fc  080098fc  000198fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a88  08009a88  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  08009a88  08009a88  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a88  08009a88  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a88  08009a88  00019a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a8c  08009a8c  00019a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  08009a90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e4  20000180  08009c10  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002564  08009c10  00022564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e119  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fbd  00000000  00000000  0003e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001230  00000000  00000000  00042280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  000434b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b741  00000000  00000000  00044508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000135b8  00000000  00000000  0005fc49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e507  00000000  00000000  00073201  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00101708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004820  00000000  00000000  00101784  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	080098e4 	.word	0x080098e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	080098e4 	.word	0x080098e4

08000150 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000154:	2201      	movs	r2, #1
 8000156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015a:	4802      	ldr	r0, [pc, #8]	; (8000164 <PCB_Init+0x14>)
 800015c:	f000 fd40 	bl	8000be0 <HAL_GPIO_WritePin>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	40011000 	.word	0x40011000

08000168 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000168:	b580      	push	{r7, lr}
 800016a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800016c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000170:	4802      	ldr	r0, [pc, #8]	; (800017c <PCB_LED_Toggle+0x14>)
 8000172:	f000 fd4d 	bl	8000c10 <HAL_GPIO_TogglePin>
}
 8000176:	bf00      	nop
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	40011000 	.word	0x40011000

08000180 <freeRTOS_Tasks_Ini>:


// Внимание! QueueHandle_t является более современным аналогом xQueueHandle. Разобраться с этим позже

void freeRTOS_Tasks_Ini (void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af02      	add	r7, sp, #8
	xQueue1 = xQueueCreate(4, sizeof(char)); // Создание очереди из 4 элементов размерностью 8 бит
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2004      	movs	r0, #4
 800018c:	f006 fc88 	bl	8006aa0 <xQueueGenericCreate>
 8000190:	4602      	mov	r2, r0
 8000192:	4b1e      	ldr	r3, [pc, #120]	; (800020c <freeRTOS_Tasks_Ini+0x8c>)
 8000194:	601a      	str	r2, [r3, #0]

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	491b      	ldr	r1, [pc, #108]	; (8000210 <freeRTOS_Tasks_Ini+0x90>)
 80001a4:	481b      	ldr	r0, [pc, #108]	; (8000214 <freeRTOS_Tasks_Ini+0x94>)
 80001a6:	f007 f90a 	bl	80073be <xTaskCreate>
	//xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 120, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
	//xTaskCreate(vTask_Transmit_VCP_2, "Task_Transmit_VCP_2", 120, (void*) USB_Tx_Buf_Task2, 1, NULL); // Вывод второго тестового сообщения

	Delay_LED = 500;
 80001aa:	4b1b      	ldr	r3, [pc, #108]	; (8000218 <freeRTOS_Tasks_Ini+0x98>)
 80001ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001b0:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001b2:	4b1a      	ldr	r3, [pc, #104]	; (800021c <freeRTOS_Tasks_Ini+0x9c>)
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <freeRTOS_Tasks_Ini+0x98>)
 80001b6:	601a      	str	r2, [r3, #0]





	if(xQueue1 != NULL) // Если очередь создалась успешно (хватило место в куче), то создать задачи отправки получения данных
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <freeRTOS_Tasks_Ini+0x8c>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d01f      	beq.n	8000200 <freeRTOS_Tasks_Ini+0x80>
	{
		xTaskCreate(vTask_Queue_Data_Send, "Task_Queue_Data_Send", 200, NULL, 1, NULL); // З-а отправки данных в очередь
 80001c0:	2300      	movs	r3, #0
 80001c2:	9301      	str	r3, [sp, #4]
 80001c4:	2301      	movs	r3, #1
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2300      	movs	r3, #0
 80001ca:	22c8      	movs	r2, #200	; 0xc8
 80001cc:	4914      	ldr	r1, [pc, #80]	; (8000220 <freeRTOS_Tasks_Ini+0xa0>)
 80001ce:	4815      	ldr	r0, [pc, #84]	; (8000224 <freeRTOS_Tasks_Ini+0xa4>)
 80001d0:	f007 f8f5 	bl	80073be <xTaskCreate>
		xTaskCreate(vTask_Queue_Data_Recieve, "Task_Queue_Data_Recieve", 200, NULL, 1, NULL); // З-а которая получает данные из очереди и отправляет тестовое сообщение.
 80001d4:	2300      	movs	r3, #0
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	2301      	movs	r3, #1
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2300      	movs	r3, #0
 80001de:	22c8      	movs	r2, #200	; 0xc8
 80001e0:	4911      	ldr	r1, [pc, #68]	; (8000228 <freeRTOS_Tasks_Ini+0xa8>)
 80001e2:	4812      	ldr	r0, [pc, #72]	; (800022c <freeRTOS_Tasks_Ini+0xac>)
 80001e4:	f007 f8eb 	bl	80073be <xTaskCreate>
		xTaskCreate(vTask_PCB_LED_Blink, "Task_PCB_LED_Blink", 40, (void*) pDelay_LED, 1, NULL); // З-а мигания LED
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <freeRTOS_Tasks_Ini+0x9c>)
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	2300      	movs	r3, #0
 80001ee:	9301      	str	r3, [sp, #4]
 80001f0:	2301      	movs	r3, #1
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	4613      	mov	r3, r2
 80001f6:	2228      	movs	r2, #40	; 0x28
 80001f8:	490d      	ldr	r1, [pc, #52]	; (8000230 <freeRTOS_Tasks_Ini+0xb0>)
 80001fa:	480e      	ldr	r0, [pc, #56]	; (8000234 <freeRTOS_Tasks_Ini+0xb4>)
 80001fc:	f007 f8df 	bl	80073be <xTaskCreate>
	else
	{
		//Если все хорошо то ветка else не исполнится, что означает что очередь создана.
	}

	osKernelStart();
 8000200:	f006 f986 	bl	8006510 <osKernelStart>

}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20001ce4 	.word	0x20001ce4
 8000210:	0800990c 	.word	0x0800990c
 8000214:	08000301 	.word	0x08000301
 8000218:	20001ce8 	.word	0x20001ce8
 800021c:	20001ce0 	.word	0x20001ce0
 8000220:	0800991c 	.word	0x0800991c
 8000224:	08000239 	.word	0x08000239
 8000228:	08009934 	.word	0x08009934
 800022c:	08000281 	.word	0x08000281
 8000230:	0800994c 	.word	0x0800994c
 8000234:	08000361 	.word	0x08000361

08000238 <vTask_Queue_Data_Send>:



void vTask_Queue_Data_Send(void *pvParameters)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	char Queue_Data_Send = 'Q'; // Передаваемы данные
 8000240:	2351      	movs	r3, #81	; 0x51
 8000242:	72fb      	strb	r3, [r7, #11]
	{
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);

		// Отправка данных в очередь xQueue1, данные - Queue_Data, время ожидания появления свободного места в очереди 0, т.е. в очереди должны быть хотя бы одно свободное место

		xStatus = xQueueSendToBack(xQueue1, &Queue_Data_Send, 0);
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <vTask_Queue_Data_Send+0x40>)
 8000246:	6818      	ldr	r0, [r3, #0]
 8000248:	f107 010b 	add.w	r1, r7, #11
 800024c:	2300      	movs	r3, #0
 800024e:	2200      	movs	r2, #0
 8000250:	f006 fc86 	bl	8006b60 <xQueueGenericSend>
 8000254:	60f8      	str	r0, [r7, #12]

		if (xStatus != pdPASS)
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2b01      	cmp	r3, #1
 800025a:	d007      	beq.n	800026c <vTask_Queue_Data_Send+0x34>
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not send to the queue.\r\n", strlen("Could not send to the queue.\r\n"))); // Если не было свободного места в очереди
 800025c:	bf00      	nop
 800025e:	211e      	movs	r1, #30
 8000260:	4806      	ldr	r0, [pc, #24]	; (800027c <vTask_Queue_Data_Send+0x44>)
 8000262:	f008 ff29 	bl	80090b8 <CDC_Transmit_FS>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d1f8      	bne.n	800025e <vTask_Queue_Data_Send+0x26>
		/*Вызов taskYIELD() информирует шедулер, что сейчас сразу
        нужно переключиться к другой задаче, а не поддерживать эту задачу в
        состоянии Running до окончания текущего слайса времени*/

		//taskYIELD();
		vTaskDelay(500 / portTICK_RATE_MS );
 800026c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000270:	f007 fa52 	bl	8007718 <vTaskDelay>
		xStatus = xQueueSendToBack(xQueue1, &Queue_Data_Send, 0);
 8000274:	e7e6      	b.n	8000244 <vTask_Queue_Data_Send+0xc>
 8000276:	bf00      	nop
 8000278:	20001ce4 	.word	0x20001ce4
 800027c:	08009960 	.word	0x08009960

08000280 <vTask_Queue_Data_Recieve>:
	}
	vTaskDelete(NULL);
}

void vTask_Queue_Data_Recieve(void *pvParameters)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	{
		// Попытаться (если очередь не пуста) получить данные из очереди



		xStatus = xQueueReceive(xQueue1, &Queue_Data_Recieve, 150); // Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди
 8000288:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <vTask_Queue_Data_Recieve+0x70>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f107 010b 	add.w	r1, r7, #11
 8000290:	2296      	movs	r2, #150	; 0x96
 8000292:	4618      	mov	r0, r3
 8000294:	f006 fdf2 	bl	8006e7c <xQueueReceive>
 8000298:	60f8      	str	r0, [r7, #12]

		if(xStatus == pdPASS)
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d11a      	bne.n	80002d6 <vTask_Queue_Data_Recieve+0x56>
		{
			while (CDC_Transmit_FS((unsigned char*)"Received from xQueue1 = ", strlen("Received from xQueue1 = ")));
 80002a0:	bf00      	nop
 80002a2:	2118      	movs	r1, #24
 80002a4:	4813      	ldr	r0, [pc, #76]	; (80002f4 <vTask_Queue_Data_Recieve+0x74>)
 80002a6:	f008 ff07 	bl	80090b8 <CDC_Transmit_FS>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d1f8      	bne.n	80002a2 <vTask_Queue_Data_Recieve+0x22>
			while (CDC_Transmit_FS((unsigned char*) &Queue_Data_Recieve, 1));
 80002b0:	bf00      	nop
 80002b2:	f107 030b 	add.w	r3, r7, #11
 80002b6:	2101      	movs	r1, #1
 80002b8:	4618      	mov	r0, r3
 80002ba:	f008 fefd 	bl	80090b8 <CDC_Transmit_FS>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f6      	bne.n	80002b2 <vTask_Queue_Data_Recieve+0x32>
			while (CDC_Transmit_FS((unsigned char*)"\r\n", strlen("\r\n")));
 80002c4:	bf00      	nop
 80002c6:	2102      	movs	r1, #2
 80002c8:	480b      	ldr	r0, [pc, #44]	; (80002f8 <vTask_Queue_Data_Recieve+0x78>)
 80002ca:	f008 fef5 	bl	80090b8 <CDC_Transmit_FS>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d1f8      	bne.n	80002c6 <vTask_Queue_Data_Recieve+0x46>
 80002d4:	e007      	b.n	80002e6 <vTask_Queue_Data_Recieve+0x66>
		}
		else
		{
			while (CDC_Transmit_FS((unsigned char*)"Could not receive from the queue.\r\n", strlen("Could not receive from the queue.\r\n")));
 80002d6:	bf00      	nop
 80002d8:	2123      	movs	r1, #35	; 0x23
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <vTask_Queue_Data_Recieve+0x7c>)
 80002dc:	f008 feec 	bl	80090b8 <CDC_Transmit_FS>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1f8      	bne.n	80002d8 <vTask_Queue_Data_Recieve+0x58>
		}
		vTaskDelay(500 / portTICK_RATE_MS );
 80002e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ea:	f007 fa15 	bl	8007718 <vTaskDelay>
		xStatus = xQueueReceive(xQueue1, &Queue_Data_Recieve, 150); // Очередь откуда брать данные, переменная куда сохраняются данные, время ожидания появления данных в очереди
 80002ee:	e7cb      	b.n	8000288 <vTask_Queue_Data_Recieve+0x8>
 80002f0:	20001ce4 	.word	0x20001ce4
 80002f4:	08009980 	.word	0x08009980
 80002f8:	0800999c 	.word	0x0800999c
 80002fc:	080099a0 	.word	0x080099a0

08000300 <vTask_USB_Init>:
	vTaskDelete(NULL);

}

void vTask_USB_Init(void *pvParameters)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800031a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031c:	2301      	movs	r3, #1
 800031e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000320:	2300      	movs	r3, #0
 8000322:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000324:	2302      	movs	r3, #2
 8000326:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	f107 0308 	add.w	r3, r7, #8
 800032c:	4619      	mov	r1, r3
 800032e:	480b      	ldr	r0, [pc, #44]	; (800035c <vTask_USB_Init+0x5c>)
 8000330:	f000 fafc 	bl	800092c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033a:	4808      	ldr	r0, [pc, #32]	; (800035c <vTask_USB_Init+0x5c>)
 800033c:	f000 fc50 	bl	8000be0 <HAL_GPIO_WritePin>

	  vTaskDelay(2000 / portTICK_RATE_MS );
 8000340:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000344:	f007 f9e8 	bl	8007718 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000348:	f008 fdf8 	bl	8008f3c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 800034c:	2000      	movs	r0, #0
 800034e:	f007 f971 	bl	8007634 <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000 / portTICK_RATE_MS );
 8000352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000356:	f007 f9df 	bl	8007718 <vTaskDelay>
 800035a:	e7fa      	b.n	8000352 <vTask_USB_Init+0x52>
 800035c:	40010800 	.word	0x40010800

08000360 <vTask_PCB_LED_Blink>:
	}
	vTaskDelete(NULL);
}

void vTask_PCB_LED_Blink(void *pvParameters)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 800036c:	f7ff fefc 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED / portTICK_RATE_MS ); // Разыменование т.е. передача значения задержки
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f007 f9cf 	bl	8007718 <vTaskDelay>
	PCB_LED_Toggle();
 800037a:	f7ff fef5 	bl	8000168 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters / portTICK_RATE_MS ); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	881b      	ldrh	r3, [r3, #0]
 8000382:	4618      	mov	r0, r3
 8000384:	f007 f9c8 	bl	8007718 <vTaskDelay>
	PCB_LED_Toggle();
 8000388:	e7f0      	b.n	800036c <vTask_PCB_LED_Blink+0xc>
	...

0800038c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000390:	f000 f95c 	bl	800064c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000394:	f000 f818 	bl	80003c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000398:	f000 f870 	bl	800047c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800039c:	f006 f886 	bl	80064ac <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003a0:	4a06      	ldr	r2, [pc, #24]	; (80003bc <main+0x30>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4806      	ldr	r0, [pc, #24]	; (80003c0 <main+0x34>)
 80003a6:	f006 f8e7 	bl	8006578 <osThreadNew>
 80003aa:	4602      	mov	r2, r0
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <main+0x38>)
 80003ae:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  PCB_Init();
 80003b0:	f7ff fece 	bl	8000150 <PCB_Init>
  freeRTOS_Tasks_Ini();
 80003b4:	f7ff fee4 	bl	8000180 <freeRTOS_Tasks_Ini>
  //osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <main+0x2c>
 80003ba:	bf00      	nop
 80003bc:	08009a54 	.word	0x08009a54
 80003c0:	08000515 	.word	0x08000515
 80003c4:	20001cec 	.word	0x20001cec

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b094      	sub	sp, #80	; 0x50
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d2:	2228      	movs	r2, #40	; 0x28
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f009 fa7b 	bl	80098d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003f8:	2301      	movs	r3, #1
 80003fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000400:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000402:	2300      	movs	r3, #0
 8000404:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000406:	2301      	movs	r3, #1
 8000408:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040a:	2302      	movs	r3, #2
 800040c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800040e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000412:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000414:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000418:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800041e:	4618      	mov	r0, r3
 8000420:	f001 ff92 	bl	8002348 <HAL_RCC_OscConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800042a:	f000 f87b 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	230f      	movs	r3, #15
 8000430:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000432:	2302      	movs	r3, #2
 8000434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800043a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800043e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000440:	2300      	movs	r3, #0
 8000442:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	2102      	movs	r1, #2
 800044a:	4618      	mov	r0, r3
 800044c:	f002 f9fc 	bl	8002848 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000456:	f000 f865 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800045a:	2310      	movs	r3, #16
 800045c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800045e:	2300      	movs	r3, #0
 8000460:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	4618      	mov	r0, r3
 8000466:	f002 fb59 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000470:	f000 f858 	bl	8000524 <Error_Handler>
  }
}
 8000474:	bf00      	nop
 8000476:	3750      	adds	r7, #80	; 0x50
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <MX_GPIO_Init+0x90>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1d      	ldr	r2, [pc, #116]	; (800050c <MX_GPIO_Init+0x90>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <MX_GPIO_Init+0x90>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0310 	and.w	r3, r3, #16
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <MX_GPIO_Init+0x90>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	4a17      	ldr	r2, [pc, #92]	; (800050c <MX_GPIO_Init+0x90>)
 80004ae:	f043 0320 	orr.w	r3, r3, #32
 80004b2:	6193      	str	r3, [r2, #24]
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <MX_GPIO_Init+0x90>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	f003 0320 	and.w	r3, r3, #32
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <MX_GPIO_Init+0x90>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <MX_GPIO_Init+0x90>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_GPIO_Init+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004de:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_GPIO_Init+0x94>)
 80004e0:	f000 fb7e 	bl	8000be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004f6:	f107 0310 	add.w	r3, r7, #16
 80004fa:	4619      	mov	r1, r3
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_GPIO_Init+0x94>)
 80004fe:	f000 fa15 	bl	800092c <HAL_GPIO_Init>

}
 8000502:	bf00      	nop
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40021000 	.word	0x40021000
 8000510:	40011000 	.word	0x40011000

08000514 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f006 f8d5 	bl	80066cc <osDelay>
 8000522:	e7fb      	b.n	800051c <StartDefaultTask+0x8>

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800052a:	e7fe      	b.n	800052a <Error_Handler+0x6>

0800052c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <HAL_MspInit+0x68>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <HAL_MspInit+0x68>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_MspInit+0x68>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <HAL_MspInit+0x68>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	4a11      	ldr	r2, [pc, #68]	; (8000594 <HAL_MspInit+0x68>)
 8000550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000554:	61d3      	str	r3, [r2, #28]
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <HAL_MspInit+0x68>)
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	210f      	movs	r1, #15
 8000566:	f06f 0001 	mvn.w	r0, #1
 800056a:	f000 f9a8 	bl	80008be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_MspInit+0x6c>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	4a04      	ldr	r2, [pc, #16]	; (8000598 <HAL_MspInit+0x6c>)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000
 8000598:	40010000 	.word	0x40010000

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f885 	bl	80006d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80005ce:	f007 fd15 	bl	8007ffc <xTaskGetSchedulerState>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d001      	beq.n	80005dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80005d8:	f008 fa5e 	bl	8008a98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005e6:	f000 fc5d 	bl	8000ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20002278 	.word	0x20002278

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000600:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000602:	e003      	b.n	800060c <LoopCopyDataInit>

08000604 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000606:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000608:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800060a:	3104      	adds	r1, #4

0800060c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800060c:	480a      	ldr	r0, [pc, #40]	; (8000638 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000610:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000612:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000614:	d3f6      	bcc.n	8000604 <CopyDataInit>
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000618:	e002      	b.n	8000620 <LoopFillZerobss>

0800061a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800061c:	f842 3b04 	str.w	r3, [r2], #4

08000620 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000620:	4b08      	ldr	r3, [pc, #32]	; (8000644 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000622:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000624:	d3f9      	bcc.n	800061a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000626:	f7ff ffe5 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800062a:	f009 f923 	bl	8009874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff fead 	bl	800038c <main>
  bx lr
 8000632:	4770      	bx	lr
  ldr r3, =_sidata
 8000634:	08009a90 	.word	0x08009a90
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800063c:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000640:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000644:	20002564 	.word	0x20002564

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>
	...

0800064c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <HAL_Init+0x28>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <HAL_Init+0x28>)
 8000656:	f043 0310 	orr.w	r3, r3, #16
 800065a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800065c:	2003      	movs	r0, #3
 800065e:	f000 f923 	bl	80008a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000662:	200f      	movs	r0, #15
 8000664:	f000 f808 	bl	8000678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000668:	f7ff ff60 	bl	800052c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40022000 	.word	0x40022000

08000678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_InitTick+0x54>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <HAL_InitTick+0x58>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000692:	fbb2 f3f3 	udiv	r3, r2, r3
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f93b 	bl	8000912 <HAL_SYSTICK_Config>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e00e      	b.n	80006c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2b0f      	cmp	r3, #15
 80006aa:	d80a      	bhi.n	80006c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ac:	2200      	movs	r2, #0
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	f04f 30ff 	mov.w	r0, #4294967295
 80006b4:	f000 f903 	bl	80008be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <HAL_InitTick+0x5c>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006be:	2300      	movs	r3, #0
 80006c0:	e000      	b.n	80006c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000004 	.word	0x20000004

080006d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006dc:	4b05      	ldr	r3, [pc, #20]	; (80006f4 <HAL_IncTick+0x1c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x20>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4413      	add	r3, r2
 80006e8:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x20>)
 80006ea:	6013      	str	r3, [r2, #0]
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	20000008 	.word	0x20000008
 80006f8:	20001cf0 	.word	0x20001cf0

080006fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b02      	ldr	r3, [pc, #8]	; (800070c <HAL_GetTick+0x10>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20001cf0 	.word	0x20001cf0

08000710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800072c:	4013      	ands	r3, r2
 800072e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <__NVIC_SetPriorityGrouping+0x44>)
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	60d3      	str	r3, [r2, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800075c:	4b04      	ldr	r3, [pc, #16]	; (8000770 <__NVIC_GetPriorityGrouping+0x18>)
 800075e:	68db      	ldr	r3, [r3, #12]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	f003 0307 	and.w	r3, r3, #7
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	2b00      	cmp	r3, #0
 8000784:	db0b      	blt.n	800079e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	f003 021f 	and.w	r2, r3, #31
 800078c:	4906      	ldr	r1, [pc, #24]	; (80007a8 <__NVIC_EnableIRQ+0x34>)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	095b      	lsrs	r3, r3, #5
 8000794:	2001      	movs	r0, #1
 8000796:	fa00 f202 	lsl.w	r2, r0, r2
 800079a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	e000e100 	.word	0xe000e100

080007ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	4313      	orrs	r3, r2
         );
}
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000874:	d301      	bcc.n	800087a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000876:	2301      	movs	r3, #1
 8000878:	e00f      	b.n	800089a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800087a:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <SysTick_Config+0x40>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000882:	210f      	movs	r1, #15
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f7ff ff90 	bl	80007ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SysTick_Config+0x40>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000892:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <SysTick_Config+0x40>)
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	e000e010 	.word	0xe000e010

080008a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ff2d 	bl	8000710 <__NVIC_SetPriorityGrouping>
}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008be:	b580      	push	{r7, lr}
 80008c0:	b086      	sub	sp, #24
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	4603      	mov	r3, r0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008d0:	f7ff ff42 	bl	8000758 <__NVIC_GetPriorityGrouping>
 80008d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	6978      	ldr	r0, [r7, #20]
 80008dc:	f7ff ff90 	bl	8000800 <NVIC_EncodePriority>
 80008e0:	4602      	mov	r2, r0
 80008e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff5f 	bl	80007ac <__NVIC_SetPriority>
}
 80008ee:	bf00      	nop
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff35 	bl	8000774 <__NVIC_EnableIRQ>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffa2 	bl	8000864 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800092c:	b480      	push	{r7}
 800092e:	b08b      	sub	sp, #44	; 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093e:	e127      	b.n	8000b90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000940:	2201      	movs	r2, #1
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 8116 	bne.w	8000b8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b12      	cmp	r3, #18
 8000964:	d034      	beq.n	80009d0 <HAL_GPIO_Init+0xa4>
 8000966:	2b12      	cmp	r3, #18
 8000968:	d80d      	bhi.n	8000986 <HAL_GPIO_Init+0x5a>
 800096a:	2b02      	cmp	r3, #2
 800096c:	d02b      	beq.n	80009c6 <HAL_GPIO_Init+0x9a>
 800096e:	2b02      	cmp	r3, #2
 8000970:	d804      	bhi.n	800097c <HAL_GPIO_Init+0x50>
 8000972:	2b00      	cmp	r3, #0
 8000974:	d031      	beq.n	80009da <HAL_GPIO_Init+0xae>
 8000976:	2b01      	cmp	r3, #1
 8000978:	d01c      	beq.n	80009b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800097a:	e048      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800097c:	2b03      	cmp	r3, #3
 800097e:	d043      	beq.n	8000a08 <HAL_GPIO_Init+0xdc>
 8000980:	2b11      	cmp	r3, #17
 8000982:	d01b      	beq.n	80009bc <HAL_GPIO_Init+0x90>
          break;
 8000984:	e043      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000986:	4a89      	ldr	r2, [pc, #548]	; (8000bac <HAL_GPIO_Init+0x280>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d026      	beq.n	80009da <HAL_GPIO_Init+0xae>
 800098c:	4a87      	ldr	r2, [pc, #540]	; (8000bac <HAL_GPIO_Init+0x280>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d806      	bhi.n	80009a0 <HAL_GPIO_Init+0x74>
 8000992:	4a87      	ldr	r2, [pc, #540]	; (8000bb0 <HAL_GPIO_Init+0x284>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d020      	beq.n	80009da <HAL_GPIO_Init+0xae>
 8000998:	4a86      	ldr	r2, [pc, #536]	; (8000bb4 <HAL_GPIO_Init+0x288>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d01d      	beq.n	80009da <HAL_GPIO_Init+0xae>
          break;
 800099e:	e036      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80009a0:	4a85      	ldr	r2, [pc, #532]	; (8000bb8 <HAL_GPIO_Init+0x28c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d019      	beq.n	80009da <HAL_GPIO_Init+0xae>
 80009a6:	4a85      	ldr	r2, [pc, #532]	; (8000bbc <HAL_GPIO_Init+0x290>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d016      	beq.n	80009da <HAL_GPIO_Init+0xae>
 80009ac:	4a84      	ldr	r2, [pc, #528]	; (8000bc0 <HAL_GPIO_Init+0x294>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0xae>
          break;
 80009b2:	e02c      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	623b      	str	r3, [r7, #32]
          break;
 80009ba:	e028      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	623b      	str	r3, [r7, #32]
          break;
 80009c4:	e023      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	3308      	adds	r3, #8
 80009cc:	623b      	str	r3, [r7, #32]
          break;
 80009ce:	e01e      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	330c      	adds	r3, #12
 80009d6:	623b      	str	r3, [r7, #32]
          break;
 80009d8:	e019      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d102      	bne.n	80009e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009e2:	2304      	movs	r3, #4
 80009e4:	623b      	str	r3, [r7, #32]
          break;
 80009e6:	e012      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009f0:	2308      	movs	r3, #8
 80009f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69fa      	ldr	r2, [r7, #28]
 80009f8:	611a      	str	r2, [r3, #16]
          break;
 80009fa:	e008      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009fc:	2308      	movs	r3, #8
 80009fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	615a      	str	r2, [r3, #20]
          break;
 8000a06:	e002      	b.n	8000a0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	2bff      	cmp	r3, #255	; 0xff
 8000a12:	d801      	bhi.n	8000a18 <HAL_GPIO_Init+0xec>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	e001      	b.n	8000a1c <HAL_GPIO_Init+0xf0>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	2bff      	cmp	r3, #255	; 0xff
 8000a22:	d802      	bhi.n	8000a2a <HAL_GPIO_Init+0xfe>
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	e002      	b.n	8000a30 <HAL_GPIO_Init+0x104>
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	3b08      	subs	r3, #8
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	210f      	movs	r1, #15
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	401a      	ands	r2, r3
 8000a42:	6a39      	ldr	r1, [r7, #32]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	f000 8096 	beq.w	8000b8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5e:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <HAL_GPIO_Init+0x298>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a58      	ldr	r2, [pc, #352]	; (8000bc4 <HAL_GPIO_Init+0x298>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b56      	ldr	r3, [pc, #344]	; (8000bc4 <HAL_GPIO_Init+0x298>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a76:	4a54      	ldr	r2, [pc, #336]	; (8000bc8 <HAL_GPIO_Init+0x29c>)
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	220f      	movs	r2, #15
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43db      	mvns	r3, r3
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4013      	ands	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4b      	ldr	r2, [pc, #300]	; (8000bcc <HAL_GPIO_Init+0x2a0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0x19e>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4a      	ldr	r2, [pc, #296]	; (8000bd0 <HAL_GPIO_Init+0x2a4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d00d      	beq.n	8000ac6 <HAL_GPIO_Init+0x19a>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a49      	ldr	r2, [pc, #292]	; (8000bd4 <HAL_GPIO_Init+0x2a8>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d007      	beq.n	8000ac2 <HAL_GPIO_Init+0x196>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_GPIO_Init+0x2ac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_GPIO_Init+0x192>
 8000aba:	2303      	movs	r3, #3
 8000abc:	e006      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000abe:	2304      	movs	r3, #4
 8000ac0:	e004      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	e002      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <HAL_GPIO_Init+0x1a0>
 8000aca:	2300      	movs	r3, #0
 8000acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ace:	f002 0203 	and.w	r2, r2, #3
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	4093      	lsls	r3, r2
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000adc:	493a      	ldr	r1, [pc, #232]	; (8000bc8 <HAL_GPIO_Init+0x29c>)
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	089b      	lsrs	r3, r3, #2
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d006      	beq.n	8000b04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af6:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4938      	ldr	r1, [pc, #224]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	600b      	str	r3, [r1, #0]
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b04:	4b35      	ldr	r3, [pc, #212]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4933      	ldr	r1, [pc, #204]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d006      	beq.n	8000b2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	492e      	ldr	r1, [pc, #184]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	604b      	str	r3, [r1, #4]
 8000b2a:	e006      	b.n	8000b3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b2e:	685a      	ldr	r2, [r3, #4]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4929      	ldr	r1, [pc, #164]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b46:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	4924      	ldr	r1, [pc, #144]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	608b      	str	r3, [r1, #8]
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	491f      	ldr	r1, [pc, #124]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b5e:	4013      	ands	r3, r2
 8000b60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b70:	68da      	ldr	r2, [r3, #12]
 8000b72:	491a      	ldr	r1, [pc, #104]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	60cb      	str	r3, [r1, #12]
 8000b7a:	e006      	b.n	8000b8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b7c:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	43db      	mvns	r3, r3
 8000b84:	4915      	ldr	r1, [pc, #84]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000b86:	4013      	ands	r3, r2
 8000b88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f47f aed0 	bne.w	8000940 <HAL_GPIO_Init+0x14>
  }
}
 8000ba0:	bf00      	nop
 8000ba2:	372c      	adds	r7, #44	; 0x2c
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	10210000 	.word	0x10210000
 8000bb0:	10110000 	.word	0x10110000
 8000bb4:	10120000 	.word	0x10120000
 8000bb8:	10310000 	.word	0x10310000
 8000bbc:	10320000 	.word	0x10320000
 8000bc0:	10220000 	.word	0x10220000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010000 	.word	0x40010000
 8000bcc:	40010800 	.word	0x40010800
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40011400 	.word	0x40011400
 8000bdc:	40010400 	.word	0x40010400

08000be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bf6:	887a      	ldrh	r2, [r7, #2]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bfc:	e003      	b.n	8000c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bfe:	887b      	ldrh	r3, [r7, #2]
 8000c00:	041a      	lsls	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	611a      	str	r2, [r3, #16]
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c22:	887a      	ldrh	r2, [r7, #2]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4013      	ands	r3, r2
 8000c28:	041a      	lsls	r2, r3, #16
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43d9      	mvns	r1, r3
 8000c2e:	887b      	ldrh	r3, [r7, #2]
 8000c30:	400b      	ands	r3, r1
 8000c32:	431a      	orrs	r2, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	611a      	str	r2, [r3, #16]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr

08000c42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c44:	b08b      	sub	sp, #44	; 0x2c
 8000c46:	af06      	add	r7, sp, #24
 8000c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e0fd      	b.n	8000e50 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d106      	bne.n	8000c6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f008 fb59 	bl	8009320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2203      	movs	r2, #3
 8000c72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 f82a 	bl	8002cd4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	687e      	ldr	r6, [r7, #4]
 8000c88:	466d      	mov	r5, sp
 8000c8a:	f106 0410 	add.w	r4, r6, #16
 8000c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c92:	6823      	ldr	r3, [r4, #0]
 8000c94:	602b      	str	r3, [r5, #0]
 8000c96:	1d33      	adds	r3, r6, #4
 8000c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f001 fff4 	bl	8002c88 <USB_CoreInit>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2202      	movs	r2, #2
 8000caa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e0ce      	b.n	8000e50 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 f825 	bl	8002d08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e04c      	b.n	8000d5e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	1c5a      	adds	r2, r3, #1
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	440b      	add	r3, r1
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	b298      	uxth	r0, r3
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3336      	adds	r3, #54	; 0x36
 8000d02:	4602      	mov	r2, r0
 8000d04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	1c5a      	adds	r2, r3, #1
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	440b      	add	r3, r1
 8000d16:	3303      	adds	r3, #3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	440b      	add	r3, r1
 8000d2a:	3338      	adds	r3, #56	; 0x38
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	440b      	add	r3, r1
 8000d3e:	333c      	adds	r3, #60	; 0x3c
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	3340      	adds	r3, #64	; 0x40
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d3ad      	bcc.n	8000cc4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e044      	b.n	8000df8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	4413      	add	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	440b      	add	r3, r1
 8000da8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	4413      	add	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	440b      	add	r3, r1
 8000dbe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4413      	add	r3, r2
 8000de6:	00db      	lsls	r3, r3, #3
 8000de8:	440b      	add	r3, r1
 8000dea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3b5      	bcc.n	8000d6e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	687e      	ldr	r6, [r7, #4]
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 0410 	add.w	r4, r6, #16
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	602b      	str	r3, [r5, #0]
 8000e18:	1d33      	adds	r3, r6, #4
 8000e1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e1c:	6838      	ldr	r0, [r7, #0]
 8000e1e:	f001 ff7f 	bl	8002d20 <USB_DevInit>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d005      	beq.n	8000e34 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e00d      	b.n	8000e50 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 ff19 	bl	8004c80 <USB_DevDisconnect>

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_PCD_Start+0x16>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e016      	b.n	8000e9c <HAL_PCD_Start+0x44>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 ff14 	bl	8002ca8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000e80:	2101      	movs	r1, #1
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f008 fcbf 	bl	8009806 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 feed 	bl	8004c6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 feef 	bl	8004c94 <USB_ReadInterrupts>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ec0:	d102      	bne.n	8000ec8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f000 fb61 	bl	800158a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f003 fee1 	bl	8004c94 <USB_ReadInterrupts>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000edc:	d112      	bne.n	8000f04 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f008 fa8d 	bl	8009416 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 f925 	bl	800114e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f003 fec3 	bl	8004c94 <USB_ReadInterrupts>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f18:	d10b      	bne.n	8000f32 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f2c:	b292      	uxth	r2, r2
 8000f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 feac 	bl	8004c94 <USB_ReadInterrupts>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f46:	d10b      	bne.n	8000f60 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f5a:	b292      	uxth	r2, r2
 8000f5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fe95 	bl	8004c94 <USB_ReadInterrupts>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f74:	d126      	bne.n	8000fc4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0204 	bic.w	r2, r2, #4
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0208 	bic.w	r2, r2, #8
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f008 fa6e 	bl	8009488 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f003 fe63 	bl	8004c94 <USB_ReadInterrupts>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fd8:	f040 8084 	bne.w	80010e4 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	77fb      	strb	r3, [r7, #31]
 8000fe0:	e011      	b.n	8001006 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	441a      	add	r2, r3
 8000fee:	7ffb      	ldrb	r3, [r7, #31]
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	f107 0120 	add.w	r1, r7, #32
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001000:	7ffb      	ldrb	r3, [r7, #31]
 8001002:	3301      	adds	r3, #1
 8001004:	77fb      	strb	r3, [r7, #31]
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d9ea      	bls.n	8000fe2 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001014:	b29a      	uxth	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	b292      	uxth	r2, r2
 8001020:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800103c:	bf00      	nop
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001046:	b29b      	uxth	r3, r3
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f6      	beq.n	800103e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001058:	b29a      	uxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001062:	b292      	uxth	r2, r2
 8001064:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001068:	2300      	movs	r3, #0
 800106a:	77fb      	strb	r3, [r7, #31]
 800106c:	e010      	b.n	8001090 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	4611      	mov	r1, r2
 8001076:	7ffa      	ldrb	r2, [r7, #31]
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	440a      	add	r2, r1
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	f107 0120 	add.w	r1, r7, #32
 8001082:	440b      	add	r3, r1
 8001084:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001088:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800108a:	7ffb      	ldrb	r3, [r7, #31]
 800108c:	3301      	adds	r3, #1
 800108e:	77fb      	strb	r3, [r7, #31]
 8001090:	7ffb      	ldrb	r3, [r7, #31]
 8001092:	2b07      	cmp	r3, #7
 8001094:	d9eb      	bls.n	800106e <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f042 0208 	orr.w	r2, r2, #8
 80010a8:	b292      	uxth	r2, r2
 80010aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c0:	b292      	uxth	r2, r2
 80010c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0204 	orr.w	r2, r2, #4
 80010d8:	b292      	uxth	r2, r2
 80010da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f008 f9b8 	bl	8009454 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fdd3 	bl	8004c94 <USB_ReadInterrupts>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f8:	d10e      	bne.n	8001118 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001102:	b29a      	uxth	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800110c:	b292      	uxth	r2, r2
 800110e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f008 f971 	bl	80093fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fdb9 	bl	8004c94 <USB_ReadInterrupts>
 8001122:	4603      	mov	r3, r0
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800112c:	d10b      	bne.n	8001146 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001136:	b29a      	uxth	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001140:	b292      	uxth	r2, r2
 8001142:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_PCD_SetAddress+0x1a>
 8001164:	2302      	movs	r3, #2
 8001166:	e013      	b.n	8001190 <HAL_PCD_SetAddress+0x42>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	78fa      	ldrb	r2, [r7, #3]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f003 fd60 	bl	8004c46 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	4608      	mov	r0, r1
 80011a2:	4611      	mov	r1, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	70fb      	strb	r3, [r7, #3]
 80011aa:	460b      	mov	r3, r1
 80011ac:	803b      	strh	r3, [r7, #0]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	da0e      	bge.n	80011dc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	f003 0307 	and.w	r3, r3, #7
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2201      	movs	r2, #1
 80011d8:	705a      	strb	r2, [r3, #1]
 80011da:	e00e      	b.n	80011fa <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	f003 0207 	and.w	r2, r3, #7
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2200      	movs	r2, #0
 80011f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001206:	883a      	ldrh	r2, [r7, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	78ba      	ldrb	r2, [r7, #2]
 8001210:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	2b02      	cmp	r3, #2
 8001228:	d102      	bne.n	8001230 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <HAL_PCD_EP_Open+0xa6>
 800123a:	2302      	movs	r3, #2
 800123c:	e00e      	b.n	800125c <HAL_PCD_EP_Open+0xc4>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2201      	movs	r2, #1
 8001242:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68f9      	ldr	r1, [r7, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	f001 fd87 	bl	8002d60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800125a:	7afb      	ldrb	r3, [r7, #11]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da0e      	bge.n	8001296 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2201      	movs	r2, #1
 8001292:	705a      	strb	r2, [r3, #1]
 8001294:	e00e      	b.n	80012b4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0207 	and.w	r2, r3, #7
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_PCD_EP_Close+0x6a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e00e      	b.n	80012ec <HAL_PCD_EP_Close+0x88>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	4618      	mov	r0, r3
 80012de:	f002 f8a9 	bl	8003434 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	460b      	mov	r3, r1
 8001302:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	f003 0207 	and.w	r2, r3, #7
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2200      	movs	r2, #0
 8001332:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	b2da      	uxtb	r2, r3
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001340:	7afb      	ldrb	r3, [r7, #11]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	4618      	mov	r0, r3
 8001352:	f002 fa5b 	bl	800380c <USB_EPStartXfer>
 8001356:	e005      	b.n	8001364 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6979      	ldr	r1, [r7, #20]
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fa54 	bl	800380c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f003 0207 	and.w	r2, r3, #7
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	440b      	add	r3, r1
 800138c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001390:	681b      	ldr	r3, [r3, #0]
}
 8001392:	4618      	mov	r0, r3
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	460b      	mov	r3, r1
 80013aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ac:	7afb      	ldrb	r3, [r7, #11]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2201      	movs	r2, #1
 80013e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013f4:	7afb      	ldrb	r3, [r7, #11]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6979      	ldr	r1, [r7, #20]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fa01 	bl	800380c <USB_EPStartXfer>
 800140a:	e005      	b.n	8001418 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6979      	ldr	r1, [r7, #20]
 8001412:	4618      	mov	r0, r3
 8001414:	f002 f9fa 	bl	800380c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b084      	sub	sp, #16
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	f003 0207 	and.w	r2, r3, #7
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	d901      	bls.n	8001440 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e04c      	b.n	80014da <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da0e      	bge.n	8001466 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	4413      	add	r3, r2
 800145c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2201      	movs	r2, #1
 8001462:	705a      	strb	r2, [r3, #1]
 8001464:	e00c      	b.n	8001480 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2201      	movs	r2, #1
 8001484:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	b2da      	uxtb	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_PCD_EP_SetStall+0x7e>
 800149c:	2302      	movs	r3, #2
 800149e:	e01c      	b.n	80014da <HAL_PCD_EP_SetStall+0xb8>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 facc 	bl	8004a4c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d108      	bne.n	80014d0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f003 fbf1 	bl	8004cb2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b084      	sub	sp, #16
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	f003 020f 	and.w	r2, r3, #15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d901      	bls.n	8001500 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e040      	b.n	8001582 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001504:	2b00      	cmp	r3, #0
 8001506:	da0e      	bge.n	8001526 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2201      	movs	r2, #1
 8001522:	705a      	strb	r2, [r3, #1]
 8001524:	e00e      	b.n	8001544 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	4613      	mov	r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	b2da      	uxtb	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_PCD_EP_ClrStall+0x82>
 8001560:	2302      	movs	r3, #2
 8001562:	e00e      	b.n	8001582 <HAL_PCD_EP_ClrStall+0xa0>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	f003 faba 	bl	8004aec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b08e      	sub	sp, #56	; 0x38
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001592:	e2df      	b.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800159e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80015aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f040 8158 	bne.w	8001864 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d152      	bne.n	8001664 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ce:	81fb      	strh	r3, [r7, #14]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015de:	b29b      	uxth	r3, r3
 80015e0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3328      	adds	r3, #40	; 0x28
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	3302      	adds	r3, #2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	441a      	add	r2, r3
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001622:	2100      	movs	r1, #0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f007 fece 	bl	80093c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 828e 	beq.w	8001b54 <PCD_EP_ISR_Handler+0x5ca>
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 8289 	bne.w	8001b54 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001648:	b2db      	uxtb	r3, r3
 800164a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b292      	uxth	r2, r2
 8001656:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001662:	e277      	b.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001674:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167a:	2b00      	cmp	r3, #0
 800167c:	d034      	beq.n	80016e8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001686:	b29b      	uxth	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	3306      	adds	r3, #6
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6818      	ldr	r0, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f003 fb47 	bl	8004d50 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016ce:	4013      	ands	r3, r2
 80016d0:	823b      	strh	r3, [r7, #16]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	8a3a      	ldrh	r2, [r7, #16]
 80016d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016dc:	b292      	uxth	r2, r2
 80016de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f007 fe43 	bl	800936c <HAL_PCD_SetupStageCallback>
 80016e6:	e235      	b.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016e8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f280 8231 	bge.w	8001b54 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016fe:	4013      	ands	r3, r2
 8001700:	83bb      	strh	r3, [r7, #28]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	8bba      	ldrh	r2, [r7, #28]
 8001708:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800170c:	b292      	uxth	r2, r2
 800170e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001718:	b29b      	uxth	r3, r3
 800171a:	461a      	mov	r2, r3
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	4413      	add	r3, r2
 8001724:	3306      	adds	r3, #6
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4413      	add	r3, r2
 800172e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d019      	beq.n	8001778 <PCD_EP_ISR_Handler+0x1ee>
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d015      	beq.n	8001778 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6818      	ldr	r0, [r3, #0]
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	6959      	ldr	r1, [r3, #20]
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800175c:	b29b      	uxth	r3, r3
 800175e:	f003 faf7 	bl	8004d50 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	441a      	add	r2, r3
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001770:	2100      	movs	r1, #0
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f007 fe0c 	bl	8009390 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4413      	add	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d112      	bne.n	80017c6 <PCD_EP_ISR_Handler+0x23c>
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	801a      	strh	r2, [r3, #0]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80017ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80017be:	b29a      	uxth	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	801a      	strh	r2, [r3, #0]
 80017c4:	e02f      	b.n	8001826 <PCD_EP_ISR_Handler+0x29c>
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b3e      	cmp	r3, #62	; 0x3e
 80017cc:	d813      	bhi.n	80017f6 <PCD_EP_ISR_Handler+0x26c>
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <PCD_EP_ISR_Handler+0x25e>
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017e4:	3301      	adds	r3, #1
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
 80017e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	801a      	strh	r2, [r3, #0]
 80017f4:	e017      	b.n	8001826 <PCD_EP_ISR_Handler+0x29c>
 80017f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <PCD_EP_ISR_Handler+0x286>
 800180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180c:	3b01      	subs	r3, #1
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	b29b      	uxth	r3, r3
 8001814:	029b      	lsls	r3, r3, #10
 8001816:	b29b      	uxth	r3, r3
 8001818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800181c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001820:	b29a      	uxth	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	881b      	ldrh	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001836:	827b      	strh	r3, [r7, #18]
 8001838:	8a7b      	ldrh	r3, [r7, #18]
 800183a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800183e:	827b      	strh	r3, [r7, #18]
 8001840:	8a7b      	ldrh	r3, [r7, #18]
 8001842:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001846:	827b      	strh	r3, [r7, #18]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	8a7b      	ldrh	r3, [r7, #18]
 800184e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	b29b      	uxth	r3, r3
 8001860:	8013      	strh	r3, [r2, #0]
 8001862:	e177      	b.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001876:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800187a:	2b00      	cmp	r3, #0
 800187c:	f280 80ea 	bge.w	8001a54 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29a      	uxth	r2, r3
 8001892:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001896:	4013      	ands	r3, r2
 8001898:	853b      	strh	r3, [r7, #40]	; 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ae:	b292      	uxth	r2, r2
 80018b0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	7b1b      	ldrb	r3, [r3, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d122      	bne.n	8001916 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018d8:	b29b      	uxth	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	3306      	adds	r3, #6
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018f8:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80018fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8087 	beq.w	8001a10 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	6959      	ldr	r1, [r3, #20]
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	88da      	ldrh	r2, [r3, #6]
 800190e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001910:	f003 fa1e 	bl	8004d50 <USB_ReadPMA>
 8001914:	e07c      	b.n	8001a10 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	78db      	ldrb	r3, [r3, #3]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d108      	bne.n	8001930 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800191e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001920:	461a      	mov	r2, r3
 8001922:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 f923 	bl	8001b70 <HAL_PCD_EP_DB_Receive>
 800192a:	4603      	mov	r3, r0
 800192c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800192e:	e06f      	b.n	8001a10 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	b29b      	uxth	r3, r3
 8001942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194a:	847b      	strh	r3, [r7, #34]	; 0x22
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	441a      	add	r2, r3
 800195a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800195c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800196c:	b29b      	uxth	r3, r3
 800196e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b29b      	uxth	r3, r3
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d021      	beq.n	80019ce <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001992:	b29b      	uxth	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	4413      	add	r3, r2
 800199e:	3302      	adds	r3, #2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019b2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d02a      	beq.n	8001a10 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	6959      	ldr	r1, [r3, #20]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	891a      	ldrh	r2, [r3, #8]
 80019c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019c8:	f003 f9c2 	bl	8004d50 <USB_ReadPMA>
 80019cc:	e020      	b.n	8001a10 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	3306      	adds	r3, #6
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019f6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80019f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d008      	beq.n	8001a10 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6818      	ldr	r0, [r3, #0]
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	6959      	ldr	r1, [r3, #20]
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	895a      	ldrh	r2, [r3, #10]
 8001a0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a0c:	f003 f9a0 	bl	8004d50 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	69da      	ldr	r2, [r3, #28]
 8001a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a16:	441a      	add	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1e:	695a      	ldr	r2, [r3, #20]
 8001a20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a22:	441a      	add	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <PCD_EP_ISR_Handler+0x4b0>
 8001a30:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d206      	bcs.n	8001a48 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f007 fca5 	bl	8009390 <HAL_PCD_DataOutStageCallback>
 8001a46:	e005      	b.n	8001a54 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 fedc 	bl	800380c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d07a      	beq.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001a5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8c:	843b      	strh	r3, [r7, #32]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	441a      	add	r2, r3
 8001a9c:	8c3b      	ldrh	r3, [r7, #32]
 8001a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	78db      	ldrb	r3, [r3, #3]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d108      	bne.n	8001ac4 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d146      	bne.n	8001b48 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001aba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d141      	bne.n	8001b48 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3302      	adds	r3, #2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aec:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	8bfb      	ldrh	r3, [r7, #30]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d906      	bls.n	8001b06 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	699a      	ldr	r2, [r3, #24]
 8001afc:	8bfb      	ldrh	r3, [r7, #30]
 8001afe:	1ad2      	subs	r2, r2, r3
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	619a      	str	r2, [r3, #24]
 8001b04:	e002      	b.n	8001b0c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d106      	bne.n	8001b22 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f007 fc53 	bl	80093c6 <HAL_PCD_DataInStageCallback>
 8001b20:	e018      	b.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	8bfb      	ldrh	r3, [r7, #30]
 8001b28:	441a      	add	r2, r3
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	8bfb      	ldrh	r3, [r7, #30]
 8001b34:	441a      	add	r2, r3
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b40:	4618      	mov	r0, r3
 8001b42:	f001 fe63 	bl	800380c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001b46:	e005      	b.n	8001b54 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001b48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f91b 	bl	8001d8a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f6ff ad17 	blt.w	8001594 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3738      	adds	r7, #56	; 0x38
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d07e      	beq.n	8001c86 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bb0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	699a      	ldr	r2, [r3, #24]
 8001bb6:	8b7b      	ldrh	r3, [r7, #26]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d306      	bcc.n	8001bca <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	8b7b      	ldrh	r3, [r7, #26]
 8001bc2:	1ad2      	subs	r2, r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	619a      	str	r2, [r3, #24]
 8001bc8:	e002      	b.n	8001bd0 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d123      	bne.n	8001c20 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bf2:	833b      	strh	r3, [r7, #24]
 8001bf4:	8b3b      	ldrh	r3, [r7, #24]
 8001bf6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001bfa:	833b      	strh	r3, [r7, #24]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	441a      	add	r2, r3
 8001c0a:	8b3b      	ldrh	r3, [r7, #24]
 8001c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d01f      	beq.n	8001c6a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c44:	82fb      	strh	r3, [r7, #22]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	441a      	add	r2, r3
 8001c54:	8afb      	ldrh	r3, [r7, #22]
 8001c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c6a:	8b7b      	ldrh	r3, [r7, #26]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 8087 	beq.w	8001d80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	6959      	ldr	r1, [r3, #20]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	891a      	ldrh	r2, [r3, #8]
 8001c7e:	8b7b      	ldrh	r3, [r7, #26]
 8001c80:	f003 f866 	bl	8004d50 <USB_ReadPMA>
 8001c84:	e07c      	b.n	8001d80 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	3306      	adds	r3, #6
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	699a      	ldr	r2, [r3, #24]
 8001cb4:	8b7b      	ldrh	r3, [r7, #26]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d306      	bcc.n	8001cc8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	8b7b      	ldrh	r3, [r7, #26]
 8001cc0:	1ad2      	subs	r2, r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	e002      	b.n	8001cce <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d123      	bne.n	8001d1e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf0:	83fb      	strh	r3, [r7, #30]
 8001cf2:	8bfb      	ldrh	r3, [r7, #30]
 8001cf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	441a      	add	r2, r3
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d11f      	bne.n	8001d68 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	83bb      	strh	r3, [r7, #28]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	441a      	add	r2, r3
 8001d52:	8bbb      	ldrh	r3, [r7, #28]
 8001d54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001d68:	8b7b      	ldrh	r3, [r7, #26]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6959      	ldr	r1, [r3, #20]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	895a      	ldrh	r2, [r3, #10]
 8001d7a:	8b7b      	ldrh	r3, [r7, #26]
 8001d7c:	f002 ffe8 	bl	8004d50 <USB_ReadPMA>
    }
  }

  return count;
 8001d80:	8b7b      	ldrh	r3, [r7, #26]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3720      	adds	r7, #32
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b092      	sub	sp, #72	; 0x48
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	4613      	mov	r3, r2
 8001d96:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8132 	beq.w	8002008 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4413      	add	r3, r2
 8001db8:	3302      	adds	r3, #2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dcc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d906      	bls.n	8001de6 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dde:	1ad2      	subs	r2, r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	619a      	str	r2, [r3, #24]
 8001de4:	e002      	b.n	8001dec <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	2200      	movs	r2, #0
 8001dea:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d12c      	bne.n	8001e4e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f007 fae3 	bl	80093c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 822f 	beq.w	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e26:	827b      	strh	r3, [r7, #18]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	441a      	add	r2, r3
 8001e36:	8a7b      	ldrh	r3, [r7, #18]
 8001e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	8013      	strh	r3, [r2, #0]
 8001e4c:	e20d      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01f      	beq.n	8001e98 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e72:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	441a      	add	r2, r3
 8001e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	f040 81e3 	bne.w	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eaa:	441a      	add	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eb6:	441a      	add	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d309      	bcc.n	8001edc <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed4:	1ad2      	subs	r2, r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	621a      	str	r2, [r3, #32]
 8001eda:	e014      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001ee4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001ef0:	e009      	b.n	8001f06 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	785b      	ldrb	r3, [r3, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d155      	bne.n	8001fba <HAL_PCD_EP_DB_Transmit+0x230>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	461a      	mov	r2, r3
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	4413      	add	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	011a      	lsls	r2, r3, #4
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d112      	bne.n	8001f62 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	801a      	strh	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	801a      	strh	r2, [r3, #0]
 8001f60:	e047      	b.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f64:	2b3e      	cmp	r3, #62	; 0x3e
 8001f66:	d811      	bhi.n	8001f8c <HAL_PCD_EP_DB_Transmit+0x202>
 8001f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6a:	085b      	lsrs	r3, r3, #1
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d002      	beq.n	8001f7e <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	029b      	lsls	r3, r3, #10
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	801a      	strh	r2, [r3, #0]
 8001f8a:	e032      	b.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PCD_EP_DB_Transmit+0x218>
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	029b      	lsls	r3, r3, #10
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	801a      	strh	r2, [r3, #0]
 8001fb8:	e01b      	b.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	785b      	ldrb	r3, [r3, #1]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d117      	bne.n	8001ff2 <HAL_PCD_EP_DB_Transmit+0x268>
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	011a      	lsls	r2, r3, #4
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001fe8:	61fb      	str	r3, [r7, #28]
 8001fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	6959      	ldr	r1, [r3, #20]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	891a      	ldrh	r2, [r3, #8]
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002000:	b29b      	uxth	r3, r3
 8002002:	f002 fe61 	bl	8004cc8 <USB_WritePMA>
 8002006:	e130      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002010:	b29b      	uxth	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	3306      	adds	r3, #6
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	4413      	add	r3, r2
 8002026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002030:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002038:	429a      	cmp	r2, r3
 800203a:	d306      	bcc.n	800204a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	619a      	str	r2, [r3, #24]
 8002048:	e002      	b.n	8002050 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d12c      	bne.n	80020b2 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f007 f9b1 	bl	80093c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 80fd 	bne.w	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	b29b      	uxth	r3, r3
 8002082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800209c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	8013      	strh	r3, [r2, #0]
 80020b0:	e0db      	b.n	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11f      	bne.n	80020fc <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	441a      	add	r2, r3
 80020e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80020e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 80b1 	bne.w	800226a <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800210e:	441a      	add	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800211a:	441a      	add	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d309      	bcc.n	8002140 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002138:	1ad2      	subs	r2, r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	621a      	str	r2, [r3, #32]
 800213e:	e014      	b.n	800216a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002148:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800214a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002154:	e009      	b.n	800216a <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	785b      	ldrb	r3, [r3, #1]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d155      	bne.n	8002224 <HAL_PCD_EP_DB_Transmit+0x49a>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	647b      	str	r3, [r7, #68]	; 0x44
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800218c:	4413      	add	r3, r2
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	011a      	lsls	r2, r3, #4
 8002196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002198:	4413      	add	r3, r2
 800219a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800219e:	643b      	str	r3, [r7, #64]	; 0x40
 80021a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d112      	bne.n	80021cc <HAL_PCD_EP_DB_Transmit+0x442>
 80021a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021c8:	801a      	strh	r2, [r3, #0]
 80021ca:	e044      	b.n	8002256 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ce:	2b3e      	cmp	r3, #62	; 0x3e
 80021d0:	d811      	bhi.n	80021f6 <HAL_PCD_EP_DB_Transmit+0x46c>
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d4:	085b      	lsrs	r3, r3, #1
 80021d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_PCD_EP_DB_Transmit+0x45e>
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	3301      	adds	r3, #1
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	029b      	lsls	r3, r3, #10
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f2:	801a      	strh	r2, [r3, #0]
 80021f4:	e02f      	b.n	8002256 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	095b      	lsrs	r3, r3, #5
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_PCD_EP_DB_Transmit+0x482>
 8002206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002208:	3b01      	subs	r3, #1
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800220c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220e:	b29b      	uxth	r3, r3
 8002210:	029b      	lsls	r3, r3, #10
 8002212:	b29b      	uxth	r3, r3
 8002214:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002218:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800221c:	b29a      	uxth	r2, r3
 800221e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002220:	801a      	strh	r2, [r3, #0]
 8002222:	e018      	b.n	8002256 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	785b      	ldrb	r3, [r3, #1]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d114      	bne.n	8002256 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002234:	b29b      	uxth	r3, r3
 8002236:	461a      	mov	r2, r3
 8002238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223a:	4413      	add	r3, r2
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	011a      	lsls	r2, r3, #4
 8002244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002246:	4413      	add	r3, r2
 8002248:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800224c:	633b      	str	r3, [r7, #48]	; 0x30
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	b29a      	uxth	r2, r3
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6959      	ldr	r1, [r3, #20]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	895a      	ldrh	r2, [r3, #10]
 8002262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002264:	b29b      	uxth	r3, r3
 8002266:	f002 fd2f 	bl	8004cc8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002284:	823b      	strh	r3, [r7, #16]
 8002286:	8a3b      	ldrh	r3, [r7, #16]
 8002288:	f083 0310 	eor.w	r3, r3, #16
 800228c:	823b      	strh	r3, [r7, #16]
 800228e:	8a3b      	ldrh	r3, [r7, #16]
 8002290:	f083 0320 	eor.w	r3, r3, #32
 8002294:	823b      	strh	r3, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	441a      	add	r2, r3
 80022a4:	8a3b      	ldrh	r3, [r7, #16]
 80022a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3748      	adds	r7, #72	; 0x48
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607b      	str	r3, [r7, #4]
 80022ce:	460b      	mov	r3, r1
 80022d0:	817b      	strh	r3, [r7, #10]
 80022d2:	4613      	mov	r3, r2
 80022d4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022d6:	897b      	ldrh	r3, [r7, #10]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	e009      	b.n	800230e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022fa:	897a      	ldrh	r2, [r7, #10]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800230e:	893b      	ldrh	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2200      	movs	r2, #0
 8002318:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	b29a      	uxth	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	80da      	strh	r2, [r3, #6]
 8002322:	e00b      	b.n	800233c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2201      	movs	r2, #1
 8002328:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	b29a      	uxth	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	b29a      	uxth	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	371c      	adds	r7, #28
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e26c      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 8087 	beq.w	8002476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 030c 	and.w	r3, r3, #12
 8002370:	2b04      	cmp	r3, #4
 8002372:	d00c      	beq.n	800238e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002374:	4b8f      	ldr	r3, [pc, #572]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 030c 	and.w	r3, r3, #12
 800237c:	2b08      	cmp	r3, #8
 800237e:	d112      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5e>
 8002380:	4b8c      	ldr	r3, [pc, #560]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d10b      	bne.n	80023a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800238e:	4b89      	ldr	r3, [pc, #548]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d06c      	beq.n	8002474 <HAL_RCC_OscConfig+0x12c>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d168      	bne.n	8002474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e246      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ae:	d106      	bne.n	80023be <HAL_RCC_OscConfig+0x76>
 80023b0:	4b80      	ldr	r3, [pc, #512]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a7f      	ldr	r2, [pc, #508]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	e02e      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCC_OscConfig+0x98>
 80023c6:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a77      	ldr	r2, [pc, #476]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0xbc>
 80023ea:	4b72      	ldr	r3, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a71      	ldr	r2, [pc, #452]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xd4>
 8002404:	4b6b      	ldr	r3, [pc, #428]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a6a      	ldr	r2, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b68      	ldr	r3, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7fe f96a 	bl	80006fc <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7fe f966 	bl	80006fc <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e1fa      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xe4>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe f956 	bl	80006fc <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe f952 	bl	80006fc <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1e6      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x10c>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d063      	beq.n	800254a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002482:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800248e:	4b49      	ldr	r3, [pc, #292]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x18c>
 800249a:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x176>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1ba      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4939      	ldr	r1, [pc, #228]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	e03a      	b.n	800254a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe f90b 	bl	80006fc <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ea:	f7fe f907 	bl	80006fc <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e19b      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_RCC_OscConfig+0x270>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe f8ea 	bl	80006fc <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252c:	f7fe f8e6 	bl	80006fc <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e17a      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d03a      	beq.n	80025cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d019      	beq.n	8002592 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255e:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_RCC_OscConfig+0x274>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7fe f8ca 	bl	80006fc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256c:	f7fe f8c6 	bl	80006fc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e15a      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_RCC_OscConfig+0x26c>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800258a:	2001      	movs	r0, #1
 800258c:	f000 faa8 	bl	8002ae0 <RCC_Delay>
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_RCC_OscConfig+0x274>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7fe f8b0 	bl	80006fc <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259e:	e00f      	b.n	80025c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe f8ac 	bl	80006fc <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d908      	bls.n	80025c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e140      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	42420000 	.word	0x42420000
 80025bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	4b9e      	ldr	r3, [pc, #632]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e9      	bne.n	80025a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80a6 	beq.w	8002726 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b97      	ldr	r3, [pc, #604]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10d      	bne.n	8002606 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b94      	ldr	r3, [pc, #592]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a93      	ldr	r2, [pc, #588]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b91      	ldr	r3, [pc, #580]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b8e      	ldr	r3, [pc, #568]	; (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b8b      	ldr	r3, [pc, #556]	; (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a8a      	ldr	r2, [pc, #552]	; (8002840 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7fe f86d 	bl	80006fc <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7fe f869 	bl	80006fc <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e0fd      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x4f8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x312>
 800264c:	4b7b      	ldr	r3, [pc, #492]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a7a      	ldr	r2, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	e02d      	b.n	80026b6 <HAL_RCC_OscConfig+0x36e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x334>
 8002662:	4b76      	ldr	r3, [pc, #472]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4a75      	ldr	r2, [pc, #468]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6213      	str	r3, [r2, #32]
 800266e:	4b73      	ldr	r3, [pc, #460]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a72      	ldr	r2, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	e01c      	b.n	80026b6 <HAL_RCC_OscConfig+0x36e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x356>
 8002684:	4b6d      	ldr	r3, [pc, #436]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a6c      	ldr	r2, [pc, #432]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800268a:	f043 0304 	orr.w	r3, r3, #4
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	4b6a      	ldr	r3, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a69      	ldr	r2, [pc, #420]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0x36e>
 800269e:	4b67      	ldr	r3, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	4a66      	ldr	r2, [pc, #408]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	6213      	str	r3, [r2, #32]
 80026aa:	4b64      	ldr	r3, [pc, #400]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	4a63      	ldr	r2, [pc, #396]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	f023 0304 	bic.w	r3, r3, #4
 80026b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d015      	beq.n	80026ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026be:	f7fe f81d 	bl	80006fc <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c6:	f7fe f819 	bl	80006fc <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e0ab      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	4b57      	ldr	r3, [pc, #348]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ee      	beq.n	80026c6 <HAL_RCC_OscConfig+0x37e>
 80026e8:	e014      	b.n	8002714 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7fe f807 	bl	80006fc <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe f803 	bl	80006fc <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e095      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d105      	bne.n	8002726 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271a:	4b48      	ldr	r3, [pc, #288]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4a47      	ldr	r2, [pc, #284]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002724:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8081 	beq.w	8002832 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002730:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 030c 	and.w	r3, r3, #12
 8002738:	2b08      	cmp	r3, #8
 800273a:	d061      	beq.n	8002800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d146      	bne.n	80027d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002744:	4b3f      	ldr	r3, [pc, #252]	; (8002844 <HAL_RCC_OscConfig+0x4fc>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274a:	f7fd ffd7 	bl	80006fc <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002752:	f7fd ffd3 	bl	80006fc <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e067      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	4b35      	ldr	r3, [pc, #212]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002778:	d108      	bne.n	800278c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800277a:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	492d      	ldr	r1, [pc, #180]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a19      	ldr	r1, [r3, #32]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	430b      	orrs	r3, r1
 800279e:	4927      	ldr	r1, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_OscConfig+0x4fc>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fd ffa7 	bl	80006fc <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7fd ffa3 	bl	80006fc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e037      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x46a>
 80027d0:	e02f      	b.n	8002832 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b1c      	ldr	r3, [pc, #112]	; (8002844 <HAL_RCC_OscConfig+0x4fc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7fd ff90 	bl	80006fc <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fd ff8c 	bl	80006fc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e020      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	4b12      	ldr	r3, [pc, #72]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x498>
 80027fe:	e018      	b.n	8002832 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e013      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_OscConfig+0x4f4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	429a      	cmp	r2, r3
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	40007000 	.word	0x40007000
 8002844:	42420060 	.word	0x42420060

08002848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0d0      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b6a      	ldr	r3, [pc, #424]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d910      	bls.n	800288c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b67      	ldr	r3, [pc, #412]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 0207 	bic.w	r2, r3, #7
 8002872:	4965      	ldr	r1, [pc, #404]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e0b8      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d020      	beq.n	80028da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028bc:	4b53      	ldr	r3, [pc, #332]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4b50      	ldr	r3, [pc, #320]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	494d      	ldr	r1, [pc, #308]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d040      	beq.n	8002968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b47      	ldr	r3, [pc, #284]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d115      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07f      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	4b41      	ldr	r3, [pc, #260]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e073      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	4b3d      	ldr	r3, [pc, #244]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06b      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4936      	ldr	r1, [pc, #216]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002938:	f7fd fee0 	bl	80006fc <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fd fedc 	bl	80006fc <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e053      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002968:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d210      	bcs.n	8002998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 0207 	bic.w	r2, r3, #7
 800297e:	4922      	ldr	r1, [pc, #136]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002986:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e032      	b.n	80029fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a4:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4916      	ldr	r1, [pc, #88]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029d6:	f000 f821 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029da:	4601      	mov	r1, r0
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	5cd3      	ldrb	r3, [r2, r3]
 80029ea:	fa21 f303 	lsr.w	r3, r1, r3
 80029ee:	4a09      	ldr	r2, [pc, #36]	; (8002a14 <HAL_RCC_ClockConfig+0x1cc>)
 80029f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1d0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fe3e 	bl	8000678 <HAL_InitTick>

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40022000 	.word	0x40022000
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	08009a78 	.word	0x08009a78
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	b490      	push	{r4, r7}
 8002a1e:	b08a      	sub	sp, #40	; 0x28
 8002a20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a22:	4b2a      	ldr	r3, [pc, #168]	; (8002acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a24:	1d3c      	adds	r4, r7, #4
 8002a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a2c:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a46:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d002      	beq.n	8002a5c <HAL_RCC_GetSysClockFreq+0x40>
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d003      	beq.n	8002a62 <HAL_RCC_GetSysClockFreq+0x46>
 8002a5a:	e02d      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5e:	623b      	str	r3, [r7, #32]
      break;
 8002a60:	e02d      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	0c9b      	lsrs	r3, r3, #18
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a6e:	4413      	add	r3, r2
 8002a70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c5b      	lsrs	r3, r3, #17
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a8e:	4413      	add	r3, r2
 8002a90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	4a0f      	ldr	r2, [pc, #60]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9a:	fb02 f203 	mul.w	r2, r2, r3
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	e004      	b.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	623b      	str	r3, [r7, #32]
      break;
 8002ab6:	e002      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ab8:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002aba:	623b      	str	r3, [r7, #32]
      break;
 8002abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002abe:	6a3b      	ldr	r3, [r7, #32]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc90      	pop	{r4, r7}
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	080099e0 	.word	0x080099e0
 8002ad0:	080099f0 	.word	0x080099f0
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	007a1200 	.word	0x007a1200
 8002adc:	003d0900 	.word	0x003d0900

08002ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCC_Delay+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <RCC_Delay+0x38>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002afc:	bf00      	nop
  }
  while (Delay --);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <RCC_Delay+0x1c>
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000000 	.word	0x20000000
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d07d      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d118      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7c:	f7fd fdbe 	bl	80006fc <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	e008      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fd fdba 	bl	80006fc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e06d      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02e      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d027      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fd fd89 	bl	80006fc <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fd fd85 	bl	80006fc <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e036      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ee      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4917      	ldr	r1, [pc, #92]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	490b      	ldr	r1, [pc, #44]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	4904      	ldr	r1, [pc, #16]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42420440 	.word	0x42420440

08002c88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c88:	b084      	sub	sp, #16
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	f107 0014 	add.w	r0, r7, #20
 8002c96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	b004      	add	sp, #16
 8002ca6:	4770      	bx	lr

08002ca8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cb8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002cbc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002cdc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002ce0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	460b      	mov	r3, r1
 8002d12:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002d20:	b084      	sub	sp, #16
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	f107 0014 	add.w	r0, r7, #20
 8002d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	b004      	add	sp, #16
 8002d5e:	4770      	bx	lr

08002d60 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b09b      	sub	sp, #108	; 0x6c
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	78db      	ldrb	r3, [r3, #3]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d81f      	bhi.n	8002dd2 <USB_ActivateEndpoint+0x72>
 8002d92:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <USB_ActivateEndpoint+0x38>)
 8002d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002ddb 	.word	0x08002ddb
 8002da4:	08002db7 	.word	0x08002db7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002da8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002db4:	e012      	b.n	8002ddc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002db6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002dbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002dc2:	e00b      	b.n	8002ddc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002dc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dcc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002dd0:	e004      	b.n	8002ddc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002dd8:	e000      	b.n	8002ddc <USB_ActivateEndpoint+0x7c>
      break;
 8002dda:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	441a      	add	r2, r3
 8002de6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	7b1b      	ldrb	r3, [r3, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 8149 	bne.w	80030e0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8084 	beq.w	8002f60 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	4413      	add	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	011a      	lsls	r2, r3, #4
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	88db      	ldrh	r3, [r3, #6]
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	81fb      	strh	r3, [r7, #14]
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01b      	beq.n	8002edc <USB_ActivateEndpoint+0x17c>
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eba:	81bb      	strh	r3, [r7, #12]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	89bb      	ldrh	r3, [r7, #12]
 8002ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	78db      	ldrb	r3, [r3, #3]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d020      	beq.n	8002f26 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efa:	813b      	strh	r3, [r7, #8]
 8002efc:	893b      	ldrh	r3, [r7, #8]
 8002efe:	f083 0320 	eor.w	r3, r3, #32
 8002f02:	813b      	strh	r3, [r7, #8]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	893b      	ldrh	r3, [r7, #8]
 8002f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	8013      	strh	r3, [r2, #0]
 8002f24:	e27f      	b.n	8003426 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3c:	817b      	strh	r3, [r7, #10]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	441a      	add	r2, r3
 8002f48:	897b      	ldrh	r3, [r7, #10]
 8002f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8013      	strh	r3, [r2, #0]
 8002f5e:	e262      	b.n	8003426 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f70:	4413      	add	r3, r2
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	011a      	lsls	r2, r3, #4
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	88db      	ldrh	r3, [r3, #6]
 8002f88:	085b      	lsrs	r3, r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f92:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	4413      	add	r3, r2
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	011a      	lsls	r2, r3, #4
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fb6:	623b      	str	r3, [r7, #32]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d112      	bne.n	8002fe6 <USB_ActivateEndpoint+0x286>
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	801a      	strh	r2, [r3, #0]
 8002fe4:	e02f      	b.n	8003046 <USB_ActivateEndpoint+0x2e6>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b3e      	cmp	r3, #62	; 0x3e
 8002fec:	d813      	bhi.n	8003016 <USB_ActivateEndpoint+0x2b6>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <USB_ActivateEndpoint+0x2a8>
 8003002:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003004:	3301      	adds	r3, #1
 8003006:	663b      	str	r3, [r7, #96]	; 0x60
 8003008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800300a:	b29b      	uxth	r3, r3
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	b29a      	uxth	r2, r3
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	e017      	b.n	8003046 <USB_ActivateEndpoint+0x2e6>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	663b      	str	r3, [r7, #96]	; 0x60
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <USB_ActivateEndpoint+0x2d0>
 800302a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800302c:	3b01      	subs	r3, #1
 800302e:	663b      	str	r3, [r7, #96]	; 0x60
 8003030:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003032:	b29b      	uxth	r3, r3
 8003034:	029b      	lsls	r3, r3, #10
 8003036:	b29b      	uxth	r3, r3
 8003038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800303c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003040:	b29a      	uxth	r2, r3
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	83fb      	strh	r3, [r7, #30]
 8003054:	8bfb      	ldrh	r3, [r7, #30]
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d01b      	beq.n	8003096 <USB_ActivateEndpoint+0x336>
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	83bb      	strh	r3, [r7, #28]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	441a      	add	r2, r3
 8003080:	8bbb      	ldrh	r3, [r7, #28]
 8003082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800308a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003092:	b29b      	uxth	r3, r3
 8003094:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ac:	837b      	strh	r3, [r7, #26]
 80030ae:	8b7b      	ldrh	r3, [r7, #26]
 80030b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030b4:	837b      	strh	r3, [r7, #26]
 80030b6:	8b7b      	ldrh	r3, [r7, #26]
 80030b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030bc:	837b      	strh	r3, [r7, #26]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	441a      	add	r2, r3
 80030c8:	8b7b      	ldrh	r3, [r7, #26]
 80030ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030da:	b29b      	uxth	r3, r3
 80030dc:	8013      	strh	r3, [r2, #0]
 80030de:	e1a2      	b.n	8003426 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	441a      	add	r2, r3
 8003104:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003110:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003118:	b29b      	uxth	r3, r3
 800311a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003126:	b29b      	uxth	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312c:	4413      	add	r3, r2
 800312e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	011a      	lsls	r2, r3, #4
 8003136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003138:	4413      	add	r3, r2
 800313a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800313e:	657b      	str	r3, [r7, #84]	; 0x54
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	891b      	ldrh	r3, [r3, #8]
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	b29b      	uxth	r3, r3
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314e:	801a      	strh	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800315a:	b29b      	uxth	r3, r3
 800315c:	461a      	mov	r2, r3
 800315e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003160:	4413      	add	r3, r2
 8003162:	653b      	str	r3, [r7, #80]	; 0x50
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	011a      	lsls	r2, r3, #4
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	4413      	add	r3, r2
 800316e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	895b      	ldrh	r3, [r3, #10]
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	b29b      	uxth	r3, r3
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003182:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	785b      	ldrb	r3, [r3, #1]
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 8091 	bne.w	80032b0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800319c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800319e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01b      	beq.n	80031de <USB_ActivateEndpoint+0x47e>
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	441a      	add	r2, r3
 80031c8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80031ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031da:	b29b      	uxth	r3, r3
 80031dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80031ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d01b      	beq.n	800322e <USB_ActivateEndpoint+0x4ce>
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	441a      	add	r2, r3
 8003218:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800321a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800321e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800322a:	b29b      	uxth	r3, r3
 800322c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	881b      	ldrh	r3, [r3, #0]
 800323a:	b29b      	uxth	r3, r3
 800323c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003244:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003246:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003248:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800324c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800324e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003250:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003254:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	441a      	add	r2, r3
 8003260:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800326a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003272:	b29b      	uxth	r3, r3
 8003274:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328c:	867b      	strh	r3, [r7, #50]	; 0x32
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800329a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800329e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	8013      	strh	r3, [r2, #0]
 80032ae:	e0ba      	b.n	8003426 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80032c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80032c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01d      	beq.n	8003308 <USB_ActivateEndpoint+0x5a8>
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	441a      	add	r2, r3
 80032f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80032f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003304:	b29b      	uxth	r3, r3
 8003306:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003318:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800331c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d01d      	beq.n	8003360 <USB_ActivateEndpoint+0x600>
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	441a      	add	r2, r3
 8003348:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800334c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003350:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003358:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800335c:	b29b      	uxth	r3, r3
 800335e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	78db      	ldrb	r3, [r3, #3]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d024      	beq.n	80033b2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800337a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800337e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003386:	f083 0320 	eor.w	r3, r3, #32
 800338a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800339c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8013      	strh	r3, [r2, #0]
 80033b0:	e01d      	b.n	80033ee <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	441a      	add	r2, r3
 80033d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80033da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003404:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	441a      	add	r2, r3
 8003410:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003412:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003416:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003422:	b29b      	uxth	r3, r3
 8003424:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003426:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800342a:	4618      	mov	r0, r3
 800342c:	376c      	adds	r7, #108	; 0x6c
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003434:	b480      	push	{r7}
 8003436:	b08d      	sub	sp, #52	; 0x34
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	7b1b      	ldrb	r3, [r3, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f040 808e 	bne.w	8003564 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d044      	beq.n	80034da <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	81bb      	strh	r3, [r7, #12]
 800345e:	89bb      	ldrh	r3, [r7, #12]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <USB_DeactivateEndpoint+0x6c>
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b29b      	uxth	r3, r3
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800347e:	817b      	strh	r3, [r7, #10]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003490:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003498:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800349c:	b29b      	uxth	r3, r3
 800349e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b6:	813b      	strh	r3, [r7, #8]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	441a      	add	r2, r3
 80034c2:	893b      	ldrh	r3, [r7, #8]
 80034c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8013      	strh	r3, [r2, #0]
 80034d8:	e192      	b.n	8003800 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	881b      	ldrh	r3, [r3, #0]
 80034e6:	827b      	strh	r3, [r7, #18]
 80034e8:	8a7b      	ldrh	r3, [r7, #18]
 80034ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01b      	beq.n	800352a <USB_DeactivateEndpoint+0xf6>
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003504:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003508:	823b      	strh	r3, [r7, #16]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	441a      	add	r2, r3
 8003514:	8a3b      	ldrh	r3, [r7, #16]
 8003516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800351a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800351e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003526:	b29b      	uxth	r3, r3
 8003528:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800353c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003540:	81fb      	strh	r3, [r7, #14]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	441a      	add	r2, r3
 800354c:	89fb      	ldrh	r3, [r7, #14]
 800354e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800355e:	b29b      	uxth	r3, r3
 8003560:	8013      	strh	r3, [r2, #0]
 8003562:	e14d      	b.n	8003800 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	785b      	ldrb	r3, [r3, #1]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f040 80a5 	bne.w	80036b8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	843b      	strh	r3, [r7, #32]
 800357c:	8c3b      	ldrh	r3, [r7, #32]
 800357e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01b      	beq.n	80035be <USB_DeactivateEndpoint+0x18a>
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359c:	83fb      	strh	r3, [r7, #30]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	441a      	add	r2, r3
 80035a8:	8bfb      	ldrh	r3, [r7, #30]
 80035aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	83bb      	strh	r3, [r7, #28]
 80035cc:	8bbb      	ldrh	r3, [r7, #28]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01b      	beq.n	800360e <USB_DeactivateEndpoint+0x1da>
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ec:	837b      	strh	r3, [r7, #26]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	441a      	add	r2, r3
 80035f8:	8b7b      	ldrh	r3, [r7, #26]
 80035fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003606:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800360a:	b29b      	uxth	r3, r3
 800360c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003624:	833b      	strh	r3, [r7, #24]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	441a      	add	r2, r3
 8003630:	8b3b      	ldrh	r3, [r7, #24]
 8003632:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003636:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800363a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003642:	b29b      	uxth	r3, r3
 8003644:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	b29b      	uxth	r3, r3
 8003654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365c:	82fb      	strh	r3, [r7, #22]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	441a      	add	r2, r3
 8003668:	8afb      	ldrh	r3, [r7, #22]
 800366a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800366e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800367a:	b29b      	uxth	r3, r3
 800367c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003694:	82bb      	strh	r3, [r7, #20]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	441a      	add	r2, r3
 80036a0:	8abb      	ldrh	r3, [r7, #20]
 80036a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8013      	strh	r3, [r2, #0]
 80036b6:	e0a3      	b.n	8003800 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80036c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80036c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01b      	beq.n	8003708 <USB_DeactivateEndpoint+0x2d4>
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	441a      	add	r2, r3
 80036f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	b29b      	uxth	r3, r3
 8003706:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003716:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <USB_DeactivateEndpoint+0x324>
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	881b      	ldrh	r3, [r3, #0]
 800372c:	b29b      	uxth	r3, r3
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	853b      	strh	r3, [r7, #40]	; 0x28
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800374c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003750:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	441a      	add	r2, r3
 800377a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29b      	uxth	r3, r3
 800379e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80037b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	847b      	strh	r3, [r7, #34]	; 0x22
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	441a      	add	r2, r3
 80037ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3734      	adds	r7, #52	; 0x34
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr

0800380c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b0c4      	sub	sp, #272	; 0x110
 8003810:	af00      	add	r7, sp, #0
 8003812:	1d3b      	adds	r3, r7, #4
 8003814:	6018      	str	r0, [r3, #0]
 8003816:	463b      	mov	r3, r7
 8003818:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800381a:	463b      	mov	r3, r7
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b01      	cmp	r3, #1
 8003822:	f040 8557 	bne.w	80042d4 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003826:	463b      	mov	r3, r7
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	463b      	mov	r3, r7
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d905      	bls.n	8003842 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003836:	463b      	mov	r3, r7
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003840:	e004      	b.n	800384c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003842:	463b      	mov	r3, r7
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800384c:	463b      	mov	r3, r7
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	7b1b      	ldrb	r3, [r3, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d12c      	bne.n	80038b0 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003856:	463b      	mov	r3, r7
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6959      	ldr	r1, [r3, #20]
 800385c:	463b      	mov	r3, r7
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	88da      	ldrh	r2, [r3, #6]
 8003862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003866:	b29b      	uxth	r3, r3
 8003868:	1d38      	adds	r0, r7, #4
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	f001 fa2c 	bl	8004cc8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003870:	1d3b      	adds	r3, r7, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	1d3b      	adds	r3, r7, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	461a      	mov	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4413      	add	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	463b      	mov	r3, r7
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	011a      	lsls	r2, r3, #4
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4413      	add	r3, r2
 8003894:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	f000 bcdd 	b.w	800426a <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80038b0:	463b      	mov	r3, r7
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	78db      	ldrb	r3, [r3, #3]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	f040 8347 	bne.w	8003f4a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80038bc:	463b      	mov	r3, r7
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	463b      	mov	r3, r7
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	f240 82eb 	bls.w	8003ea4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	463b      	mov	r3, r7
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	463b      	mov	r3, r7
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80038fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003906:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800390a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800390e:	b29b      	uxth	r3, r3
 8003910:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003912:	463b      	mov	r3, r7
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1a      	ldr	r2, [r3, #32]
 8003918:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391c:	1ad2      	subs	r2, r2, r3
 800391e:	463b      	mov	r3, r7
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	463b      	mov	r3, r7
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8159 	beq.w	8003bf2 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
 8003946:	463b      	mov	r3, r7
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	785b      	ldrb	r3, [r3, #1]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d164      	bne.n	8003a1a <USB_EPStartXfer+0x20e>
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800395e:	b29b      	uxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	4413      	add	r3, r2
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003968:	463b      	mov	r3, r7
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	011a      	lsls	r2, r3, #4
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	4413      	add	r3, r2
 8003974:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
 800397a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d112      	bne.n	80039a8 <USB_EPStartXfer+0x19c>
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800398c:	b29a      	uxth	r2, r3
 800398e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003990:	801a      	strh	r2, [r3, #0]
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800399c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	e054      	b.n	8003a52 <USB_EPStartXfer+0x246>
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ac:	2b3e      	cmp	r3, #62	; 0x3e
 80039ae:	d817      	bhi.n	80039e0 <USB_EPStartXfer+0x1d4>
 80039b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <USB_EPStartXfer+0x1c4>
 80039c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	029b      	lsls	r3, r3, #10
 80039d8:	b29a      	uxth	r2, r3
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e038      	b.n	8003a52 <USB_EPStartXfer+0x246>
 80039e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <USB_EPStartXfer+0x1f4>
 80039f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fa:	3b01      	subs	r3, #1
 80039fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	029b      	lsls	r3, r3, #10
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a16:	801a      	strh	r2, [r3, #0]
 8003a18:	e01b      	b.n	8003a52 <USB_EPStartXfer+0x246>
 8003a1a:	463b      	mov	r3, r7
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	785b      	ldrb	r3, [r3, #1]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d116      	bne.n	8003a52 <USB_EPStartXfer+0x246>
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	4413      	add	r3, r2
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
 8003a36:	463b      	mov	r3, r7
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	011a      	lsls	r2, r3, #4
 8003a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a40:	4413      	add	r3, r2
 8003a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a46:	633b      	str	r3, [r7, #48]	; 0x30
 8003a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003a52:	463b      	mov	r3, r7
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	895b      	ldrh	r3, [r3, #10]
 8003a58:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a5c:	463b      	mov	r3, r7
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6959      	ldr	r1, [r3, #20]
 8003a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003a6c:	1d38      	adds	r0, r7, #4
 8003a6e:	6800      	ldr	r0, [r0, #0]
 8003a70:	f001 f92a 	bl	8004cc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8003a74:	463b      	mov	r3, r7
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7e:	441a      	add	r2, r3
 8003a80:	463b      	mov	r3, r7
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003a86:	463b      	mov	r3, r7
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	463b      	mov	r3, r7
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d909      	bls.n	8003aaa <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 8003a96:	463b      	mov	r3, r7
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6a1a      	ldr	r2, [r3, #32]
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	1ad2      	subs	r2, r2, r3
 8003aa2:	463b      	mov	r3, r7
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	621a      	str	r2, [r3, #32]
 8003aa8:	e008      	b.n	8003abc <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8003aaa:	463b      	mov	r3, r7
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003abc:	463b      	mov	r3, r7
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	785b      	ldrb	r3, [r3, #1]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d164      	bne.n	8003b90 <USB_EPStartXfer+0x384>
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	1d3b      	adds	r3, r7, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	4413      	add	r3, r2
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	463b      	mov	r3, r7
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	011a      	lsls	r2, r3, #4
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d112      	bne.n	8003b1e <USB_EPStartXfer+0x312>
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	801a      	strh	r2, [r3, #0]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	e057      	b.n	8003bce <USB_EPStartXfer+0x3c2>
 8003b1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b22:	2b3e      	cmp	r3, #62	; 0x3e
 8003b24:	d817      	bhi.n	8003b56 <USB_EPStartXfer+0x34a>
 8003b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <USB_EPStartXfer+0x33a>
 8003b3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b40:	3301      	adds	r3, #1
 8003b42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	029b      	lsls	r3, r3, #10
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	801a      	strh	r2, [r3, #0]
 8003b54:	e03b      	b.n	8003bce <USB_EPStartXfer+0x3c2>
 8003b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <USB_EPStartXfer+0x36a>
 8003b6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b70:	3b01      	subs	r3, #1
 8003b72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	e01e      	b.n	8003bce <USB_EPStartXfer+0x3c2>
 8003b90:	463b      	mov	r3, r7
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d119      	bne.n	8003bce <USB_EPStartXfer+0x3c2>
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	4413      	add	r3, r2
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	011a      	lsls	r2, r3, #4
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003bce:	463b      	mov	r3, r7
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	891b      	ldrh	r3, [r3, #8]
 8003bd4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003bd8:	463b      	mov	r3, r7
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6959      	ldr	r1, [r3, #20]
 8003bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003be8:	1d38      	adds	r0, r7, #4
 8003bea:	6800      	ldr	r0, [r0, #0]
 8003bec:	f001 f86c 	bl	8004cc8 <USB_WritePMA>
 8003bf0:	e33b      	b.n	800426a <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bf2:	463b      	mov	r3, r7
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d164      	bne.n	8003cc6 <USB_EPStartXfer+0x4ba>
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c10:	4413      	add	r3, r2
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c14:	463b      	mov	r3, r7
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	011a      	lsls	r2, r3, #4
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d112      	bne.n	8003c54 <USB_EPStartXfer+0x448>
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	e057      	b.n	8003d04 <USB_EPStartXfer+0x4f8>
 8003c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c58:	2b3e      	cmp	r3, #62	; 0x3e
 8003c5a:	d817      	bhi.n	8003c8c <USB_EPStartXfer+0x480>
 8003c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c60:	085b      	lsrs	r3, r3, #1
 8003c62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <USB_EPStartXfer+0x470>
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c76:	3301      	adds	r3, #1
 8003c78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c88:	801a      	strh	r2, [r3, #0]
 8003c8a:	e03b      	b.n	8003d04 <USB_EPStartXfer+0x4f8>
 8003c8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d104      	bne.n	8003cac <USB_EPStartXfer+0x4a0>
 8003ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003cac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	029b      	lsls	r3, r3, #10
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e01e      	b.n	8003d04 <USB_EPStartXfer+0x4f8>
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	785b      	ldrb	r3, [r3, #1]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d119      	bne.n	8003d04 <USB_EPStartXfer+0x4f8>
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce4:	4413      	add	r3, r2
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce8:	463b      	mov	r3, r7
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	011a      	lsls	r2, r3, #4
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8003cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003d04:	463b      	mov	r3, r7
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	891b      	ldrh	r3, [r3, #8]
 8003d0a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003d0e:	463b      	mov	r3, r7
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6959      	ldr	r1, [r3, #20]
 8003d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003d1e:	1d38      	adds	r0, r7, #4
 8003d20:	6800      	ldr	r0, [r0, #0]
 8003d22:	f000 ffd1 	bl	8004cc8 <USB_WritePMA>
            ep->xfer_buff += len;
 8003d26:	463b      	mov	r3, r7
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	441a      	add	r2, r3
 8003d32:	463b      	mov	r3, r7
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003d38:	463b      	mov	r3, r7
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	463b      	mov	r3, r7
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d909      	bls.n	8003d5c <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003d48:	463b      	mov	r3, r7
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6a1a      	ldr	r2, [r3, #32]
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	1ad2      	subs	r2, r2, r3
 8003d54:	463b      	mov	r3, r7
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	621a      	str	r2, [r3, #32]
 8003d5a:	e008      	b.n	8003d6e <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003d5c:	463b      	mov	r3, r7
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003d66:	463b      	mov	r3, r7
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	647b      	str	r3, [r7, #68]	; 0x44
 8003d74:	463b      	mov	r3, r7
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	785b      	ldrb	r3, [r3, #1]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d164      	bne.n	8003e48 <USB_EPStartXfer+0x63c>
 8003d7e:	1d3b      	adds	r3, r7, #4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	4413      	add	r3, r2
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d96:	463b      	mov	r3, r7
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	011a      	lsls	r2, r3, #4
 8003d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da0:	4413      	add	r3, r2
 8003da2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d112      	bne.n	8003dd6 <USB_EPStartXfer+0x5ca>
 8003db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	801a      	strh	r2, [r3, #0]
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	801a      	strh	r2, [r3, #0]
 8003dd4:	e054      	b.n	8003e80 <USB_EPStartXfer+0x674>
 8003dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dda:	2b3e      	cmp	r3, #62	; 0x3e
 8003ddc:	d817      	bhi.n	8003e0e <USB_EPStartXfer+0x602>
 8003dde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <USB_EPStartXfer+0x5f2>
 8003df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	029b      	lsls	r3, r3, #10
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0a:	801a      	strh	r2, [r3, #0]
 8003e0c:	e038      	b.n	8003e80 <USB_EPStartXfer+0x674>
 8003e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1c:	f003 031f 	and.w	r3, r3, #31
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <USB_EPStartXfer+0x622>
 8003e24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	029b      	lsls	r3, r3, #10
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	801a      	strh	r2, [r3, #0]
 8003e46:	e01b      	b.n	8003e80 <USB_EPStartXfer+0x674>
 8003e48:	463b      	mov	r3, r7
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	785b      	ldrb	r3, [r3, #1]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d116      	bne.n	8003e80 <USB_EPStartXfer+0x674>
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e60:	4413      	add	r3, r2
 8003e62:	647b      	str	r3, [r7, #68]	; 0x44
 8003e64:	463b      	mov	r3, r7
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	011a      	lsls	r2, r3, #4
 8003e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6e:	4413      	add	r3, r2
 8003e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e74:	643b      	str	r3, [r7, #64]	; 0x40
 8003e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003e80:	463b      	mov	r3, r7
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	895b      	ldrh	r3, [r3, #10]
 8003e86:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6959      	ldr	r1, [r3, #20]
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e9a:	1d38      	adds	r0, r7, #4
 8003e9c:	6800      	ldr	r0, [r0, #0]
 8003e9e:	f000 ff13 	bl	8004cc8 <USB_WritePMA>
 8003ea2:	e1e2      	b.n	800426a <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003eae:	1d3b      	adds	r3, r7, #4
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003ef2:	1d3b      	adds	r3, r7, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef8:	1d3b      	adds	r3, r7, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f06:	4413      	add	r3, r2
 8003f08:	663b      	str	r3, [r7, #96]	; 0x60
 8003f0a:	463b      	mov	r3, r7
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	011a      	lsls	r2, r3, #4
 8003f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f14:	4413      	add	r3, r2
 8003f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003f26:	463b      	mov	r3, r7
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	891b      	ldrh	r3, [r3, #8]
 8003f2c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003f30:	463b      	mov	r3, r7
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6959      	ldr	r1, [r3, #20]
 8003f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003f40:	1d38      	adds	r0, r7, #4
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	f000 fec0 	bl	8004cc8 <USB_WritePMA>
 8003f48:	e18f      	b.n	800426a <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	463b      	mov	r3, r7
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 808f 	beq.w	8004084 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d164      	bne.n	8004040 <USB_EPStartXfer+0x834>
 8003f76:	1d3b      	adds	r3, r7, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f7c:	1d3b      	adds	r3, r7, #4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	461a      	mov	r2, r3
 8003f88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f8a:	4413      	add	r3, r2
 8003f8c:	673b      	str	r3, [r7, #112]	; 0x70
 8003f8e:	463b      	mov	r3, r7
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	011a      	lsls	r2, r3, #4
 8003f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f98:	4413      	add	r3, r2
 8003f9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d112      	bne.n	8003fce <USB_EPStartXfer+0x7c2>
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e054      	b.n	8004078 <USB_EPStartXfer+0x86c>
 8003fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fd2:	2b3e      	cmp	r3, #62	; 0x3e
 8003fd4:	d817      	bhi.n	8004006 <USB_EPStartXfer+0x7fa>
 8003fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <USB_EPStartXfer+0x7ea>
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	029b      	lsls	r3, r3, #10
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	801a      	strh	r2, [r3, #0]
 8004004:	e038      	b.n	8004078 <USB_EPStartXfer+0x86c>
 8004006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400a:	095b      	lsrs	r3, r3, #5
 800400c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <USB_EPStartXfer+0x81a>
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	3b01      	subs	r3, #1
 8004022:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	b29b      	uxth	r3, r3
 800402c:	029b      	lsls	r3, r3, #10
 800402e:	b29b      	uxth	r3, r3
 8004030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004038:	b29a      	uxth	r2, r3
 800403a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403c:	801a      	strh	r2, [r3, #0]
 800403e:	e01b      	b.n	8004078 <USB_EPStartXfer+0x86c>
 8004040:	463b      	mov	r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	785b      	ldrb	r3, [r3, #1]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d116      	bne.n	8004078 <USB_EPStartXfer+0x86c>
 800404a:	1d3b      	adds	r3, r7, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004058:	4413      	add	r3, r2
 800405a:	67bb      	str	r3, [r7, #120]	; 0x78
 800405c:	463b      	mov	r3, r7
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	011a      	lsls	r2, r3, #4
 8004064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004066:	4413      	add	r3, r2
 8004068:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800406c:	677b      	str	r3, [r7, #116]	; 0x74
 800406e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004072:	b29a      	uxth	r2, r3
 8004074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004076:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004078:	463b      	mov	r3, r7
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	895b      	ldrh	r3, [r3, #10]
 800407e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8004082:	e097      	b.n	80041b4 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004084:	463b      	mov	r3, r7
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d168      	bne.n	8004160 <USB_EPStartXfer+0x954>
 800408e:	1d3b      	adds	r3, r7, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004096:	1d3b      	adds	r3, r7, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a6:	4413      	add	r3, r2
 80040a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040ac:	463b      	mov	r3, r7
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	011a      	lsls	r2, r3, #4
 80040b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b8:	4413      	add	r3, r2
 80040ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d112      	bne.n	80040ee <USB_EPStartXfer+0x8e2>
 80040c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ea:	801a      	strh	r2, [r3, #0]
 80040ec:	e05d      	b.n	80041aa <USB_EPStartXfer+0x99e>
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	2b3e      	cmp	r3, #62	; 0x3e
 80040f4:	d817      	bhi.n	8004126 <USB_EPStartXfer+0x91a>
 80040f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004100:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <USB_EPStartXfer+0x90a>
 800410c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004110:	3301      	adds	r3, #1
 8004112:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004116:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800411a:	b29b      	uxth	r3, r3
 800411c:	029b      	lsls	r3, r3, #10
 800411e:	b29a      	uxth	r2, r3
 8004120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e041      	b.n	80041aa <USB_EPStartXfer+0x99e>
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <USB_EPStartXfer+0x93a>
 800413c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004140:	3b01      	subs	r3, #1
 8004142:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004146:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800414a:	b29b      	uxth	r3, r3
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	b29b      	uxth	r3, r3
 8004150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004158:	b29a      	uxth	r2, r3
 800415a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800415c:	801a      	strh	r2, [r3, #0]
 800415e:	e024      	b.n	80041aa <USB_EPStartXfer+0x99e>
 8004160:	463b      	mov	r3, r7
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d11f      	bne.n	80041aa <USB_EPStartXfer+0x99e>
 800416a:	1d3b      	adds	r3, r7, #4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004182:	4413      	add	r3, r2
 8004184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004188:	463b      	mov	r3, r7
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	011a      	lsls	r2, r3, #4
 8004190:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004194:	4413      	add	r3, r2
 8004196:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800419a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800419e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041aa:	463b      	mov	r3, r7
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	891b      	ldrh	r3, [r3, #8]
 80041b0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041b4:	463b      	mov	r3, r7
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6959      	ldr	r1, [r3, #20]
 80041ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041be:	b29b      	uxth	r3, r3
 80041c0:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80041c4:	1d38      	adds	r0, r7, #4
 80041c6:	6800      	ldr	r0, [r0, #0]
 80041c8:	f000 fd7e 	bl	8004cc8 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80041cc:	463b      	mov	r3, r7
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d122      	bne.n	800421c <USB_EPStartXfer+0xa10>
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	463b      	mov	r3, r7
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	463b      	mov	r3, r7
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	441a      	add	r2, r3
 8004202:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]
 800421a:	e026      	b.n	800426a <USB_EPStartXfer+0xa5e>
 800421c:	463b      	mov	r3, r7
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d121      	bne.n	800426a <USB_EPStartXfer+0xa5e>
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	463b      	mov	r3, r7
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004240:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	463b      	mov	r3, r7
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800426a:	1d3b      	adds	r3, r7, #4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	463b      	mov	r3, r7
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f107 020e 	add.w	r2, r7, #14
 8004280:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004288:	8013      	strh	r3, [r2, #0]
 800428a:	f107 030e 	add.w	r3, r7, #14
 800428e:	f107 020e 	add.w	r2, r7, #14
 8004292:	8812      	ldrh	r2, [r2, #0]
 8004294:	f082 0210 	eor.w	r2, r2, #16
 8004298:	801a      	strh	r2, [r3, #0]
 800429a:	f107 030e 	add.w	r3, r7, #14
 800429e:	f107 020e 	add.w	r2, r7, #14
 80042a2:	8812      	ldrh	r2, [r2, #0]
 80042a4:	f082 0220 	eor.w	r2, r2, #32
 80042a8:	801a      	strh	r2, [r3, #0]
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	463b      	mov	r3, r7
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	441a      	add	r2, r3
 80042b8:	f107 030e 	add.w	r3, r7, #14
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8013      	strh	r3, [r2, #0]
 80042d2:	e3b5      	b.n	8004a40 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80042d4:	463b      	mov	r3, r7
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	7b1b      	ldrb	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f040 8090 	bne.w	8004400 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80042e0:	463b      	mov	r3, r7
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	463b      	mov	r3, r7
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d90e      	bls.n	800430e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 80042f0:	463b      	mov	r3, r7
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 80042fa:	463b      	mov	r3, r7
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004304:	1ad2      	subs	r2, r2, r3
 8004306:	463b      	mov	r3, r7
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	e008      	b.n	8004320 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800430e:	463b      	mov	r3, r7
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004318:	463b      	mov	r3, r7
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004338:	4413      	add	r3, r2
 800433a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800433e:	463b      	mov	r3, r7
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	011a      	lsls	r2, r3, #4
 8004346:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800434a:	4413      	add	r3, r2
 800434c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004350:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d116      	bne.n	800438a <USB_EPStartXfer+0xb7e>
 800435c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004368:	b29a      	uxth	r2, r3
 800436a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800436e:	801a      	strh	r2, [r3, #0]
 8004370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	b29b      	uxth	r3, r3
 8004378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800437c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004380:	b29a      	uxth	r2, r3
 8004382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004386:	801a      	strh	r2, [r3, #0]
 8004388:	e32c      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
 800438a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800438e:	2b3e      	cmp	r3, #62	; 0x3e
 8004390:	d818      	bhi.n	80043c4 <USB_EPStartXfer+0xbb8>
 8004392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800439c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <USB_EPStartXfer+0xba6>
 80043a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043ac:	3301      	adds	r3, #1
 80043ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	029b      	lsls	r3, r3, #10
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	e30f      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
 80043c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c8:	095b      	lsrs	r3, r3, #5
 80043ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <USB_EPStartXfer+0xbd8>
 80043da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043de:	3b01      	subs	r3, #1
 80043e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80043e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	e2f1      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004400:	463b      	mov	r3, r7
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	78db      	ldrb	r3, [r3, #3]
 8004406:	2b02      	cmp	r3, #2
 8004408:	f040 818f 	bne.w	800472a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800440c:	463b      	mov	r3, r7
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d175      	bne.n	8004502 <USB_EPStartXfer+0xcf6>
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800442e:	4413      	add	r3, r2
 8004430:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004434:	463b      	mov	r3, r7
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	011a      	lsls	r2, r3, #4
 800443c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004440:	4413      	add	r3, r2
 8004442:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004446:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800444a:	463b      	mov	r3, r7
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d116      	bne.n	8004482 <USB_EPStartXfer+0xc76>
 8004454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004460:	b29a      	uxth	r2, r3
 8004462:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004466:	801a      	strh	r2, [r3, #0]
 8004468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800446c:	881b      	ldrh	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004478:	b29a      	uxth	r2, r3
 800447a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800447e:	801a      	strh	r2, [r3, #0]
 8004480:	e065      	b.n	800454e <USB_EPStartXfer+0xd42>
 8004482:	463b      	mov	r3, r7
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	2b3e      	cmp	r3, #62	; 0x3e
 800448a:	d81a      	bhi.n	80044c2 <USB_EPStartXfer+0xcb6>
 800448c:	463b      	mov	r3, r7
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004498:	463b      	mov	r3, r7
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <USB_EPStartXfer+0xca4>
 80044a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044aa:	3301      	adds	r3, #1
 80044ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	029b      	lsls	r3, r3, #10
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	e045      	b.n	800454e <USB_EPStartXfer+0xd42>
 80044c2:	463b      	mov	r3, r7
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d104      	bne.n	80044e6 <USB_EPStartXfer+0xcda>
 80044dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044e0:	3b01      	subs	r3, #1
 80044e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	e025      	b.n	800454e <USB_EPStartXfer+0xd42>
 8004502:	463b      	mov	r3, r7
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d120      	bne.n	800454e <USB_EPStartXfer+0xd42>
 800450c:	1d3b      	adds	r3, r7, #4
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800451c:	b29b      	uxth	r3, r3
 800451e:	461a      	mov	r2, r3
 8004520:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004524:	4413      	add	r3, r2
 8004526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800452a:	463b      	mov	r3, r7
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	011a      	lsls	r2, r3, #4
 8004532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004536:	4413      	add	r3, r2
 8004538:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800453c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	b29a      	uxth	r2, r3
 8004548:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800454c:	801a      	strh	r2, [r3, #0]
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004556:	463b      	mov	r3, r7
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d175      	bne.n	800464c <USB_EPStartXfer+0xe40>
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004568:	1d3b      	adds	r3, r7, #4
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004578:	4413      	add	r3, r2
 800457a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800457e:	463b      	mov	r3, r7
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	011a      	lsls	r2, r3, #4
 8004586:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800458a:	4413      	add	r3, r2
 800458c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004594:	463b      	mov	r3, r7
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d116      	bne.n	80045cc <USB_EPStartXfer+0xdc0>
 800459e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b0:	801a      	strh	r2, [r3, #0]
 80045b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	e061      	b.n	8004690 <USB_EPStartXfer+0xe84>
 80045cc:	463b      	mov	r3, r7
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b3e      	cmp	r3, #62	; 0x3e
 80045d4:	d81a      	bhi.n	800460c <USB_EPStartXfer+0xe00>
 80045d6:	463b      	mov	r3, r7
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045e2:	463b      	mov	r3, r7
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <USB_EPStartXfer+0xdee>
 80045f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f4:	3301      	adds	r3, #1
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fe:	b29b      	uxth	r3, r3
 8004600:	029b      	lsls	r3, r3, #10
 8004602:	b29a      	uxth	r2, r3
 8004604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e041      	b.n	8004690 <USB_EPStartXfer+0xe84>
 800460c:	463b      	mov	r3, r7
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	095b      	lsrs	r3, r3, #5
 8004614:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004618:	463b      	mov	r3, r7
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <USB_EPStartXfer+0xe24>
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	3b01      	subs	r3, #1
 800462c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004634:	b29b      	uxth	r3, r3
 8004636:	029b      	lsls	r3, r3, #10
 8004638:	b29b      	uxth	r3, r3
 800463a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800463e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004642:	b29a      	uxth	r2, r3
 8004644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004648:	801a      	strh	r2, [r3, #0]
 800464a:	e021      	b.n	8004690 <USB_EPStartXfer+0xe84>
 800464c:	463b      	mov	r3, r7
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d11c      	bne.n	8004690 <USB_EPStartXfer+0xe84>
 8004656:	1d3b      	adds	r3, r7, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800465e:	b29b      	uxth	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004666:	4413      	add	r3, r2
 8004668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800466c:	463b      	mov	r3, r7
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	011a      	lsls	r2, r3, #4
 8004674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004678:	4413      	add	r3, r2
 800467a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800467e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004682:	463b      	mov	r3, r7
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	b29a      	uxth	r2, r3
 800468a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800468e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 81a4 	beq.w	80049e4 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800469c:	1d3b      	adds	r3, r7, #4
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046b0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <USB_EPStartXfer+0xebc>
 80046bc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10d      	bne.n	80046e4 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046c8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8187 	bne.w	80049e4 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80046d6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f040 8180 	bne.w	80049e4 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80046e4:	1d3b      	adds	r3, r7, #4
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	463b      	mov	r3, r7
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	463b      	mov	r3, r7
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	441a      	add	r2, r3
 8004710:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800471c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004720:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004724:	b29b      	uxth	r3, r3
 8004726:	8013      	strh	r3, [r2, #0]
 8004728:	e15c      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800472a:	463b      	mov	r3, r7
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	78db      	ldrb	r3, [r3, #3]
 8004730:	2b01      	cmp	r3, #1
 8004732:	f040 8155 	bne.w	80049e0 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004736:	463b      	mov	r3, r7
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699a      	ldr	r2, [r3, #24]
 800473c:	463b      	mov	r3, r7
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d90e      	bls.n	8004764 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004746:	463b      	mov	r3, r7
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004750:	463b      	mov	r3, r7
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	463b      	mov	r3, r7
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	619a      	str	r2, [r3, #24]
 8004762:	e008      	b.n	8004776 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004764:	463b      	mov	r3, r7
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 800476e:	463b      	mov	r3, r7
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004776:	463b      	mov	r3, r7
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d16f      	bne.n	8004860 <USB_EPStartXfer+0x1054>
 8004780:	1d3b      	adds	r3, r7, #4
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004788:	1d3b      	adds	r3, r7, #4
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004790:	b29b      	uxth	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004798:	4413      	add	r3, r2
 800479a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800479e:	463b      	mov	r3, r7
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	011a      	lsls	r2, r3, #4
 80047a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047aa:	4413      	add	r3, r2
 80047ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <USB_EPStartXfer+0xfde>
 80047bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ce:	801a      	strh	r2, [r3, #0]
 80047d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047e6:	801a      	strh	r2, [r3, #0]
 80047e8:	e05f      	b.n	80048aa <USB_EPStartXfer+0x109e>
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ee:	2b3e      	cmp	r3, #62	; 0x3e
 80047f0:	d818      	bhi.n	8004824 <USB_EPStartXfer+0x1018>
 80047f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <USB_EPStartXfer+0x1006>
 8004808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800480c:	3301      	adds	r3, #1
 800480e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004816:	b29b      	uxth	r3, r3
 8004818:	029b      	lsls	r3, r3, #10
 800481a:	b29a      	uxth	r2, r3
 800481c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e042      	b.n	80048aa <USB_EPStartXfer+0x109e>
 8004824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004828:	095b      	lsrs	r3, r3, #5
 800482a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800482e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <USB_EPStartXfer+0x1038>
 800483a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483e:	3b01      	subs	r3, #1
 8004840:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004848:	b29b      	uxth	r3, r3
 800484a:	029b      	lsls	r3, r3, #10
 800484c:	b29b      	uxth	r3, r3
 800484e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004856:	b29a      	uxth	r2, r3
 8004858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800485c:	801a      	strh	r2, [r3, #0]
 800485e:	e024      	b.n	80048aa <USB_EPStartXfer+0x109e>
 8004860:	463b      	mov	r3, r7
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d11f      	bne.n	80048aa <USB_EPStartXfer+0x109e>
 800486a:	1d3b      	adds	r3, r7, #4
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004882:	4413      	add	r3, r2
 8004884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004888:	463b      	mov	r3, r7
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	011a      	lsls	r2, r3, #4
 8004890:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004894:	4413      	add	r3, r2
 8004896:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800489a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	1d3b      	adds	r3, r7, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048b2:	463b      	mov	r3, r7
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d16f      	bne.n	800499c <USB_EPStartXfer+0x1190>
 80048bc:	1d3b      	adds	r3, r7, #4
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	461a      	mov	r2, r3
 80048d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048d4:	4413      	add	r3, r2
 80048d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048da:	463b      	mov	r3, r7
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	011a      	lsls	r2, r3, #4
 80048e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048e6:	4413      	add	r3, r2
 80048e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d116      	bne.n	8004926 <USB_EPStartXfer+0x111a>
 80048f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	b29b      	uxth	r3, r3
 8004900:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004904:	b29a      	uxth	r2, r3
 8004906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004910:	881b      	ldrh	r3, [r3, #0]
 8004912:	b29b      	uxth	r3, r3
 8004914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800491c:	b29a      	uxth	r2, r3
 800491e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004922:	801a      	strh	r2, [r3, #0]
 8004924:	e05e      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
 8004926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800492a:	2b3e      	cmp	r3, #62	; 0x3e
 800492c:	d818      	bhi.n	8004960 <USB_EPStartXfer+0x1154>
 800492e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004932:	085b      	lsrs	r3, r3, #1
 8004934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <USB_EPStartXfer+0x1142>
 8004944:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004948:	3301      	adds	r3, #1
 800494a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800494e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004952:	b29b      	uxth	r3, r3
 8004954:	029b      	lsls	r3, r3, #10
 8004956:	b29a      	uxth	r2, r3
 8004958:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800495c:	801a      	strh	r2, [r3, #0]
 800495e:	e041      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
 8004960:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800496a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <USB_EPStartXfer+0x1174>
 8004976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497a:	3b01      	subs	r3, #1
 800497c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004984:	b29b      	uxth	r3, r3
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	b29b      	uxth	r3, r3
 800498a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800498e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004992:	b29a      	uxth	r2, r3
 8004994:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004998:	801a      	strh	r2, [r3, #0]
 800499a:	e023      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
 800499c:	463b      	mov	r3, r7
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d11e      	bne.n	80049e4 <USB_EPStartXfer+0x11d8>
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b6:	4413      	add	r3, r2
 80049b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049bc:	463b      	mov	r3, r7
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	011a      	lsls	r2, r3, #4
 80049c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c8:	4413      	add	r3, r2
 80049ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e001      	b.n	80049e4 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e02e      	b.n	8004a42 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049e4:	1d3b      	adds	r3, r7, #4
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	463b      	mov	r3, r7
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a02:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a0a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a16:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004a1a:	1d3b      	adds	r3, r7, #4
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	463b      	mov	r3, r7
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d020      	beq.n	8004aa0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a74:	81bb      	strh	r3, [r7, #12]
 8004a76:	89bb      	ldrh	r3, [r7, #12]
 8004a78:	f083 0310 	eor.w	r3, r3, #16
 8004a7c:	81bb      	strh	r3, [r7, #12]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	89bb      	ldrh	r3, [r7, #12]
 8004a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	8013      	strh	r3, [r2, #0]
 8004a9e:	e01f      	b.n	8004ae0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	881b      	ldrh	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab6:	81fb      	strh	r3, [r7, #14]
 8004ab8:	89fb      	ldrh	r3, [r7, #14]
 8004aba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004abe:	81fb      	strh	r3, [r7, #14]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	441a      	add	r2, r3
 8004aca:	89fb      	ldrh	r3, [r7, #14]
 8004acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	7b1b      	ldrb	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 809d 	bne.w	8004c3a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	785b      	ldrb	r3, [r3, #1]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d04c      	beq.n	8004ba2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	823b      	strh	r3, [r7, #16]
 8004b16:	8a3b      	ldrh	r3, [r7, #16]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <USB_EPClearStall+0x6c>
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b36:	81fb      	strh	r3, [r7, #14]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	441a      	add	r2, r3
 8004b42:	89fb      	ldrh	r3, [r7, #14]
 8004b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	78db      	ldrb	r3, [r3, #3]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d06c      	beq.n	8004c3a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b76:	81bb      	strh	r3, [r7, #12]
 8004b78:	89bb      	ldrh	r3, [r7, #12]
 8004b7a:	f083 0320 	eor.w	r3, r3, #32
 8004b7e:	81bb      	strh	r3, [r7, #12]
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	89bb      	ldrh	r3, [r7, #12]
 8004b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]
 8004ba0:	e04b      	b.n	8004c3a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	82fb      	strh	r3, [r7, #22]
 8004bb0:	8afb      	ldrh	r3, [r7, #22]
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01b      	beq.n	8004bf2 <USB_EPClearStall+0x106>
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	881b      	ldrh	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd0:	82bb      	strh	r3, [r7, #20]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	441a      	add	r2, r3
 8004bdc:	8abb      	ldrh	r3, [r7, #20]
 8004bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	827b      	strh	r3, [r7, #18]
 8004c0a:	8a7b      	ldrh	r3, [r7, #18]
 8004c0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c10:	827b      	strh	r3, [r7, #18]
 8004c12:	8a7b      	ldrh	r3, [r7, #18]
 8004c14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c18:	827b      	strh	r3, [r7, #18]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	441a      	add	r2, r3
 8004c24:	8a7b      	ldrh	r3, [r7, #18]
 8004c26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2280      	movs	r2, #128	; 0x80
 8004c5c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bc80      	pop	{r7}
 8004c7e:	4770      	bx	lr

08004c80 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bc80      	pop	{r7}
 8004cb0:	4770      	bx	lr

08004cb2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bc80      	pop	{r7}
 8004cc6:	4770      	bx	lr

08004cc8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b08d      	sub	sp, #52	; 0x34
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	80fb      	strh	r3, [r7, #6]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004cde:	88bb      	ldrh	r3, [r7, #4]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	005a      	lsls	r2, r3, #1
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	e01e      	b.n	8004d40 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	3302      	adds	r3, #2
 8004d32:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	3301      	adds	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1dd      	bne.n	8004d02 <USB_WritePMA+0x3a>
  }
}
 8004d46:	bf00      	nop
 8004d48:	3734      	adds	r7, #52	; 0x34
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b08b      	sub	sp, #44	; 0x2c
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	460b      	mov	r3, r1
 8004d60:	80fb      	strh	r3, [r7, #6]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004d66:	88bb      	ldrh	r3, [r7, #4]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	005a      	lsls	r2, r3, #1
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d82:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	627b      	str	r3, [r7, #36]	; 0x24
 8004d88:	e01b      	b.n	8004dc2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	881b      	ldrh	r3, [r3, #0]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	3302      	adds	r3, #2
 8004d96:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	3301      	adds	r3, #1
 8004da4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	3301      	adds	r3, #1
 8004db4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	3302      	adds	r3, #2
 8004dba:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e0      	bne.n	8004d8a <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004dc8:	88bb      	ldrh	r3, [r7, #4]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d007      	beq.n	8004de4 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	701a      	strb	r2, [r3, #0]
  }
}
 8004de4:	bf00      	nop
 8004de6:	372c      	adds	r7, #44	; 0x2c
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	460b      	mov	r3, r1
 8004df8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	7c1b      	ldrb	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d115      	bne.n	8004e32 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	2181      	movs	r1, #129	; 0x81
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f004 fbbd 	bl	800958e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e1e:	2202      	movs	r2, #2
 8004e20:	2101      	movs	r1, #1
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f004 fbb3 	bl	800958e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004e30:	e012      	b.n	8004e58 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004e32:	2340      	movs	r3, #64	; 0x40
 8004e34:	2202      	movs	r2, #2
 8004e36:	2181      	movs	r1, #129	; 0x81
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f004 fba8 	bl	800958e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	2202      	movs	r2, #2
 8004e48:	2101      	movs	r1, #1
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f004 fb9f 	bl	800958e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e58:	2308      	movs	r3, #8
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	2182      	movs	r1, #130	; 0x82
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f004 fb95 	bl	800958e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e6a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e6e:	f004 fcb5 	bl	80097dc <USBD_static_malloc>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	e026      	b.n	8004ed8 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	7c1b      	ldrb	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f004 fc55 	bl	8009770 <USBD_LL_PrepareReceive>
 8004ec6:	e007      	b.n	8004ed8 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ece:	2340      	movs	r3, #64	; 0x40
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f004 fc4c 	bl	8009770 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004ef2:	2181      	movs	r1, #129	; 0x81
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f004 fb70 	bl	80095da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004f00:	2101      	movs	r1, #1
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f004 fb69 	bl	80095da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004f10:	2182      	movs	r1, #130	; 0x82
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f004 fb61 	bl	80095da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f004 fc5b 	bl	80097f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d039      	beq.n	8004fee <USBD_CDC_Setup+0x9e>
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d17c      	bne.n	8005078 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	88db      	ldrh	r3, [r3, #6]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d029      	beq.n	8004fda <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da11      	bge.n	8004fb4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004f9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	88d2      	ldrh	r2, [r2, #6]
 8004fa2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fa4:	6939      	ldr	r1, [r7, #16]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	88db      	ldrh	r3, [r3, #6]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 f9f9 	bl	80063a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004fb2:	e068      	b.n	8005086 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	785a      	ldrb	r2, [r3, #1]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	88db      	ldrh	r3, [r3, #6]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004fca:	6939      	ldr	r1, [r7, #16]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	88db      	ldrh	r3, [r3, #6]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f001 fa14 	bl	8006400 <USBD_CtlPrepareRx>
      break;
 8004fd8:	e055      	b.n	8005086 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	7850      	ldrb	r0, [r2, #1]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	4798      	blx	r3
      break;
 8004fec:	e04b      	b.n	8005086 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b0a      	cmp	r3, #10
 8004ff4:	d017      	beq.n	8005026 <USBD_CDC_Setup+0xd6>
 8004ff6:	2b0b      	cmp	r3, #11
 8004ff8:	d029      	beq.n	800504e <USBD_CDC_Setup+0xfe>
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d133      	bne.n	8005066 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005004:	2b03      	cmp	r3, #3
 8005006:	d107      	bne.n	8005018 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005008:	f107 030c 	add.w	r3, r7, #12
 800500c:	2202      	movs	r2, #2
 800500e:	4619      	mov	r1, r3
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f001 f9c7 	bl	80063a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005016:	e02e      	b.n	8005076 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f001 f958 	bl	80062d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005020:	2302      	movs	r3, #2
 8005022:	75fb      	strb	r3, [r7, #23]
          break;
 8005024:	e027      	b.n	8005076 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800502c:	2b03      	cmp	r3, #3
 800502e:	d107      	bne.n	8005040 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005030:	f107 030f 	add.w	r3, r7, #15
 8005034:	2201      	movs	r2, #1
 8005036:	4619      	mov	r1, r3
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f001 f9b3 	bl	80063a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800503e:	e01a      	b.n	8005076 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005040:	6839      	ldr	r1, [r7, #0]
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 f944 	bl	80062d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005048:	2302      	movs	r3, #2
 800504a:	75fb      	strb	r3, [r7, #23]
          break;
 800504c:	e013      	b.n	8005076 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005054:	2b03      	cmp	r3, #3
 8005056:	d00d      	beq.n	8005074 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005058:	6839      	ldr	r1, [r7, #0]
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f001 f938 	bl	80062d0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005060:	2302      	movs	r3, #2
 8005062:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005064:	e006      	b.n	8005074 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005066:	6839      	ldr	r1, [r7, #0]
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f001 f931 	bl	80062d0 <USBD_CtlError>
          ret = USBD_FAIL;
 800506e:	2302      	movs	r3, #2
 8005070:	75fb      	strb	r3, [r7, #23]
          break;
 8005072:	e000      	b.n	8005076 <USBD_CDC_Setup+0x126>
          break;
 8005074:	bf00      	nop
      }
      break;
 8005076:	e006      	b.n	8005086 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005078:	6839      	ldr	r1, [r7, #0]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f001 f928 	bl	80062d0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005080:	2302      	movs	r3, #2
 8005082:	75fb      	strb	r3, [r7, #23]
      break;
 8005084:	bf00      	nop
  }

  return ret;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050a2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050aa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d03a      	beq.n	800512c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	331c      	adds	r3, #28
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d029      	beq.n	8005120 <USBD_CDC_DataIn+0x90>
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	331c      	adds	r3, #28
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	78f9      	ldrb	r1, [r7, #3]
 80050e0:	68b8      	ldr	r0, [r7, #8]
 80050e2:	460b      	mov	r3, r1
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4403      	add	r3, r0
 80050ec:	3338      	adds	r3, #56	; 0x38
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80050f4:	fb03 f301 	mul.w	r3, r3, r1
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80050fe:	78fa      	ldrb	r2, [r7, #3]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	331c      	adds	r3, #28
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005112:	78f9      	ldrb	r1, [r7, #3]
 8005114:	2300      	movs	r3, #0
 8005116:	2200      	movs	r2, #0
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f004 fb06 	bl	800972a <USBD_LL_Transmit>
 800511e:	e003      	b.n	8005128 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	460b      	mov	r3, r1
 8005140:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005148:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f004 fb31 	bl	80097b6 <USBD_LL_GetRxDataSize>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800517a:	4611      	mov	r1, r2
 800517c:	4798      	blx	r3

    return USBD_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d015      	beq.n	80051d2 <USBD_CDC_EP0_RxReady+0x46>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051ac:	2bff      	cmp	r3, #255	; 0xff
 80051ae:	d010      	beq.n	80051d2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80051be:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051c6:	b292      	uxth	r2, r2
 80051c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	22ff      	movs	r2, #255	; 0xff
 80051ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2243      	movs	r2, #67	; 0x43
 80051e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80051ea:	4b03      	ldr	r3, [pc, #12]	; (80051f8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000094 	.word	0x20000094

080051fc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2243      	movs	r2, #67	; 0x43
 8005208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800520a:	4b03      	ldr	r3, [pc, #12]	; (8005218 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000050 	.word	0x20000050

0800521c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2243      	movs	r2, #67	; 0x43
 8005228:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800522a:	4b03      	ldr	r3, [pc, #12]	; (8005238 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	200000d8 	.word	0x200000d8

0800523c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	220a      	movs	r2, #10
 8005248:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800524a:	4b03      	ldr	r3, [pc, #12]	; (8005258 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	2000000c 	.word	0x2000000c

0800525c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005266:	2302      	movs	r3, #2
 8005268:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800529c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr

080052ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d01c      	beq.n	8005334 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005300:	2b00      	cmp	r3, #0
 8005302:	d115      	bne.n	8005330 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005322:	b29b      	uxth	r3, r3
 8005324:	2181      	movs	r1, #129	; 0x81
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f004 f9ff 	bl	800972a <USBD_LL_Transmit>

      return USBD_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e002      	b.n	8005336 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005330:	2301      	movs	r3, #1
 8005332:	e000      	b.n	8005336 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800534c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d017      	beq.n	8005388 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7c1b      	ldrb	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d109      	bne.n	8005374 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800536a:	2101      	movs	r1, #1
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f004 f9ff 	bl	8009770 <USBD_LL_PrepareReceive>
 8005372:	e007      	b.n	8005384 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800537a:	2340      	movs	r3, #64	; 0x40
 800537c:	2101      	movs	r1, #1
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f004 f9f6 	bl	8009770 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	e000      	b.n	800538a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005388:	2302      	movs	r3, #2
  }
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80053a6:	2302      	movs	r3, #2
 80053a8:	e01a      	b.n	80053e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	79fa      	ldrb	r2, [r7, #7]
 80053d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f004 f863 	bl	80094a4 <USBD_LL_Init>

  return USBD_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d006      	beq.n	800540a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	683a      	ldr	r2, [r7, #0]
 8005400:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e001      	b.n	800540e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800540a:	2302      	movs	r3, #2
 800540c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f004 f898 	bl	8009558 <USBD_LL_Start>

  return USBD_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005452:	2302      	movs	r3, #2
 8005454:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	4611      	mov	r1, r2
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800547a:	7bfb      	ldrb	r3, [r7, #15]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	460b      	mov	r3, r1
 800548e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	4611      	mov	r1, r2
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	4798      	blx	r3

  return USBD_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b082      	sub	sp, #8
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fecb 	bl	8006258 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054d0:	461a      	mov	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d00c      	beq.n	8005500 <USBD_LL_SetupStage+0x56>
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d302      	bcc.n	80054f0 <USBD_LL_SetupStage+0x46>
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d010      	beq.n	8005510 <USBD_LL_SetupStage+0x66>
 80054ee:	e017      	b.n	8005520 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f9cb 	bl	8005894 <USBD_StdDevReq>
      break;
 80054fe:	e01a      	b.n	8005536 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa2d 	bl	8005968 <USBD_StdItfReq>
      break;
 800550e:	e012      	b.n	8005536 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fa6b 	bl	80059f4 <USBD_StdEPReq>
      break;
 800551e:	e00a      	b.n	8005536 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800552a:	b2db      	uxtb	r3, r3
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f004 f872 	bl	8009618 <USBD_LL_StallEP>
      break;
 8005534:	bf00      	nop
  }

  return USBD_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3708      	adds	r7, #8
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	460b      	mov	r3, r1
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800554e:	7afb      	ldrb	r3, [r7, #11]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d14b      	bne.n	80055ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800555a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005562:	2b03      	cmp	r3, #3
 8005564:	d134      	bne.n	80055d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	429a      	cmp	r2, r3
 8005570:	d919      	bls.n	80055a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	1ad2      	subs	r2, r2, r3
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005588:	429a      	cmp	r2, r3
 800558a:	d203      	bcs.n	8005594 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005590:	b29b      	uxth	r3, r3
 8005592:	e002      	b.n	800559a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 ff4c 	bl	800643c <USBD_CtlContinueRx>
 80055a4:	e038      	b.n	8005618 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d105      	bne.n	80055c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 ff49 	bl	8006460 <USBD_CtlSendStatus>
 80055ce:	e023      	b.n	8005618 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d11e      	bne.n	8005618 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80055e2:	2100      	movs	r1, #0
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f004 f817 	bl	8009618 <USBD_LL_StallEP>
 80055ea:	e015      	b.n	8005618 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00d      	beq.n	8005614 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d108      	bne.n	8005614 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	7afa      	ldrb	r2, [r7, #11]
 800560c:	4611      	mov	r1, r2
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	4798      	blx	r3
 8005612:	e001      	b.n	8005618 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005614:	2302      	movs	r3, #2
 8005616:	e000      	b.n	800561a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	460b      	mov	r3, r1
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005630:	7afb      	ldrb	r3, [r7, #11]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d17f      	bne.n	8005736 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3314      	adds	r3, #20
 800563a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005642:	2b02      	cmp	r3, #2
 8005644:	d15c      	bne.n	8005700 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	68da      	ldr	r2, [r3, #12]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	429a      	cmp	r2, r3
 8005650:	d915      	bls.n	800567e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	1ad2      	subs	r2, r2, r3
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	b29b      	uxth	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 feb6 	bl	80063dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005670:	2300      	movs	r3, #0
 8005672:	2200      	movs	r2, #0
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f004 f87a 	bl	8009770 <USBD_LL_PrepareReceive>
 800567c:	e04e      	b.n	800571c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	6912      	ldr	r2, [r2, #16]
 8005686:	fbb3 f1f2 	udiv	r1, r3, r2
 800568a:	fb02 f201 	mul.w	r2, r2, r1
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11c      	bne.n	80056ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800569c:	429a      	cmp	r2, r3
 800569e:	d316      	bcc.n	80056ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d20f      	bcs.n	80056ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2100      	movs	r1, #0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fe92 	bl	80063dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056c0:	2300      	movs	r3, #0
 80056c2:	2200      	movs	r2, #0
 80056c4:	2100      	movs	r1, #0
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f004 f852 	bl	8009770 <USBD_LL_PrepareReceive>
 80056cc:	e026      	b.n	800571c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d105      	bne.n	80056f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80056f0:	2180      	movs	r1, #128	; 0x80
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f003 ff90 	bl	8009618 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fec4 	bl	8006486 <USBD_CtlReceiveStatus>
 80056fe:	e00d      	b.n	800571c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005706:	2b04      	cmp	r3, #4
 8005708:	d004      	beq.n	8005714 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005714:	2180      	movs	r1, #128	; 0x80
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f003 ff7e 	bl	8009618 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d11d      	bne.n	8005762 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fe83 	bl	8005432 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005734:	e015      	b.n	8005762 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005748:	2b03      	cmp	r3, #3
 800574a:	d108      	bne.n	800575e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	7afa      	ldrb	r2, [r7, #11]
 8005756:	4611      	mov	r1, r2
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	4798      	blx	r3
 800575c:	e001      	b.n	8005762 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800575e:	2302      	movs	r3, #2
 8005760:	e000      	b.n	8005764 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005774:	2340      	movs	r3, #64	; 0x40
 8005776:	2200      	movs	r2, #0
 8005778:	2100      	movs	r1, #0
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f003 ff07 	bl	800958e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2240      	movs	r2, #64	; 0x40
 800578c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005790:	2340      	movs	r3, #64	; 0x40
 8005792:	2200      	movs	r2, #0
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f003 fef9 	bl	800958e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2240      	movs	r2, #64	; 0x40
 80057a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d009      	beq.n	80057e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6852      	ldr	r2, [r2, #4]
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	4611      	mov	r1, r2
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	4798      	blx	r3
  }

  return USBD_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	78fa      	ldrb	r2, [r7, #3]
 80057fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2204      	movs	r2, #4
 8005824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	bc80      	pop	{r7}
 8005832:	4770      	bx	lr

08005834 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005842:	2b04      	cmp	r3, #4
 8005844:	d105      	bne.n	8005852 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586c:	2b03      	cmp	r3, #3
 800586e:	d10b      	bne.n	8005888 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d005      	beq.n	8005888 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d004      	beq.n	80058b8 <USBD_StdDevReq+0x24>
 80058ae:	2b40      	cmp	r3, #64	; 0x40
 80058b0:	d002      	beq.n	80058b8 <USBD_StdDevReq+0x24>
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <USBD_StdDevReq+0x34>
 80058b6:	e04c      	b.n	8005952 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      break;
 80058c6:	e049      	b.n	800595c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	785b      	ldrb	r3, [r3, #1]
 80058cc:	2b09      	cmp	r3, #9
 80058ce:	d83a      	bhi.n	8005946 <USBD_StdDevReq+0xb2>
 80058d0:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <USBD_StdDevReq+0x44>)
 80058d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d6:	bf00      	nop
 80058d8:	08005929 	.word	0x08005929
 80058dc:	0800593d 	.word	0x0800593d
 80058e0:	08005947 	.word	0x08005947
 80058e4:	08005933 	.word	0x08005933
 80058e8:	08005947 	.word	0x08005947
 80058ec:	0800590b 	.word	0x0800590b
 80058f0:	08005901 	.word	0x08005901
 80058f4:	08005947 	.word	0x08005947
 80058f8:	0800591f 	.word	0x0800591f
 80058fc:	08005915 	.word	0x08005915
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005900:	6839      	ldr	r1, [r7, #0]
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9d4 	bl	8005cb0 <USBD_GetDescriptor>
          break;
 8005908:	e022      	b.n	8005950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fb37 	bl	8005f80 <USBD_SetAddress>
          break;
 8005912:	e01d      	b.n	8005950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb74 	bl	8006004 <USBD_SetConfig>
          break;
 800591c:	e018      	b.n	8005950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fbfd 	bl	8006120 <USBD_GetConfig>
          break;
 8005926:	e013      	b.n	8005950 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fc2c 	bl	8006188 <USBD_GetStatus>
          break;
 8005930:	e00e      	b.n	8005950 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005932:	6839      	ldr	r1, [r7, #0]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 fc5a 	bl	80061ee <USBD_SetFeature>
          break;
 800593a:	e009      	b.n	8005950 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fc69 	bl	8006216 <USBD_ClrFeature>
          break;
 8005944:	e004      	b.n	8005950 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 fcc1 	bl	80062d0 <USBD_CtlError>
          break;
 800594e:	bf00      	nop
      }
      break;
 8005950:	e004      	b.n	800595c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fcbb 	bl	80062d0 <USBD_CtlError>
      break;
 800595a:	bf00      	nop
  }

  return ret;
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop

08005968 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005972:	2300      	movs	r3, #0
 8005974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800597e:	2b20      	cmp	r3, #32
 8005980:	d003      	beq.n	800598a <USBD_StdItfReq+0x22>
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d001      	beq.n	800598a <USBD_StdItfReq+0x22>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d12a      	bne.n	80059e0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005990:	3b01      	subs	r3, #1
 8005992:	2b02      	cmp	r3, #2
 8005994:	d81d      	bhi.n	80059d2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	889b      	ldrh	r3, [r3, #4]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d813      	bhi.n	80059c8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	4798      	blx	r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	88db      	ldrh	r3, [r3, #6]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d110      	bne.n	80059dc <USBD_StdItfReq+0x74>
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10d      	bne.n	80059dc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fd4d 	bl	8006460 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059c6:	e009      	b.n	80059dc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc80 	bl	80062d0 <USBD_CtlError>
          break;
 80059d0:	e004      	b.n	80059dc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 fc7b 	bl	80062d0 <USBD_CtlError>
          break;
 80059da:	e000      	b.n	80059de <USBD_StdItfReq+0x76>
          break;
 80059dc:	bf00      	nop
      }
      break;
 80059de:	e004      	b.n	80059ea <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fc74 	bl	80062d0 <USBD_CtlError>
      break;
 80059e8:	bf00      	nop
  }

  return USBD_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	889b      	ldrh	r3, [r3, #4]
 8005a06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	d004      	beq.n	8005a1e <USBD_StdEPReq+0x2a>
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	d002      	beq.n	8005a1e <USBD_StdEPReq+0x2a>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <USBD_StdEPReq+0x3a>
 8005a1c:	e13d      	b.n	8005c9a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
      break;
 8005a2c:	e13a      	b.n	8005ca4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d10a      	bne.n	8005a50 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	e12a      	b.n	8005ca6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d03e      	beq.n	8005ad6 <USBD_StdEPReq+0xe2>
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d002      	beq.n	8005a62 <USBD_StdEPReq+0x6e>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d070      	beq.n	8005b42 <USBD_StdEPReq+0x14e>
 8005a60:	e115      	b.n	8005c8e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d002      	beq.n	8005a72 <USBD_StdEPReq+0x7e>
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d015      	beq.n	8005a9c <USBD_StdEPReq+0xa8>
 8005a70:	e02b      	b.n	8005aca <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <USBD_StdEPReq+0x9e>
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d009      	beq.n	8005a92 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f003 fdc8 	bl	8009618 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a88:	2180      	movs	r1, #128	; 0x80
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f003 fdc4 	bl	8009618 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a90:	e020      	b.n	8005ad4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fc1b 	bl	80062d0 <USBD_CtlError>
              break;
 8005a9a:	e01b      	b.n	8005ad4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	885b      	ldrh	r3, [r3, #2]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10e      	bne.n	8005ac2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00b      	beq.n	8005ac2 <USBD_StdEPReq+0xce>
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	2b80      	cmp	r3, #128	; 0x80
 8005aae:	d008      	beq.n	8005ac2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	88db      	ldrh	r3, [r3, #6]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	4619      	mov	r1, r3
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f003 fdab 	bl	8009618 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fccc 	bl	8006460 <USBD_CtlSendStatus>

              break;
 8005ac8:	e004      	b.n	8005ad4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fbff 	bl	80062d0 <USBD_CtlError>
              break;
 8005ad2:	bf00      	nop
          }
          break;
 8005ad4:	e0e0      	b.n	8005c98 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d002      	beq.n	8005ae6 <USBD_StdEPReq+0xf2>
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d015      	beq.n	8005b10 <USBD_StdEPReq+0x11c>
 8005ae4:	e026      	b.n	8005b34 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00c      	beq.n	8005b06 <USBD_StdEPReq+0x112>
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b80      	cmp	r3, #128	; 0x80
 8005af0:	d009      	beq.n	8005b06 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f003 fd8e 	bl	8009618 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005afc:	2180      	movs	r1, #128	; 0x80
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f003 fd8a 	bl	8009618 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b04:	e01c      	b.n	8005b40 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fbe1 	bl	80062d0 <USBD_CtlError>
              break;
 8005b0e:	e017      	b.n	8005b40 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	885b      	ldrh	r3, [r3, #2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d112      	bne.n	8005b3e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f003 fd95 	bl	8009656 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fc97 	bl	8006460 <USBD_CtlSendStatus>
              }
              break;
 8005b32:	e004      	b.n	8005b3e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fbca 	bl	80062d0 <USBD_CtlError>
              break;
 8005b3c:	e000      	b.n	8005b40 <USBD_StdEPReq+0x14c>
              break;
 8005b3e:	bf00      	nop
          }
          break;
 8005b40:	e0aa      	b.n	8005c98 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d002      	beq.n	8005b52 <USBD_StdEPReq+0x15e>
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d032      	beq.n	8005bb6 <USBD_StdEPReq+0x1c2>
 8005b50:	e097      	b.n	8005c82 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b52:	7bbb      	ldrb	r3, [r7, #14]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <USBD_StdEPReq+0x174>
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d004      	beq.n	8005b68 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fbb5 	bl	80062d0 <USBD_CtlError>
                break;
 8005b66:	e091      	b.n	8005c8c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	da0b      	bge.n	8005b88 <USBD_StdEPReq+0x194>
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3310      	adds	r3, #16
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4413      	add	r3, r2
 8005b84:	3304      	adds	r3, #4
 8005b86:	e00b      	b.n	8005ba0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2202      	movs	r2, #2
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fbf8 	bl	80063a4 <USBD_CtlSendData>
              break;
 8005bb4:	e06a      	b.n	8005c8c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	da11      	bge.n	8005be2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	f003 020f 	and.w	r2, r3, #15
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3318      	adds	r3, #24
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d117      	bne.n	8005c08 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fb78 	bl	80062d0 <USBD_CtlError>
                  break;
 8005be0:	e054      	b.n	8005c8c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005be2:	7bbb      	ldrb	r3, [r7, #14]
 8005be4:	f003 020f 	and.w	r2, r3, #15
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fb65 	bl	80062d0 <USBD_CtlError>
                  break;
 8005c06:	e041      	b.n	8005c8c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da0b      	bge.n	8005c28 <USBD_StdEPReq+0x234>
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	3310      	adds	r3, #16
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	e00b      	b.n	8005c40 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3304      	adds	r3, #4
 8005c40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d002      	beq.n	8005c4e <USBD_StdEPReq+0x25a>
 8005c48:	7bbb      	ldrb	r3, [r7, #14]
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d103      	bne.n	8005c56 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	e00e      	b.n	8005c74 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005c56:	7bbb      	ldrb	r3, [r7, #14]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f003 fd1a 	bl	8009694 <USBD_LL_IsStallEP>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e002      	b.n	8005c74 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2202      	movs	r2, #2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fb92 	bl	80063a4 <USBD_CtlSendData>
              break;
 8005c80:	e004      	b.n	8005c8c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fb23 	bl	80062d0 <USBD_CtlError>
              break;
 8005c8a:	bf00      	nop
          }
          break;
 8005c8c:	e004      	b.n	8005c98 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fb1d 	bl	80062d0 <USBD_CtlError>
          break;
 8005c96:	bf00      	nop
      }
      break;
 8005c98:	e004      	b.n	8005ca4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005c9a:	6839      	ldr	r1, [r7, #0]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb17 	bl	80062d0 <USBD_CtlError>
      break;
 8005ca2:	bf00      	nop
  }

  return ret;
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3710      	adds	r7, #16
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
	...

08005cb0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	885b      	ldrh	r3, [r3, #2]
 8005cca:	0a1b      	lsrs	r3, r3, #8
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	2b06      	cmp	r3, #6
 8005cd2:	f200 8128 	bhi.w	8005f26 <USBD_GetDescriptor+0x276>
 8005cd6:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <USBD_GetDescriptor+0x2c>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d11 	.word	0x08005d11
 8005ce4:	08005d51 	.word	0x08005d51
 8005ce8:	08005f27 	.word	0x08005f27
 8005cec:	08005f27 	.word	0x08005f27
 8005cf0:	08005ec7 	.word	0x08005ec7
 8005cf4:	08005ef3 	.word	0x08005ef3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	7c12      	ldrb	r2, [r2, #16]
 8005d04:	f107 0108 	add.w	r1, r7, #8
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	60f8      	str	r0, [r7, #12]
      break;
 8005d0e:	e112      	b.n	8005f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	7c1b      	ldrb	r3, [r3, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10d      	bne.n	8005d34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f107 0208 	add.w	r2, r7, #8
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	2202      	movs	r2, #2
 8005d30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d32:	e100      	b.n	8005f36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	f107 0208 	add.w	r2, r7, #8
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
 8005d44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	701a      	strb	r2, [r3, #0]
      break;
 8005d4e:	e0f2      	b.n	8005f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	885b      	ldrh	r3, [r3, #2]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b05      	cmp	r3, #5
 8005d58:	f200 80ac 	bhi.w	8005eb4 <USBD_GetDescriptor+0x204>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <USBD_GetDescriptor+0xb4>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d7d 	.word	0x08005d7d
 8005d68:	08005db1 	.word	0x08005db1
 8005d6c:	08005de5 	.word	0x08005de5
 8005d70:	08005e19 	.word	0x08005e19
 8005d74:	08005e4d 	.word	0x08005e4d
 8005d78:	08005e81 	.word	0x08005e81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00b      	beq.n	8005da0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	7c12      	ldrb	r2, [r2, #16]
 8005d94:	f107 0108 	add.w	r1, r7, #8
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4798      	blx	r3
 8005d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d9e:	e091      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fa94 	bl	80062d0 <USBD_CtlError>
            err++;
 8005da8:	7afb      	ldrb	r3, [r7, #11]
 8005daa:	3301      	adds	r3, #1
 8005dac:	72fb      	strb	r3, [r7, #11]
          break;
 8005dae:	e089      	b.n	8005ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	7c12      	ldrb	r2, [r2, #16]
 8005dc8:	f107 0108 	add.w	r1, r7, #8
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4798      	blx	r3
 8005dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dd2:	e077      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd4:	6839      	ldr	r1, [r7, #0]
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa7a 	bl	80062d0 <USBD_CtlError>
            err++;
 8005ddc:	7afb      	ldrb	r3, [r7, #11]
 8005dde:	3301      	adds	r3, #1
 8005de0:	72fb      	strb	r3, [r7, #11]
          break;
 8005de2:	e06f      	b.n	8005ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00b      	beq.n	8005e08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	7c12      	ldrb	r2, [r2, #16]
 8005dfc:	f107 0108 	add.w	r1, r7, #8
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
 8005e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e06:	e05d      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa60 	bl	80062d0 <USBD_CtlError>
            err++;
 8005e10:	7afb      	ldrb	r3, [r7, #11]
 8005e12:	3301      	adds	r3, #1
 8005e14:	72fb      	strb	r3, [r7, #11]
          break;
 8005e16:	e055      	b.n	8005ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00b      	beq.n	8005e3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	7c12      	ldrb	r2, [r2, #16]
 8005e30:	f107 0108 	add.w	r1, r7, #8
 8005e34:	4610      	mov	r0, r2
 8005e36:	4798      	blx	r3
 8005e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e3a:	e043      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e3c:	6839      	ldr	r1, [r7, #0]
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 fa46 	bl	80062d0 <USBD_CtlError>
            err++;
 8005e44:	7afb      	ldrb	r3, [r7, #11]
 8005e46:	3301      	adds	r3, #1
 8005e48:	72fb      	strb	r3, [r7, #11]
          break;
 8005e4a:	e03b      	b.n	8005ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00b      	beq.n	8005e70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	7c12      	ldrb	r2, [r2, #16]
 8005e64:	f107 0108 	add.w	r1, r7, #8
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
 8005e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e6e:	e029      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e70:	6839      	ldr	r1, [r7, #0]
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa2c 	bl	80062d0 <USBD_CtlError>
            err++;
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e7e:	e021      	b.n	8005ec4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00b      	beq.n	8005ea4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	7c12      	ldrb	r2, [r2, #16]
 8005e98:	f107 0108 	add.w	r1, r7, #8
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ea2:	e00f      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa12 	bl	80062d0 <USBD_CtlError>
            err++;
 8005eac:	7afb      	ldrb	r3, [r7, #11]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8005eb2:	e007      	b.n	8005ec4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa0a 	bl	80062d0 <USBD_CtlError>
          err++;
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005ec2:	e038      	b.n	8005f36 <USBD_GetDescriptor+0x286>
 8005ec4:	e037      	b.n	8005f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	7c1b      	ldrb	r3, [r3, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d109      	bne.n	8005ee2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed6:	f107 0208 	add.w	r2, r7, #8
 8005eda:	4610      	mov	r0, r2
 8005edc:	4798      	blx	r3
 8005ede:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ee0:	e029      	b.n	8005f36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f9f3 	bl	80062d0 <USBD_CtlError>
        err++;
 8005eea:	7afb      	ldrb	r3, [r7, #11]
 8005eec:	3301      	adds	r3, #1
 8005eee:	72fb      	strb	r3, [r7, #11]
      break;
 8005ef0:	e021      	b.n	8005f36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	7c1b      	ldrb	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10d      	bne.n	8005f16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	f107 0208 	add.w	r2, r7, #8
 8005f06:	4610      	mov	r0, r2
 8005f08:	4798      	blx	r3
 8005f0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	2207      	movs	r2, #7
 8005f12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f14:	e00f      	b.n	8005f36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f16:	6839      	ldr	r1, [r7, #0]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9d9 	bl	80062d0 <USBD_CtlError>
        err++;
 8005f1e:	7afb      	ldrb	r3, [r7, #11]
 8005f20:	3301      	adds	r3, #1
 8005f22:	72fb      	strb	r3, [r7, #11]
      break;
 8005f24:	e007      	b.n	8005f36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f9d1 	bl	80062d0 <USBD_CtlError>
      err++;
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
 8005f30:	3301      	adds	r3, #1
 8005f32:	72fb      	strb	r3, [r7, #11]
      break;
 8005f34:	bf00      	nop
  }

  if (err != 0U)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d11c      	bne.n	8005f76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005f3c:	893b      	ldrh	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <USBD_GetDescriptor+0x2b6>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	88db      	ldrh	r3, [r3, #6]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	88da      	ldrh	r2, [r3, #6]
 8005f4e:	893b      	ldrh	r3, [r7, #8]
 8005f50:	4293      	cmp	r3, r2
 8005f52:	bf28      	it	cs
 8005f54:	4613      	movcs	r3, r2
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f5a:	893b      	ldrh	r3, [r7, #8]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa1f 	bl	80063a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	88db      	ldrh	r3, [r3, #6]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa76 	bl	8006460 <USBD_CtlSendStatus>
 8005f74:	e000      	b.n	8005f78 <USBD_GetDescriptor+0x2c8>
    return;
 8005f76:	bf00      	nop
    }
  }
}
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop

08005f80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	889b      	ldrh	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d130      	bne.n	8005ff4 <USBD_SetAddress+0x74>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d12c      	bne.n	8005ff4 <USBD_SetAddress+0x74>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa0:	d828      	bhi.n	8005ff4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	885b      	ldrh	r3, [r3, #2]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d104      	bne.n	8005fc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005fb8:	6839      	ldr	r1, [r7, #0]
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f988 	bl	80062d0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc0:	e01c      	b.n	8005ffc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	7bfa      	ldrb	r2, [r7, #15]
 8005fc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f003 fb8c 	bl	80096ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fa43 	bl	8006460 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fe8:	e008      	b.n	8005ffc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff2:	e003      	b.n	8005ffc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f96a 	bl	80062d0 <USBD_CtlError>
  }
}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	885b      	ldrh	r3, [r3, #2]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b41      	ldr	r3, [pc, #260]	; (800611c <USBD_SetConfig+0x118>)
 8006016:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006018:	4b40      	ldr	r3, [pc, #256]	; (800611c <USBD_SetConfig+0x118>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d904      	bls.n	800602a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f954 	bl	80062d0 <USBD_CtlError>
 8006028:	e075      	b.n	8006116 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006030:	2b02      	cmp	r3, #2
 8006032:	d002      	beq.n	800603a <USBD_SetConfig+0x36>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d023      	beq.n	8006080 <USBD_SetConfig+0x7c>
 8006038:	e062      	b.n	8006100 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800603a:	4b38      	ldr	r3, [pc, #224]	; (800611c <USBD_SetConfig+0x118>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01a      	beq.n	8006078 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <USBD_SetConfig+0x118>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2203      	movs	r2, #3
 8006050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006054:	4b31      	ldr	r3, [pc, #196]	; (800611c <USBD_SetConfig+0x118>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff f9f3 	bl	8005446 <USBD_SetClassConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	2b02      	cmp	r3, #2
 8006064:	d104      	bne.n	8006070 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f931 	bl	80062d0 <USBD_CtlError>
            return;
 800606e:	e052      	b.n	8006116 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f9f5 	bl	8006460 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006076:	e04e      	b.n	8006116 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f9f1 	bl	8006460 <USBD_CtlSendStatus>
        break;
 800607e:	e04a      	b.n	8006116 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006080:	4b26      	ldr	r3, [pc, #152]	; (800611c <USBD_SetConfig+0x118>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d112      	bne.n	80060ae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006090:	4b22      	ldr	r3, [pc, #136]	; (800611c <USBD_SetConfig+0x118>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800609a:	4b20      	ldr	r3, [pc, #128]	; (800611c <USBD_SetConfig+0x118>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff f9ef 	bl	8005484 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9da 	bl	8006460 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80060ac:	e033      	b.n	8006116 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80060ae:	4b1b      	ldr	r3, [pc, #108]	; (800611c <USBD_SetConfig+0x118>)
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d01d      	beq.n	80060f8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	4619      	mov	r1, r3
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff f9dd 	bl	8005484 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80060ca:	4b14      	ldr	r3, [pc, #80]	; (800611c <USBD_SetConfig+0x118>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80060d4:	4b11      	ldr	r3, [pc, #68]	; (800611c <USBD_SetConfig+0x118>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	4619      	mov	r1, r3
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f7ff f9b3 	bl	8005446 <USBD_SetClassConfig>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d104      	bne.n	80060f0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8f1 	bl	80062d0 <USBD_CtlError>
            return;
 80060ee:	e012      	b.n	8006116 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f9b5 	bl	8006460 <USBD_CtlSendStatus>
        break;
 80060f6:	e00e      	b.n	8006116 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f9b1 	bl	8006460 <USBD_CtlSendStatus>
        break;
 80060fe:	e00a      	b.n	8006116 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f8e4 	bl	80062d0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <USBD_SetConfig+0x118>)
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7ff f9b8 	bl	8005484 <USBD_ClrClassConfig>
        break;
 8006114:	bf00      	nop
    }
  }
}
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	2000019c 	.word	0x2000019c

08006120 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d004      	beq.n	800613c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8cb 	bl	80062d0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800613a:	e021      	b.n	8006180 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006142:	2b01      	cmp	r3, #1
 8006144:	db17      	blt.n	8006176 <USBD_GetConfig+0x56>
 8006146:	2b02      	cmp	r3, #2
 8006148:	dd02      	ble.n	8006150 <USBD_GetConfig+0x30>
 800614a:	2b03      	cmp	r3, #3
 800614c:	d00b      	beq.n	8006166 <USBD_GetConfig+0x46>
 800614e:	e012      	b.n	8006176 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3308      	adds	r3, #8
 800615a:	2201      	movs	r2, #1
 800615c:	4619      	mov	r1, r3
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f920 	bl	80063a4 <USBD_CtlSendData>
        break;
 8006164:	e00c      	b.n	8006180 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3304      	adds	r3, #4
 800616a:	2201      	movs	r2, #1
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f918 	bl	80063a4 <USBD_CtlSendData>
        break;
 8006174:	e004      	b.n	8006180 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f8a9 	bl	80062d0 <USBD_CtlError>
        break;
 800617e:	bf00      	nop
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	3b01      	subs	r3, #1
 800619a:	2b02      	cmp	r3, #2
 800619c:	d81e      	bhi.n	80061dc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	88db      	ldrh	r3, [r3, #6]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d004      	beq.n	80061b0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f891 	bl	80062d0 <USBD_CtlError>
        break;
 80061ae:	e01a      	b.n	80061e6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f043 0202 	orr.w	r2, r3, #2
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	330c      	adds	r3, #12
 80061d0:	2202      	movs	r2, #2
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f8e5 	bl	80063a4 <USBD_CtlSendData>
      break;
 80061da:	e004      	b.n	80061e6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f876 	bl	80062d0 <USBD_CtlError>
      break;
 80061e4:	bf00      	nop
  }
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	885b      	ldrh	r3, [r3, #2]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d106      	bne.n	800620e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f929 	bl	8006460 <USBD_CtlSendStatus>
  }
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006226:	3b01      	subs	r3, #1
 8006228:	2b02      	cmp	r3, #2
 800622a:	d80b      	bhi.n	8006244 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	885b      	ldrh	r3, [r3, #2]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d10c      	bne.n	800624e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f90f 	bl	8006460 <USBD_CtlSendStatus>
      }
      break;
 8006242:	e004      	b.n	800624e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f842 	bl	80062d0 <USBD_CtlError>
      break;
 800624c:	e000      	b.n	8006250 <USBD_ClrFeature+0x3a>
      break;
 800624e:	bf00      	nop
  }
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781a      	ldrb	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	785a      	ldrb	r2, [r3, #1]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	3302      	adds	r3, #2
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	b29a      	uxth	r2, r3
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	3303      	adds	r3, #3
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	b29b      	uxth	r3, r3
 8006286:	4413      	add	r3, r2
 8006288:	b29a      	uxth	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	3304      	adds	r3, #4
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	b29a      	uxth	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	3305      	adds	r3, #5
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	4413      	add	r3, r2
 80062a4:	b29a      	uxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	3306      	adds	r3, #6
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	3307      	adds	r3, #7
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4413      	add	r3, r2
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	80da      	strh	r2, [r3, #6]

}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bc80      	pop	{r7}
 80062ce:	4770      	bx	lr

080062d0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80062da:	2180      	movs	r1, #128	; 0x80
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f003 f99b 	bl	8009618 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80062e2:	2100      	movs	r1, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f003 f997 	bl	8009618 <USBD_LL_StallEP>
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b086      	sub	sp, #24
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	60f8      	str	r0, [r7, #12]
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d032      	beq.n	800636e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f834 	bl	8006376 <USBD_GetLen>
 800630e:	4603      	mov	r3, r0
 8006310:	3301      	adds	r3, #1
 8006312:	b29b      	uxth	r3, r3
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	b29a      	uxth	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	75fa      	strb	r2, [r7, #23]
 8006322:	461a      	mov	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4413      	add	r3, r2
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	7812      	ldrb	r2, [r2, #0]
 800632c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	75fa      	strb	r2, [r7, #23]
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4413      	add	r3, r2
 800633a:	2203      	movs	r2, #3
 800633c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800633e:	e012      	b.n	8006366 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	60fa      	str	r2, [r7, #12]
 8006346:	7dfa      	ldrb	r2, [r7, #23]
 8006348:	1c51      	adds	r1, r2, #1
 800634a:	75f9      	strb	r1, [r7, #23]
 800634c:	4611      	mov	r1, r2
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	440a      	add	r2, r1
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	75fa      	strb	r2, [r7, #23]
 800635c:	461a      	mov	r2, r3
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	4413      	add	r3, r2
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e8      	bne.n	8006340 <USBD_GetString+0x4e>
    }
  }
}
 800636e:	bf00      	nop
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006382:	e005      	b.n	8006390 <USBD_GetLen+0x1a>
  {
    len++;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	3301      	adds	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
    buf++;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3301      	adds	r3, #1
 800638e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f5      	bne.n	8006384 <USBD_GetLen+0xe>
  }

  return len;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr

080063a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063c6:	88fb      	ldrh	r3, [r7, #6]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	2100      	movs	r1, #0
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f003 f9ac 	bl	800972a <USBD_LL_Transmit>

  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4613      	mov	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063ea:	88fb      	ldrh	r3, [r7, #6]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	2100      	movs	r1, #0
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f003 f99a 	bl	800972a <USBD_LL_Transmit>

  return USBD_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4613      	mov	r3, r2
 800640c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2203      	movs	r2, #3
 8006412:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006416:	88fa      	ldrh	r2, [r7, #6]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800641e:	88fa      	ldrh	r2, [r7, #6]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	2100      	movs	r1, #0
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f003 f99f 	bl	8009770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3710      	adds	r7, #16
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	2100      	movs	r1, #0
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f003 f98d 	bl	8009770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2204      	movs	r2, #4
 800646c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006470:	2300      	movs	r3, #0
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f003 f957 	bl	800972a <USBD_LL_Transmit>

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2205      	movs	r2, #5
 8006492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006496:	2300      	movs	r3, #0
 8006498:	2200      	movs	r2, #0
 800649a:	2100      	movs	r1, #0
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f003 f967 	bl	8009770 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064b2:	f3ef 8305 	mrs	r3, IPSR
 80064b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10f      	bne.n	80064de <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064be:	f3ef 8310 	mrs	r3, PRIMASK
 80064c2:	607b      	str	r3, [r7, #4]
  return(result);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <osKernelInitialize+0x32>
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <osKernelInitialize+0x60>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d109      	bne.n	80064e6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064d2:	f3ef 8311 	mrs	r3, BASEPRI
 80064d6:	603b      	str	r3, [r7, #0]
  return(result);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80064de:	f06f 0305 	mvn.w	r3, #5
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	e00c      	b.n	8006500 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <osKernelInitialize+0x60>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80064ee:	4b07      	ldr	r3, [pc, #28]	; (800650c <osKernelInitialize+0x60>)
 80064f0:	2201      	movs	r2, #1
 80064f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e002      	b.n	8006500 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006500:	68fb      	ldr	r3, [r7, #12]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr
 800650c:	200001a0 	.word	0x200001a0

08006510 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006516:	f3ef 8305 	mrs	r3, IPSR
 800651a:	60bb      	str	r3, [r7, #8]
  return(result);
 800651c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10f      	bne.n	8006542 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006522:	f3ef 8310 	mrs	r3, PRIMASK
 8006526:	607b      	str	r3, [r7, #4]
  return(result);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d109      	bne.n	8006542 <osKernelStart+0x32>
 800652e:	4b11      	ldr	r3, [pc, #68]	; (8006574 <osKernelStart+0x64>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d109      	bne.n	800654a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006536:	f3ef 8311 	mrs	r3, BASEPRI
 800653a:	603b      	str	r3, [r7, #0]
  return(result);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006542:	f06f 0305 	mvn.w	r3, #5
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e00e      	b.n	8006568 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <osKernelStart+0x64>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <osKernelStart+0x64>)
 8006554:	2202      	movs	r2, #2
 8006556:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006558:	f001 f912 	bl	8007780 <vTaskStartScheduler>
      stat = osOK;
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	e002      	b.n	8006568 <osKernelStart+0x58>
    } else {
      stat = osError;
 8006562:	f04f 33ff 	mov.w	r3, #4294967295
 8006566:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	200001a0 	.word	0x200001a0

08006578 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b092      	sub	sp, #72	; 0x48
 800657c:	af04      	add	r7, sp, #16
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006588:	f3ef 8305 	mrs	r3, IPSR
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800658e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8006590:	2b00      	cmp	r3, #0
 8006592:	f040 8094 	bne.w	80066be <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006596:	f3ef 8310 	mrs	r3, PRIMASK
 800659a:	623b      	str	r3, [r7, #32]
  return(result);
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 808d 	bne.w	80066be <osThreadNew+0x146>
 80065a4:	4b48      	ldr	r3, [pc, #288]	; (80066c8 <osThreadNew+0x150>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d106      	bne.n	80065ba <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 8082 	bne.w	80066be <osThreadNew+0x146>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d07e      	beq.n	80066be <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80065c4:	2318      	movs	r3, #24
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80065c8:	2300      	movs	r3, #0
 80065ca:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80065cc:	f107 031b 	add.w	r3, r7, #27
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80065d2:	f04f 33ff 	mov.w	r3, #4294967295
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d045      	beq.n	800666a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <osThreadNew+0x74>
        name = attr->name;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d008      	beq.n	8006612 <osThreadNew+0x9a>
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	2b38      	cmp	r3, #56	; 0x38
 8006604:	d805      	bhi.n	8006612 <osThreadNew+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <osThreadNew+0x9e>
        return (NULL);
 8006612:	2300      	movs	r3, #0
 8006614:	e054      	b.n	80066c0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <osThreadNew+0xd4>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b5b      	cmp	r3, #91	; 0x5b
 8006634:	d90a      	bls.n	800664c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800663a:	2b00      	cmp	r3, #0
 800663c:	d006      	beq.n	800664c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osThreadNew+0xd4>
        mem = 1;
 8006646:	2301      	movs	r3, #1
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
 800664a:	e010      	b.n	800666e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10c      	bne.n	800666e <osThreadNew+0xf6>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <osThreadNew+0xf6>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <osThreadNew+0xf6>
          mem = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	62bb      	str	r3, [r7, #40]	; 0x28
 8006668:	e001      	b.n	800666e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800666a:	2300      	movs	r3, #0
 800666c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	2b01      	cmp	r3, #1
 8006672:	d110      	bne.n	8006696 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800667c:	9202      	str	r2, [sp, #8]
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006688:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fe3e 	bl	800730c <xTaskCreateStatic>
 8006690:	4603      	mov	r3, r0
 8006692:	617b      	str	r3, [r7, #20]
 8006694:	e013      	b.n	80066be <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d110      	bne.n	80066be <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	b29a      	uxth	r2, r3
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fe85 	bl	80073be <xTaskCreate>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <osThreadNew+0x146>
          hTask = NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066be:	697b      	ldr	r3, [r7, #20]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3738      	adds	r7, #56	; 0x38
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	200001a0 	.word	0x200001a0

080066cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d4:	f3ef 8305 	mrs	r3, IPSR
 80066d8:	613b      	str	r3, [r7, #16]
  return(result);
 80066da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10f      	bne.n	8006700 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066e0:	f3ef 8310 	mrs	r3, PRIMASK
 80066e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d109      	bne.n	8006700 <osDelay+0x34>
 80066ec:	4b0d      	ldr	r3, [pc, #52]	; (8006724 <osDelay+0x58>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2b02      	cmp	r3, #2
 80066f2:	d109      	bne.n	8006708 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066f4:	f3ef 8311 	mrs	r3, BASEPRI
 80066f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <osDelay+0x3c>
    stat = osErrorISR;
 8006700:	f06f 0305 	mvn.w	r3, #5
 8006704:	617b      	str	r3, [r7, #20]
 8006706:	e007      	b.n	8006718 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006708:	2300      	movs	r3, #0
 800670a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 f800 	bl	8007718 <vTaskDelay>
    }
  }

  return (stat);
 8006718:	697b      	ldr	r3, [r7, #20]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	200001a0 	.word	0x200001a0

08006728 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a06      	ldr	r2, [pc, #24]	; (8006750 <vApplicationGetIdleTaskMemory+0x28>)
 8006738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	4a05      	ldr	r2, [pc, #20]	; (8006754 <vApplicationGetIdleTaskMemory+0x2c>)
 800673e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2280      	movs	r2, #128	; 0x80
 8006744:	601a      	str	r2, [r3, #0]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr
 8006750:	200001a4 	.word	0x200001a4
 8006754:	20000200 	.word	0x20000200

08006758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a07      	ldr	r2, [pc, #28]	; (8006784 <vApplicationGetTimerTaskMemory+0x2c>)
 8006768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4a06      	ldr	r2, [pc, #24]	; (8006788 <vApplicationGetTimerTaskMemory+0x30>)
 800676e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006776:	601a      	str	r2, [r3, #0]
}
 8006778:	bf00      	nop
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bc80      	pop	{r7}
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000400 	.word	0x20000400
 8006788:	2000045c 	.word	0x2000045c

0800678c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f103 0208 	add.w	r2, r3, #8
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f103 0208 	add.w	r2, r3, #8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 0208 	add.w	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bc80      	pop	{r7}
 80067c8:	4770      	bx	lr

080067ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr

080067e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067e2:	b480      	push	{r7}
 80067e4:	b085      	sub	sp, #20
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
}
 800681e:	bf00      	nop
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	bc80      	pop	{r7}
 8006826:	4770      	bx	lr

08006828 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683e:	d103      	bne.n	8006848 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e00c      	b.n	8006862 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3308      	adds	r3, #8
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	e002      	b.n	8006856 <vListInsert+0x2e>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	d2f6      	bcs.n	8006850 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	bc80      	pop	{r7}
 8006896:	4770      	bx	lr

08006898 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6892      	ldr	r2, [r2, #8]
 80068ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	6852      	ldr	r2, [r2, #4]
 80068b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d103      	bne.n	80068cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	1e5a      	subs	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bc80      	pop	{r7}
 80068e8:	4770      	bx	lr
	...

080068ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d109      	bne.n	8006914 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	60bb      	str	r3, [r7, #8]
 8006912:	e7fe      	b.n	8006912 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006914:	f002 f848 	bl	80089a8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006920:	68f9      	ldr	r1, [r7, #12]
 8006922:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	441a      	add	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	3b01      	subs	r3, #1
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	441a      	add	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	22ff      	movs	r2, #255	; 0xff
 8006958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	22ff      	movs	r2, #255	; 0xff
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d114      	bne.n	8006994 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01a      	beq.n	80069a8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3310      	adds	r3, #16
 8006976:	4618      	mov	r0, r3
 8006978:	f001 f986 	bl	8007c88 <xTaskRemoveFromEventList>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d012      	beq.n	80069a8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006982:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <xQueueGenericReset+0xcc>)
 8006984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	e009      	b.n	80069a8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3310      	adds	r3, #16
 8006998:	4618      	mov	r0, r3
 800699a:	f7ff fef7 	bl	800678c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3324      	adds	r3, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fef2 	bl	800678c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069a8:	f002 f82c 	bl	8008a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08e      	sub	sp, #56	; 0x38
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
 80069c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <xQueueGenericCreateStatic+0x28>
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e2:	e7fe      	b.n	80069e2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <xQueueGenericCreateStatic+0x42>
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
 80069fc:	e7fe      	b.n	80069fc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <xQueueGenericCreateStatic+0x4e>
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <xQueueGenericCreateStatic+0x52>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueGenericCreateStatic+0x54>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <xQueueGenericCreateStatic+0x6c>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	623b      	str	r3, [r7, #32]
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <xQueueGenericCreateStatic+0x78>
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <xQueueGenericCreateStatic+0x7c>
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <xQueueGenericCreateStatic+0x7e>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <xQueueGenericCreateStatic+0x96>
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e7fe      	b.n	8006a50 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a52:	2350      	movs	r3, #80	; 0x50
 8006a54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b50      	cmp	r3, #80	; 0x50
 8006a5a:	d009      	beq.n	8006a70 <xQueueGenericCreateStatic+0xb4>
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	e7fe      	b.n	8006a6e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00d      	beq.n	8006a96 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f842 	bl	8006b1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3730      	adds	r7, #48	; 0x30
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b08a      	sub	sp, #40	; 0x28
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <xQueueGenericCreate+0x28>
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	e7fe      	b.n	8006ac6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d102      	bne.n	8006ad4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
 8006ad2:	e004      	b.n	8006ade <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68ba      	ldr	r2, [r7, #8]
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	3350      	adds	r3, #80	; 0x50
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f002 f856 	bl	8008b94 <pvPortMalloc>
 8006ae8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00f      	beq.n	8006b10 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	3350      	adds	r3, #80	; 0x50
 8006af4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006afe:	79fa      	ldrb	r2, [r7, #7]
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	4613      	mov	r3, r2
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f000 f805 	bl	8006b1a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006b10:	69bb      	ldr	r3, [r7, #24]
	}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b084      	sub	sp, #16
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e002      	b.n	8006b3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b48:	2101      	movs	r1, #1
 8006b4a:	69b8      	ldr	r0, [r7, #24]
 8006b4c:	f7ff fece 	bl	80068ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	78fa      	ldrb	r2, [r7, #3]
 8006b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b58:	bf00      	nop
 8006b5a:	3710      	adds	r7, #16
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08e      	sub	sp, #56	; 0x38
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <xQueueGenericSend+0x30>
 8006b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b80:	f383 8811 	msr	BASEPRI, r3
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	f3bf 8f4f 	dsb	sy
 8006b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8e:	e7fe      	b.n	8006b8e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d103      	bne.n	8006b9e <xQueueGenericSend+0x3e>
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <xQueueGenericSend+0x42>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <xQueueGenericSend+0x44>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <xQueueGenericSend+0x5c>
 8006ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d103      	bne.n	8006bca <xQueueGenericSend+0x6a>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <xQueueGenericSend+0x6e>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <xQueueGenericSend+0x70>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d109      	bne.n	8006be8 <xQueueGenericSend+0x88>
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	e7fe      	b.n	8006be6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006be8:	f001 fa08 	bl	8007ffc <xTaskGetSchedulerState>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <xQueueGenericSend+0x98>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <xQueueGenericSend+0x9c>
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e000      	b.n	8006bfe <xQueueGenericSend+0x9e>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <xQueueGenericSend+0xb6>
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c16:	f001 fec7 	bl	80089a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <xQueueGenericSend+0xcc>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d129      	bne.n	8006c80 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c32:	f000 f9ff 	bl	8007034 <prvCopyDataToQueue>
 8006c36:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	3324      	adds	r3, #36	; 0x24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 f81f 	bl	8007c88 <xTaskRemoveFromEventList>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c50:	4b3f      	ldr	r3, [pc, #252]	; (8006d50 <xQueueGenericSend+0x1f0>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	e00a      	b.n	8006c78 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c68:	4b39      	ldr	r3, [pc, #228]	; (8006d50 <xQueueGenericSend+0x1f0>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c78:	f001 fec4 	bl	8008a04 <vPortExitCritical>
				return pdPASS;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e063      	b.n	8006d48 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d103      	bne.n	8006c8e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c86:	f001 febd 	bl	8008a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e05c      	b.n	8006d48 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d106      	bne.n	8006ca2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c94:	f107 0314 	add.w	r3, r7, #20
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f001 f857 	bl	8007d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ca2:	f001 feaf 	bl	8008a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ca6:	f000 fdcf 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006caa:	f001 fe7d 	bl	80089a8 <vPortEnterCritical>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cb4:	b25b      	sxtb	r3, r3
 8006cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cba:	d103      	bne.n	8006cc4 <xQueueGenericSend+0x164>
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cca:	b25b      	sxtb	r3, r3
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d103      	bne.n	8006cda <xQueueGenericSend+0x17a>
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cda:	f001 fe93 	bl	8008a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cde:	1d3a      	adds	r2, r7, #4
 8006ce0:	f107 0314 	add.w	r3, r7, #20
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f846 	bl	8007d78 <xTaskCheckForTimeOut>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d124      	bne.n	8006d3c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf4:	f000 fa96 	bl	8007224 <prvIsQueueFull>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d018      	beq.n	8006d30 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d00:	3310      	adds	r3, #16
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4611      	mov	r1, r2
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 ff70 	bl	8007bec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d0e:	f000 fa21 	bl	8007154 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006d12:	f000 fda7 	bl	8007864 <xTaskResumeAll>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f47f af7c 	bne.w	8006c16 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <xQueueGenericSend+0x1f0>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	e772      	b.n	8006c16 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d32:	f000 fa0f 	bl	8007154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d36:	f000 fd95 	bl	8007864 <xTaskResumeAll>
 8006d3a:	e76c      	b.n	8006c16 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d3e:	f000 fa09 	bl	8007154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d42:	f000 fd8f 	bl	8007864 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d46:	2300      	movs	r3, #0
		}
	}
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3738      	adds	r7, #56	; 0x38
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08e      	sub	sp, #56	; 0x38
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
 8006d60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d109      	bne.n	8006d80 <xQueueGenericSendFromISR+0x2c>
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7e:	e7fe      	b.n	8006d7e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <xQueueGenericSendFromISR+0x3a>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <xQueueGenericSendFromISR+0x3e>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueGenericSendFromISR+0x40>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <xQueueGenericSendFromISR+0x58>
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	623b      	str	r3, [r7, #32]
 8006daa:	e7fe      	b.n	8006daa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d103      	bne.n	8006dba <xQueueGenericSendFromISR+0x66>
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <xQueueGenericSendFromISR+0x6a>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <xQueueGenericSendFromISR+0x6c>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d109      	bne.n	8006dd8 <xQueueGenericSendFromISR+0x84>
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	e7fe      	b.n	8006dd6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dd8:	f001 fea0 	bl	8008b1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ddc:	f3ef 8211 	mrs	r2, BASEPRI
 8006de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	61ba      	str	r2, [r7, #24]
 8006df2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006df4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d302      	bcc.n	8006e0a <xQueueGenericSendFromISR+0xb6>
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d12c      	bne.n	8006e64 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e1a:	f000 f90b 	bl	8007034 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e1e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d112      	bne.n	8006e4e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d016      	beq.n	8006e5e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 ff27 	bl	8007c88 <xTaskRemoveFromEventList>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00e      	beq.n	8006e5e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00b      	beq.n	8006e5e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
 8006e4c:	e007      	b.n	8006e5e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e52:	3301      	adds	r3, #1
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	b25a      	sxtb	r2, r3
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006e62:	e001      	b.n	8006e68 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
 8006e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3738      	adds	r7, #56	; 0x38
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08c      	sub	sp, #48	; 0x30
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <xQueueReceive+0x2e>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	623b      	str	r3, [r7, #32]
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <xQueueReceive+0x3c>
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <xQueueReceive+0x40>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <xQueueReceive+0x42>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <xQueueReceive+0x5a>
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ed6:	f001 f891 	bl	8007ffc <xTaskGetSchedulerState>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <xQueueReceive+0x6a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <xQueueReceive+0x6e>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueReceive+0x70>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <xQueueReceive+0x88>
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	e7fe      	b.n	8006f02 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f04:	f001 fd50 	bl	80089a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01f      	beq.n	8006f54 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f18:	f000 f8f6 	bl	8007108 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	1e5a      	subs	r2, r3, #1
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00f      	beq.n	8006f4c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2e:	3310      	adds	r3, #16
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fea9 	bl	8007c88 <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f3c:	4b3c      	ldr	r3, [pc, #240]	; (8007030 <xQueueReceive+0x1b4>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f4c:	f001 fd5a 	bl	8008a04 <vPortExitCritical>
				return pdPASS;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e069      	b.n	8007028 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f5a:	f001 fd53 	bl	8008a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e062      	b.n	8007028 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d106      	bne.n	8006f76 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f68:	f107 0310 	add.w	r3, r7, #16
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f000 feed 	bl	8007d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f76:	f001 fd45 	bl	8008a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f7a:	f000 fc65 	bl	8007848 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f7e:	f001 fd13 	bl	80089a8 <vPortEnterCritical>
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f88:	b25b      	sxtb	r3, r3
 8006f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8e:	d103      	bne.n	8006f98 <xQueueReceive+0x11c>
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f9e:	b25b      	sxtb	r3, r3
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d103      	bne.n	8006fae <xQueueReceive+0x132>
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fae:	f001 fd29 	bl	8008a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fb2:	1d3a      	adds	r2, r7, #4
 8006fb4:	f107 0310 	add.w	r3, r7, #16
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fedc 	bl	8007d78 <xTaskCheckForTimeOut>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d123      	bne.n	800700e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fc8:	f000 f916 	bl	80071f8 <prvIsQueueEmpty>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d017      	beq.n	8007002 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd4:	3324      	adds	r3, #36	; 0x24
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	4611      	mov	r1, r2
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fe06 	bl	8007bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe2:	f000 f8b7 	bl	8007154 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fe6:	f000 fc3d 	bl	8007864 <xTaskResumeAll>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d189      	bne.n	8006f04 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	; (8007030 <xQueueReceive+0x1b4>)
 8006ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	e780      	b.n	8006f04 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007004:	f000 f8a6 	bl	8007154 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007008:	f000 fc2c 	bl	8007864 <xTaskResumeAll>
 800700c:	e77a      	b.n	8006f04 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800700e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007010:	f000 f8a0 	bl	8007154 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007014:	f000 fc26 	bl	8007864 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701a:	f000 f8ed 	bl	80071f8 <prvIsQueueEmpty>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f43f af6f 	beq.w	8006f04 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007026:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8007028:	4618      	mov	r0, r3
 800702a:	3730      	adds	r7, #48	; 0x30
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	e000ed04 	.word	0xe000ed04

08007034 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007048:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10d      	bne.n	800706e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d14d      	bne.n	80070f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 ffea 	bl	8008038 <xTaskPriorityDisinherit>
 8007064:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]
 800706c:	e043      	b.n	80070f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d119      	bne.n	80070a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	6898      	ldr	r0, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	461a      	mov	r2, r3
 800707e:	68b9      	ldr	r1, [r7, #8]
 8007080:	f002 fc1c 	bl	80098bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708c:	441a      	add	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689a      	ldr	r2, [r3, #8]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	429a      	cmp	r2, r3
 800709c:	d32b      	bcc.n	80070f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	609a      	str	r2, [r3, #8]
 80070a6:	e026      	b.n	80070f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	68d8      	ldr	r0, [r3, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	461a      	mov	r2, r3
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	f002 fc02 	bl	80098bc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	425b      	negs	r3, r3
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d207      	bcs.n	80070e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	425b      	negs	r3, r3
 80070de:	441a      	add	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d105      	bne.n	80070f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070fe:	697b      	ldr	r3, [r7, #20]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d018      	beq.n	800714c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	441a      	add	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	68da      	ldr	r2, [r3, #12]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d303      	bcc.n	800713c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68d9      	ldr	r1, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007144:	461a      	mov	r2, r3
 8007146:	6838      	ldr	r0, [r7, #0]
 8007148:	f002 fbb8 	bl	80098bc <memcpy>
	}
}
 800714c:	bf00      	nop
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800715c:	f001 fc24 	bl	80089a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007166:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007168:	e011      	b.n	800718e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d012      	beq.n	8007198 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3324      	adds	r3, #36	; 0x24
 8007176:	4618      	mov	r0, r3
 8007178:	f000 fd86 	bl	8007c88 <xTaskRemoveFromEventList>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007182:	f000 fe59 	bl	8007e38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
 8007188:	3b01      	subs	r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800718e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007192:	2b00      	cmp	r3, #0
 8007194:	dce9      	bgt.n	800716a <prvUnlockQueue+0x16>
 8007196:	e000      	b.n	800719a <prvUnlockQueue+0x46>
					break;
 8007198:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	22ff      	movs	r2, #255	; 0xff
 800719e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071a2:	f001 fc2f 	bl	8008a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071a6:	f001 fbff 	bl	80089a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071b2:	e011      	b.n	80071d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d012      	beq.n	80071e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3310      	adds	r3, #16
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fd61 	bl	8007c88 <xTaskRemoveFromEventList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071cc:	f000 fe34 	bl	8007e38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dce9      	bgt.n	80071b4 <prvUnlockQueue+0x60>
 80071e0:	e000      	b.n	80071e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	22ff      	movs	r2, #255	; 0xff
 80071e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071ec:	f001 fc0a 	bl	8008a04 <vPortExitCritical>
}
 80071f0:	bf00      	nop
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007200:	f001 fbd2 	bl	80089a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e001      	b.n	8007216 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007216:	f001 fbf5 	bl	8008a04 <vPortExitCritical>

	return xReturn;
 800721a:	68fb      	ldr	r3, [r7, #12]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800722c:	f001 fbbc 	bl	80089a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007238:	429a      	cmp	r2, r3
 800723a:	d102      	bne.n	8007242 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e001      	b.n	8007246 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007246:	f001 fbdd 	bl	8008a04 <vPortExitCritical>

	return xReturn;
 800724a:	68fb      	ldr	r3, [r7, #12]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	e014      	b.n	800728e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007264:	4a0e      	ldr	r2, [pc, #56]	; (80072a0 <vQueueAddToRegistry+0x4c>)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10b      	bne.n	8007288 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007270:	490b      	ldr	r1, [pc, #44]	; (80072a0 <vQueueAddToRegistry+0x4c>)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800727a:	4a09      	ldr	r2, [pc, #36]	; (80072a0 <vQueueAddToRegistry+0x4c>)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	4413      	add	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007286:	e005      	b.n	8007294 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	3301      	adds	r3, #1
 800728c:	60fb      	str	r3, [r7, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b07      	cmp	r3, #7
 8007292:	d9e7      	bls.n	8007264 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	bc80      	pop	{r7}
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20001cf4 	.word	0x20001cf4

080072a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072b4:	f001 fb78 	bl	80089a8 <vPortEnterCritical>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d103      	bne.n	80072ce <vQueueWaitForMessageRestricted+0x2a>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072d4:	b25b      	sxtb	r3, r3
 80072d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072da:	d103      	bne.n	80072e4 <vQueueWaitForMessageRestricted+0x40>
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072e4:	f001 fb8e 	bl	8008a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3324      	adds	r3, #36	; 0x24
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fc9b 	bl	8007c34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072fe:	6978      	ldr	r0, [r7, #20]
 8007300:	f7ff ff28 	bl	8007154 <prvUnlockQueue>
	}
 8007304:	bf00      	nop
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af04      	add	r7, sp, #16
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <xTaskCreateStatic+0x28>
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	623b      	str	r3, [r7, #32]
 8007332:	e7fe      	b.n	8007332 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <xTaskCreateStatic+0x42>
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	e7fe      	b.n	800734c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800734e:	235c      	movs	r3, #92	; 0x5c
 8007350:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b5c      	cmp	r3, #92	; 0x5c
 8007356:	d009      	beq.n	800736c <xTaskCreateStatic+0x60>
 8007358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e7fe      	b.n	800736a <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800736c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736e:	2b00      	cmp	r3, #0
 8007370:	d01e      	beq.n	80073b0 <xTaskCreateStatic+0xa4>
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01b      	beq.n	80073b0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800737c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	2202      	movs	r2, #2
 8007386:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800738a:	2300      	movs	r3, #0
 800738c:	9303      	str	r3, [sp, #12]
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	9302      	str	r3, [sp, #8]
 8007392:	f107 0314 	add.w	r3, r7, #20
 8007396:	9301      	str	r3, [sp, #4]
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	9300      	str	r3, [sp, #0]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 f850 	bl	8007448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073aa:	f000 f8d3 	bl	8007554 <prvAddNewTaskToReadyList>
 80073ae:	e001      	b.n	80073b4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073b4:	697b      	ldr	r3, [r7, #20]
	}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3728      	adds	r7, #40	; 0x28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b08c      	sub	sp, #48	; 0x30
 80073c2:	af04      	add	r7, sp, #16
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	603b      	str	r3, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ce:	88fb      	ldrh	r3, [r7, #6]
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fbde 	bl	8008b94 <pvPortMalloc>
 80073d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00e      	beq.n	80073fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80073e0:	205c      	movs	r0, #92	; 0x5c
 80073e2:	f001 fbd7 	bl	8008b94 <pvPortMalloc>
 80073e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30
 80073f4:	e005      	b.n	8007402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073f6:	6978      	ldr	r0, [r7, #20]
 80073f8:	f001 fc8e 	bl	8008d18 <vPortFree>
 80073fc:	e001      	b.n	8007402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d017      	beq.n	8007438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	2300      	movs	r3, #0
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f000 f80e 	bl	8007448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800742c:	69f8      	ldr	r0, [r7, #28]
 800742e:	f000 f891 	bl	8007554 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007432:	2301      	movs	r3, #1
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e002      	b.n	800743e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007438:	f04f 33ff 	mov.w	r3, #4294967295
 800743c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800743e:	69bb      	ldr	r3, [r7, #24]
	}
 8007440:	4618      	mov	r0, r3
 8007442:	3720      	adds	r7, #32
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	461a      	mov	r2, r3
 8007460:	21a5      	movs	r1, #165	; 0xa5
 8007462:	f002 fa36 	bl	80098d2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007470:	3b01      	subs	r3, #1
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	f023 0307 	bic.w	r3, r3, #7
 800747e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <prvInitialiseNewTask+0x56>
 800748a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e7fe      	b.n	800749c <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e012      	b.n	80074ca <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	7819      	ldrb	r1, [r3, #0]
 80074ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	3334      	adds	r3, #52	; 0x34
 80074b4:	460a      	mov	r2, r1
 80074b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d006      	beq.n	80074d2 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	3301      	adds	r3, #1
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	2b0f      	cmp	r3, #15
 80074ce:	d9e9      	bls.n	80074a4 <prvInitialiseNewTask+0x5c>
 80074d0:	e000      	b.n	80074d4 <prvInitialiseNewTask+0x8c>
		{
			break;
 80074d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074de:	2b37      	cmp	r3, #55	; 0x37
 80074e0:	d901      	bls.n	80074e6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074e2:	2337      	movs	r3, #55	; 0x37
 80074e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	2200      	movs	r2, #0
 80074f6:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	3304      	adds	r3, #4
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff f964 	bl	80067ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	3318      	adds	r3, #24
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff f95f 	bl	80067ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007510:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	2200      	movs	r2, #0
 8007526:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	69b8      	ldr	r0, [r7, #24]
 8007536:	f001 f949 	bl	80087cc <pxPortInitialiseStack>
 800753a:	4602      	mov	r2, r0
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800754c:	bf00      	nop
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800755c:	f001 fa24 	bl	80089a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007560:	4b2d      	ldr	r3, [pc, #180]	; (8007618 <prvAddNewTaskToReadyList+0xc4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3301      	adds	r3, #1
 8007566:	4a2c      	ldr	r2, [pc, #176]	; (8007618 <prvAddNewTaskToReadyList+0xc4>)
 8007568:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800756a:	4b2c      	ldr	r3, [pc, #176]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d109      	bne.n	8007586 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007572:	4a2a      	ldr	r2, [pc, #168]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007578:	4b27      	ldr	r3, [pc, #156]	; (8007618 <prvAddNewTaskToReadyList+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d110      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007580:	f000 fc7e 	bl	8007e80 <prvInitialiseTaskLists>
 8007584:	e00d      	b.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007586:	4b26      	ldr	r3, [pc, #152]	; (8007620 <prvAddNewTaskToReadyList+0xcc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d109      	bne.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800758e:	4b23      	ldr	r3, [pc, #140]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	429a      	cmp	r2, r3
 800759a:	d802      	bhi.n	80075a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800759c:	4a1f      	ldr	r2, [pc, #124]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075a2:	4b20      	ldr	r3, [pc, #128]	; (8007624 <prvAddNewTaskToReadyList+0xd0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3301      	adds	r3, #1
 80075a8:	4a1e      	ldr	r2, [pc, #120]	; (8007624 <prvAddNewTaskToReadyList+0xd0>)
 80075aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075ac:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <prvAddNewTaskToReadyList+0xd0>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <prvAddNewTaskToReadyList+0xd4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d903      	bls.n	80075c8 <prvAddNewTaskToReadyList+0x74>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a18      	ldr	r2, [pc, #96]	; (8007628 <prvAddNewTaskToReadyList+0xd4>)
 80075c6:	6013      	str	r3, [r2, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075cc:	4613      	mov	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4a15      	ldr	r2, [pc, #84]	; (800762c <prvAddNewTaskToReadyList+0xd8>)
 80075d6:	441a      	add	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f7ff f8ff 	bl	80067e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075e4:	f001 fa0e 	bl	8008a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075e8:	4b0d      	ldr	r3, [pc, #52]	; (8007620 <prvAddNewTaskToReadyList+0xcc>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00e      	beq.n	800760e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <prvAddNewTaskToReadyList+0xc8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d207      	bcs.n	800760e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <prvAddNewTaskToReadyList+0xdc>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	20000d30 	.word	0x20000d30
 800761c:	2000085c 	.word	0x2000085c
 8007620:	20000d3c 	.word	0x20000d3c
 8007624:	20000d4c 	.word	0x20000d4c
 8007628:	20000d38 	.word	0x20000d38
 800762c:	20000860 	.word	0x20000860
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800763c:	f001 f9b4 	bl	80089a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <vTaskDelete+0x18>
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <vTaskDelete+0xc4>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	e000      	b.n	800764e <vTaskDelete+0x1a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3304      	adds	r3, #4
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff f91f 	bl	8006898 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3318      	adds	r3, #24
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff f916 	bl	8006898 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800766c:	4b23      	ldr	r3, [pc, #140]	; (80076fc <vTaskDelete+0xc8>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3301      	adds	r3, #1
 8007672:	4a22      	ldr	r2, [pc, #136]	; (80076fc <vTaskDelete+0xc8>)
 8007674:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007676:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <vTaskDelete+0xc4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	429a      	cmp	r2, r3
 800767e:	d10b      	bne.n	8007698 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	481e      	ldr	r0, [pc, #120]	; (8007700 <vTaskDelete+0xcc>)
 8007688:	f7ff f8ab 	bl	80067e2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800768c:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <vTaskDelete+0xd0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3301      	adds	r3, #1
 8007692:	4a1c      	ldr	r2, [pc, #112]	; (8007704 <vTaskDelete+0xd0>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	e009      	b.n	80076ac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007698:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <vTaskDelete+0xd4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	4a1a      	ldr	r2, [pc, #104]	; (8007708 <vTaskDelete+0xd4>)
 80076a0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fc58 	bl	8007f58 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80076a8:	f000 fc84 	bl	8007fb4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80076ac:	f001 f9aa 	bl	8008a04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80076b0:	4b16      	ldr	r3, [pc, #88]	; (800770c <vTaskDelete+0xd8>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01a      	beq.n	80076ee <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 80076b8:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <vTaskDelete+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d115      	bne.n	80076ee <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80076c2:	4b13      	ldr	r3, [pc, #76]	; (8007710 <vTaskDelete+0xdc>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <vTaskDelete+0xaa>
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	60bb      	str	r3, [r7, #8]
 80076dc:	e7fe      	b.n	80076dc <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80076de:	4b0d      	ldr	r3, [pc, #52]	; (8007714 <vTaskDelete+0xe0>)
 80076e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	2000085c 	.word	0x2000085c
 80076fc:	20000d4c 	.word	0x20000d4c
 8007700:	20000d04 	.word	0x20000d04
 8007704:	20000d18 	.word	0x20000d18
 8007708:	20000d30 	.word	0x20000d30
 800770c:	20000d3c 	.word	0x20000d3c
 8007710:	20000d58 	.word	0x20000d58
 8007714:	e000ed04 	.word	0xe000ed04

08007718 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800772a:	4b13      	ldr	r3, [pc, #76]	; (8007778 <vTaskDelay+0x60>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <vTaskDelay+0x2e>
 8007732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	60bb      	str	r3, [r7, #8]
 8007744:	e7fe      	b.n	8007744 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007746:	f000 f87f 	bl	8007848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800774a:	2100      	movs	r1, #0
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fcdf 	bl	8008110 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007752:	f000 f887 	bl	8007864 <xTaskResumeAll>
 8007756:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d107      	bne.n	800776e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800775e:	4b07      	ldr	r3, [pc, #28]	; (800777c <vTaskDelay+0x64>)
 8007760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007764:	601a      	str	r2, [r3, #0]
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000d58 	.word	0x20000d58
 800777c:	e000ed04 	.word	0xe000ed04

08007780 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	; 0x28
 8007784:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800778e:	463a      	mov	r2, r7
 8007790:	1d39      	adds	r1, r7, #4
 8007792:	f107 0308 	add.w	r3, r7, #8
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe ffc6 	bl	8006728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	9202      	str	r2, [sp, #8]
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	2300      	movs	r3, #0
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	2300      	movs	r3, #0
 80077ac:	460a      	mov	r2, r1
 80077ae:	4920      	ldr	r1, [pc, #128]	; (8007830 <vTaskStartScheduler+0xb0>)
 80077b0:	4820      	ldr	r0, [pc, #128]	; (8007834 <vTaskStartScheduler+0xb4>)
 80077b2:	f7ff fdab 	bl	800730c <xTaskCreateStatic>
 80077b6:	4602      	mov	r2, r0
 80077b8:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <vTaskStartScheduler+0xb8>)
 80077ba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077bc:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <vTaskStartScheduler+0xb8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d002      	beq.n	80077ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077c4:	2301      	movs	r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e001      	b.n	80077ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d102      	bne.n	80077da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80077d4:	f000 fcf0 	bl	80081b8 <xTimerCreateTimerTask>
 80077d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d115      	bne.n	800780c <vTaskStartScheduler+0x8c>
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077f2:	4b12      	ldr	r3, [pc, #72]	; (800783c <vTaskStartScheduler+0xbc>)
 80077f4:	f04f 32ff 	mov.w	r2, #4294967295
 80077f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077fa:	4b11      	ldr	r3, [pc, #68]	; (8007840 <vTaskStartScheduler+0xc0>)
 80077fc:	2201      	movs	r2, #1
 80077fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007800:	4b10      	ldr	r3, [pc, #64]	; (8007844 <vTaskStartScheduler+0xc4>)
 8007802:	2200      	movs	r2, #0
 8007804:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007806:	f001 f85f 	bl	80088c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800780a:	e00d      	b.n	8007828 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d109      	bne.n	8007828 <vTaskStartScheduler+0xa8>
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e7fe      	b.n	8007826 <vTaskStartScheduler+0xa6>
}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	080099f4 	.word	0x080099f4
 8007834:	08007e51 	.word	0x08007e51
 8007838:	20000d54 	.word	0x20000d54
 800783c:	20000d50 	.word	0x20000d50
 8007840:	20000d3c 	.word	0x20000d3c
 8007844:	20000d34 	.word	0x20000d34

08007848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <vTaskSuspendAll+0x18>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	4a03      	ldr	r2, [pc, #12]	; (8007860 <vTaskSuspendAll+0x18>)
 8007854:	6013      	str	r3, [r2, #0]
}
 8007856:	bf00      	nop
 8007858:	46bd      	mov	sp, r7
 800785a:	bc80      	pop	{r7}
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	20000d58 	.word	0x20000d58

08007864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800786e:	2300      	movs	r3, #0
 8007870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007872:	4b41      	ldr	r3, [pc, #260]	; (8007978 <xTaskResumeAll+0x114>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <xTaskResumeAll+0x2a>
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	e7fe      	b.n	800788c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800788e:	f001 f88b 	bl	80089a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007892:	4b39      	ldr	r3, [pc, #228]	; (8007978 <xTaskResumeAll+0x114>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3b01      	subs	r3, #1
 8007898:	4a37      	ldr	r2, [pc, #220]	; (8007978 <xTaskResumeAll+0x114>)
 800789a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789c:	4b36      	ldr	r3, [pc, #216]	; (8007978 <xTaskResumeAll+0x114>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d162      	bne.n	800796a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078a4:	4b35      	ldr	r3, [pc, #212]	; (800797c <xTaskResumeAll+0x118>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d05e      	beq.n	800796a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078ac:	e02f      	b.n	800790e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80078ae:	4b34      	ldr	r3, [pc, #208]	; (8007980 <xTaskResumeAll+0x11c>)
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3318      	adds	r3, #24
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fe ffec 	bl	8006898 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe ffe7 	bl	8006898 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ce:	4b2d      	ldr	r3, [pc, #180]	; (8007984 <xTaskResumeAll+0x120>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d903      	bls.n	80078de <xTaskResumeAll+0x7a>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	4a2a      	ldr	r2, [pc, #168]	; (8007984 <xTaskResumeAll+0x120>)
 80078dc:	6013      	str	r3, [r2, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4a27      	ldr	r2, [pc, #156]	; (8007988 <xTaskResumeAll+0x124>)
 80078ec:	441a      	add	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fe ff74 	bl	80067e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <xTaskResumeAll+0x128>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007904:	429a      	cmp	r2, r3
 8007906:	d302      	bcc.n	800790e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007908:	4b21      	ldr	r3, [pc, #132]	; (8007990 <xTaskResumeAll+0x12c>)
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800790e:	4b1c      	ldr	r3, [pc, #112]	; (8007980 <xTaskResumeAll+0x11c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1cb      	bne.n	80078ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800791c:	f000 fb4a 	bl	8007fb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007920:	4b1c      	ldr	r3, [pc, #112]	; (8007994 <xTaskResumeAll+0x130>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d010      	beq.n	800794e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800792c:	f000 f844 	bl	80079b8 <xTaskIncrementTick>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007936:	4b16      	ldr	r3, [pc, #88]	; (8007990 <xTaskResumeAll+0x12c>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3b01      	subs	r3, #1
 8007940:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f1      	bne.n	800792c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007948:	4b12      	ldr	r3, [pc, #72]	; (8007994 <xTaskResumeAll+0x130>)
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800794e:	4b10      	ldr	r3, [pc, #64]	; (8007990 <xTaskResumeAll+0x12c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007956:	2301      	movs	r3, #1
 8007958:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800795a:	4b0f      	ldr	r3, [pc, #60]	; (8007998 <xTaskResumeAll+0x134>)
 800795c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800796a:	f001 f84b 	bl	8008a04 <vPortExitCritical>

	return xAlreadyYielded;
 800796e:	68bb      	ldr	r3, [r7, #8]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000d58 	.word	0x20000d58
 800797c:	20000d30 	.word	0x20000d30
 8007980:	20000cf0 	.word	0x20000cf0
 8007984:	20000d38 	.word	0x20000d38
 8007988:	20000860 	.word	0x20000860
 800798c:	2000085c 	.word	0x2000085c
 8007990:	20000d44 	.word	0x20000d44
 8007994:	20000d40 	.word	0x20000d40
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079a2:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <xTaskGetTickCount+0x18>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079a8:	687b      	ldr	r3, [r7, #4]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bc80      	pop	{r7}
 80079b2:	4770      	bx	lr
 80079b4:	20000d34 	.word	0x20000d34

080079b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c2:	4b51      	ldr	r3, [pc, #324]	; (8007b08 <xTaskIncrementTick+0x150>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f040 808d 	bne.w	8007ae6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079cc:	4b4f      	ldr	r3, [pc, #316]	; (8007b0c <xTaskIncrementTick+0x154>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3301      	adds	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079d4:	4a4d      	ldr	r2, [pc, #308]	; (8007b0c <xTaskIncrementTick+0x154>)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d11f      	bne.n	8007a20 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80079e0:	4b4b      	ldr	r3, [pc, #300]	; (8007b10 <xTaskIncrementTick+0x158>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <xTaskIncrementTick+0x46>
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	e7fe      	b.n	80079fc <xTaskIncrementTick+0x44>
 80079fe:	4b44      	ldr	r3, [pc, #272]	; (8007b10 <xTaskIncrementTick+0x158>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	4b43      	ldr	r3, [pc, #268]	; (8007b14 <xTaskIncrementTick+0x15c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a41      	ldr	r2, [pc, #260]	; (8007b10 <xTaskIncrementTick+0x158>)
 8007a0a:	6013      	str	r3, [r2, #0]
 8007a0c:	4a41      	ldr	r2, [pc, #260]	; (8007b14 <xTaskIncrementTick+0x15c>)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	4b41      	ldr	r3, [pc, #260]	; (8007b18 <xTaskIncrementTick+0x160>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	4a3f      	ldr	r2, [pc, #252]	; (8007b18 <xTaskIncrementTick+0x160>)
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	f000 faca 	bl	8007fb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a20:	4b3e      	ldr	r3, [pc, #248]	; (8007b1c <xTaskIncrementTick+0x164>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d34e      	bcc.n	8007ac8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a2a:	4b39      	ldr	r3, [pc, #228]	; (8007b10 <xTaskIncrementTick+0x158>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <xTaskIncrementTick+0x80>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <xTaskIncrementTick+0x82>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d004      	beq.n	8007a48 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3e:	4b37      	ldr	r3, [pc, #220]	; (8007b1c <xTaskIncrementTick+0x164>)
 8007a40:	f04f 32ff 	mov.w	r2, #4294967295
 8007a44:	601a      	str	r2, [r3, #0]
					break;
 8007a46:	e03f      	b.n	8007ac8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a48:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <xTaskIncrementTick+0x158>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d203      	bcs.n	8007a68 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a60:	4a2e      	ldr	r2, [pc, #184]	; (8007b1c <xTaskIncrementTick+0x164>)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6013      	str	r3, [r2, #0]
						break;
 8007a66:	e02f      	b.n	8007ac8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7fe ff13 	bl	8006898 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3318      	adds	r3, #24
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe ff0a 	bl	8006898 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a88:	4b25      	ldr	r3, [pc, #148]	; (8007b20 <xTaskIncrementTick+0x168>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d903      	bls.n	8007a98 <xTaskIncrementTick+0xe0>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	4a22      	ldr	r2, [pc, #136]	; (8007b20 <xTaskIncrementTick+0x168>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4a1f      	ldr	r2, [pc, #124]	; (8007b24 <xTaskIncrementTick+0x16c>)
 8007aa6:	441a      	add	r2, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	3304      	adds	r3, #4
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f7fe fe97 	bl	80067e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4b1b      	ldr	r3, [pc, #108]	; (8007b28 <xTaskIncrementTick+0x170>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d3b3      	bcc.n	8007a2a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac6:	e7b0      	b.n	8007a2a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ac8:	4b17      	ldr	r3, [pc, #92]	; (8007b28 <xTaskIncrementTick+0x170>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ace:	4915      	ldr	r1, [pc, #84]	; (8007b24 <xTaskIncrementTick+0x16c>)
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	4413      	add	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	440b      	add	r3, r1
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d907      	bls.n	8007af0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	e004      	b.n	8007af0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <xTaskIncrementTick+0x174>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	4a0f      	ldr	r2, [pc, #60]	; (8007b2c <xTaskIncrementTick+0x174>)
 8007aee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <xTaskIncrementTick+0x178>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d001      	beq.n	8007afc <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007afc:	697b      	ldr	r3, [r7, #20]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000d58 	.word	0x20000d58
 8007b0c:	20000d34 	.word	0x20000d34
 8007b10:	20000ce8 	.word	0x20000ce8
 8007b14:	20000cec 	.word	0x20000cec
 8007b18:	20000d48 	.word	0x20000d48
 8007b1c:	20000d50 	.word	0x20000d50
 8007b20:	20000d38 	.word	0x20000d38
 8007b24:	20000860 	.word	0x20000860
 8007b28:	2000085c 	.word	0x2000085c
 8007b2c:	20000d40 	.word	0x20000d40
 8007b30:	20000d44 	.word	0x20000d44

08007b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b3a:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <vTaskSwitchContext+0xa4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d003      	beq.n	8007b4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b42:	4b26      	ldr	r3, [pc, #152]	; (8007bdc <vTaskSwitchContext+0xa8>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b48:	e040      	b.n	8007bcc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b4a:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <vTaskSwitchContext+0xa8>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b50:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <vTaskSwitchContext+0xac>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e00f      	b.n	8007b78 <vTaskSwitchContext+0x44>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d109      	bne.n	8007b72 <vTaskSwitchContext+0x3e>
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	607b      	str	r3, [r7, #4]
 8007b70:	e7fe      	b.n	8007b70 <vTaskSwitchContext+0x3c>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	491a      	ldr	r1, [pc, #104]	; (8007be4 <vTaskSwitchContext+0xb0>)
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0e5      	beq.n	8007b58 <vTaskSwitchContext+0x24>
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <vTaskSwitchContext+0xb0>)
 8007b98:	4413      	add	r3, r2
 8007b9a:	60bb      	str	r3, [r7, #8]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	685a      	ldr	r2, [r3, #4]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	685a      	ldr	r2, [r3, #4]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	3308      	adds	r3, #8
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d104      	bne.n	8007bbc <vTaskSwitchContext+0x88>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	605a      	str	r2, [r3, #4]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	4a09      	ldr	r2, [pc, #36]	; (8007be8 <vTaskSwitchContext+0xb4>)
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	4a06      	ldr	r2, [pc, #24]	; (8007be0 <vTaskSwitchContext+0xac>)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6013      	str	r3, [r2, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000d58 	.word	0x20000d58
 8007bdc:	20000d44 	.word	0x20000d44
 8007be0:	20000d38 	.word	0x20000d38
 8007be4:	20000860 	.word	0x20000860
 8007be8:	2000085c 	.word	0x2000085c

08007bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <vTaskPlaceOnEventList+0x24>
 8007bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	e7fe      	b.n	8007c0e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c10:	4b07      	ldr	r3, [pc, #28]	; (8007c30 <vTaskPlaceOnEventList+0x44>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3318      	adds	r3, #24
 8007c16:	4619      	mov	r1, r3
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7fe fe05 	bl	8006828 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6838      	ldr	r0, [r7, #0]
 8007c22:	f000 fa75 	bl	8008110 <prvAddCurrentTaskToDelayedList>
}
 8007c26:	bf00      	nop
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	2000085c 	.word	0x2000085c

08007c34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d109      	bne.n	8007c5a <vTaskPlaceOnEventListRestricted+0x26>
 8007c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c4a:	f383 8811 	msr	BASEPRI, r3
 8007c4e:	f3bf 8f6f 	isb	sy
 8007c52:	f3bf 8f4f 	dsb	sy
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e7fe      	b.n	8007c58 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <vTaskPlaceOnEventListRestricted+0x50>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3318      	adds	r3, #24
 8007c60:	4619      	mov	r1, r3
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7fe fdbd 	bl	80067e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d002      	beq.n	8007c74 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	68b8      	ldr	r0, [r7, #8]
 8007c78:	f000 fa4a 	bl	8008110 <prvAddCurrentTaskToDelayedList>
	}
 8007c7c:	bf00      	nop
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	2000085c 	.word	0x2000085c

08007c88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <xTaskRemoveFromEventList+0x2a>
 8007c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e7fe      	b.n	8007cb0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3318      	adds	r3, #24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fdee 	bl	8006898 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <xTaskRemoveFromEventList+0xac>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11d      	bne.n	8007d00 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe fde5 	bl	8006898 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd2:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <xTaskRemoveFromEventList+0xb0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d903      	bls.n	8007ce2 <xTaskRemoveFromEventList+0x5a>
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	4a16      	ldr	r2, [pc, #88]	; (8007d38 <xTaskRemoveFromEventList+0xb0>)
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <xTaskRemoveFromEventList+0xb4>)
 8007cf0:	441a      	add	r2, r3
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fe fd72 	bl	80067e2 <vListInsertEnd>
 8007cfe:	e005      	b.n	8007d0c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	3318      	adds	r3, #24
 8007d04:	4619      	mov	r1, r3
 8007d06:	480e      	ldr	r0, [pc, #56]	; (8007d40 <xTaskRemoveFromEventList+0xb8>)
 8007d08:	f7fe fd6b 	bl	80067e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b0c      	ldr	r3, [pc, #48]	; (8007d44 <xTaskRemoveFromEventList+0xbc>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d905      	bls.n	8007d26 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d1e:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <xTaskRemoveFromEventList+0xc0>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e001      	b.n	8007d2a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d2a:	697b      	ldr	r3, [r7, #20]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000d58 	.word	0x20000d58
 8007d38:	20000d38 	.word	0x20000d38
 8007d3c:	20000860 	.word	0x20000860
 8007d40:	20000cf0 	.word	0x20000cf0
 8007d44:	2000085c 	.word	0x2000085c
 8007d48:	20000d44 	.word	0x20000d44

08007d4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <vTaskInternalSetTimeOutState+0x24>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <vTaskInternalSetTimeOutState+0x28>)
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bc80      	pop	{r7}
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	20000d48 	.word	0x20000d48
 8007d74:	20000d34 	.word	0x20000d34

08007d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d109      	bne.n	8007d9c <xTaskCheckForTimeOut+0x24>
 8007d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8c:	f383 8811 	msr	BASEPRI, r3
 8007d90:	f3bf 8f6f 	isb	sy
 8007d94:	f3bf 8f4f 	dsb	sy
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	e7fe      	b.n	8007d9a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <xTaskCheckForTimeOut+0x3e>
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e7fe      	b.n	8007db4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007db6:	f000 fdf7 	bl	80089a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007dba:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <xTaskCheckForTimeOut+0xb8>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	1ad3      	subs	r3, r2, r3
 8007dc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d102      	bne.n	8007dda <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	e023      	b.n	8007e22 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <xTaskCheckForTimeOut+0xbc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d007      	beq.n	8007df6 <xTaskCheckForTimeOut+0x7e>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d302      	bcc.n	8007df6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	e015      	b.n	8007e22 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d20b      	bcs.n	8007e18 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	1ad2      	subs	r2, r2, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff ff9d 	bl	8007d4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	61fb      	str	r3, [r7, #28]
 8007e16:	e004      	b.n	8007e22 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e22:	f000 fdef 	bl	8008a04 <vPortExitCritical>

	return xReturn;
 8007e26:	69fb      	ldr	r3, [r7, #28]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3720      	adds	r7, #32
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000d34 	.word	0x20000d34
 8007e34:	20000d48 	.word	0x20000d48

08007e38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e3c:	4b03      	ldr	r3, [pc, #12]	; (8007e4c <vTaskMissedYield+0x14>)
 8007e3e:	2201      	movs	r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
}
 8007e42:	bf00      	nop
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	20000d44 	.word	0x20000d44

08007e50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e58:	f000 f852 	bl	8007f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <prvIdleTask+0x28>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d9f9      	bls.n	8007e58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <prvIdleTask+0x2c>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e74:	e7f0      	b.n	8007e58 <prvIdleTask+0x8>
 8007e76:	bf00      	nop
 8007e78:	20000860 	.word	0x20000860
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e86:	2300      	movs	r3, #0
 8007e88:	607b      	str	r3, [r7, #4]
 8007e8a:	e00c      	b.n	8007ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4a12      	ldr	r2, [pc, #72]	; (8007ee0 <prvInitialiseTaskLists+0x60>)
 8007e98:	4413      	add	r3, r2
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe fc76 	bl	800678c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	607b      	str	r3, [r7, #4]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b37      	cmp	r3, #55	; 0x37
 8007eaa:	d9ef      	bls.n	8007e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007eac:	480d      	ldr	r0, [pc, #52]	; (8007ee4 <prvInitialiseTaskLists+0x64>)
 8007eae:	f7fe fc6d 	bl	800678c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eb2:	480d      	ldr	r0, [pc, #52]	; (8007ee8 <prvInitialiseTaskLists+0x68>)
 8007eb4:	f7fe fc6a 	bl	800678c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007eb8:	480c      	ldr	r0, [pc, #48]	; (8007eec <prvInitialiseTaskLists+0x6c>)
 8007eba:	f7fe fc67 	bl	800678c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ebe:	480c      	ldr	r0, [pc, #48]	; (8007ef0 <prvInitialiseTaskLists+0x70>)
 8007ec0:	f7fe fc64 	bl	800678c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ec4:	480b      	ldr	r0, [pc, #44]	; (8007ef4 <prvInitialiseTaskLists+0x74>)
 8007ec6:	f7fe fc61 	bl	800678c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007eca:	4b0b      	ldr	r3, [pc, #44]	; (8007ef8 <prvInitialiseTaskLists+0x78>)
 8007ecc:	4a05      	ldr	r2, [pc, #20]	; (8007ee4 <prvInitialiseTaskLists+0x64>)
 8007ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ed0:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <prvInitialiseTaskLists+0x7c>)
 8007ed2:	4a05      	ldr	r2, [pc, #20]	; (8007ee8 <prvInitialiseTaskLists+0x68>)
 8007ed4:	601a      	str	r2, [r3, #0]
}
 8007ed6:	bf00      	nop
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000860 	.word	0x20000860
 8007ee4:	20000cc0 	.word	0x20000cc0
 8007ee8:	20000cd4 	.word	0x20000cd4
 8007eec:	20000cf0 	.word	0x20000cf0
 8007ef0:	20000d04 	.word	0x20000d04
 8007ef4:	20000d1c 	.word	0x20000d1c
 8007ef8:	20000ce8 	.word	0x20000ce8
 8007efc:	20000cec 	.word	0x20000cec

08007f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f06:	e019      	b.n	8007f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f08:	f000 fd4e 	bl	80089a8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <prvCheckTasksWaitingTermination+0x4c>)
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3304      	adds	r3, #4
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fe fcbd 	bl	8006898 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f1e:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <prvCheckTasksWaitingTermination+0x50>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <prvCheckTasksWaitingTermination+0x50>)
 8007f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <prvCheckTasksWaitingTermination+0x54>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	4a09      	ldr	r2, [pc, #36]	; (8007f54 <prvCheckTasksWaitingTermination+0x54>)
 8007f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f32:	f000 fd67 	bl	8008a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f80e 	bl	8007f58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <prvCheckTasksWaitingTermination+0x54>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e1      	bne.n	8007f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f44:	bf00      	nop
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20000d04 	.word	0x20000d04
 8007f50:	20000d30 	.word	0x20000d30
 8007f54:	20000d18 	.word	0x20000d18

08007f58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d108      	bne.n	8007f7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fed2 	bl	8008d18 <vPortFree>
				vPortFree( pxTCB );
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fecf 	bl	8008d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f7a:	e017      	b.n	8007fac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d103      	bne.n	8007f8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fec6 	bl	8008d18 <vPortFree>
	}
 8007f8c:	e00e      	b.n	8007fac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d009      	beq.n	8007fac <prvDeleteTCB+0x54>
 8007f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
 8007faa:	e7fe      	b.n	8007faa <prvDeleteTCB+0x52>
	}
 8007fac:	bf00      	nop
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <prvResetNextTaskUnblockTime+0x40>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <prvResetNextTaskUnblockTime+0x14>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e000      	b.n	8007fca <prvResetNextTaskUnblockTime+0x16>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <prvResetNextTaskUnblockTime+0x44>)
 8007fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fd6:	e008      	b.n	8007fea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <prvResetNextTaskUnblockTime+0x40>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4a04      	ldr	r2, [pc, #16]	; (8007ff8 <prvResetNextTaskUnblockTime+0x44>)
 8007fe8:	6013      	str	r3, [r2, #0]
}
 8007fea:	bf00      	nop
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bc80      	pop	{r7}
 8007ff2:	4770      	bx	lr
 8007ff4:	20000ce8 	.word	0x20000ce8
 8007ff8:	20000d50 	.word	0x20000d50

08007ffc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <xTaskGetSchedulerState+0x34>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d102      	bne.n	8008010 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800800a:	2301      	movs	r3, #1
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	e008      	b.n	8008022 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008010:	4b08      	ldr	r3, [pc, #32]	; (8008034 <xTaskGetSchedulerState+0x38>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008018:	2302      	movs	r3, #2
 800801a:	607b      	str	r3, [r7, #4]
 800801c:	e001      	b.n	8008022 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800801e:	2300      	movs	r3, #0
 8008020:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008022:	687b      	ldr	r3, [r7, #4]
	}
 8008024:	4618      	mov	r0, r3
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000d3c 	.word	0x20000d3c
 8008034:	20000d58 	.word	0x20000d58

08008038 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d054      	beq.n	80080f8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800804e:	4b2d      	ldr	r3, [pc, #180]	; (8008104 <xTaskPriorityDisinherit+0xcc>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d009      	beq.n	800806c <xTaskPriorityDisinherit+0x34>
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	60fb      	str	r3, [r7, #12]
 800806a:	e7fe      	b.n	800806a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008070:	2b00      	cmp	r3, #0
 8008072:	d109      	bne.n	8008088 <xTaskPriorityDisinherit+0x50>
 8008074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	60bb      	str	r3, [r7, #8]
 8008086:	e7fe      	b.n	8008086 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808c:	1e5a      	subs	r2, r3, #1
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800809a:	429a      	cmp	r2, r3
 800809c:	d02c      	beq.n	80080f8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d128      	bne.n	80080f8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe fbf4 	bl	8006898 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c8:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <xTaskPriorityDisinherit+0xd0>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d903      	bls.n	80080d8 <xTaskPriorityDisinherit+0xa0>
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4a0c      	ldr	r2, [pc, #48]	; (8008108 <xTaskPriorityDisinherit+0xd0>)
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4a09      	ldr	r2, [pc, #36]	; (800810c <xTaskPriorityDisinherit+0xd4>)
 80080e6:	441a      	add	r2, r3
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fb77 	bl	80067e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080f4:	2301      	movs	r3, #1
 80080f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080f8:	697b      	ldr	r3, [r7, #20]
	}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	2000085c 	.word	0x2000085c
 8008108:	20000d38 	.word	0x20000d38
 800810c:	20000860 	.word	0x20000860

08008110 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800811a:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008120:	4b20      	ldr	r3, [pc, #128]	; (80081a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fbb6 	bl	8006898 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d10a      	bne.n	800814a <prvAddCurrentTaskToDelayedList+0x3a>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4819      	ldr	r0, [pc, #100]	; (80081a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008144:	f7fe fb4d 	bl	80067e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008148:	e026      	b.n	8008198 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4413      	add	r3, r2
 8008150:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008152:	4b14      	ldr	r3, [pc, #80]	; (80081a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	429a      	cmp	r2, r3
 8008160:	d209      	bcs.n	8008176 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4b0f      	ldr	r3, [pc, #60]	; (80081a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3304      	adds	r3, #4
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f7fe fb5a 	bl	8006828 <vListInsert>
}
 8008174:	e010      	b.n	8008198 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008176:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	3304      	adds	r3, #4
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fe fb50 	bl	8006828 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008188:	4b0a      	ldr	r3, [pc, #40]	; (80081b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	429a      	cmp	r2, r3
 8008190:	d202      	bcs.n	8008198 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008192:	4a08      	ldr	r2, [pc, #32]	; (80081b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6013      	str	r3, [r2, #0]
}
 8008198:	bf00      	nop
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000d34 	.word	0x20000d34
 80081a4:	2000085c 	.word	0x2000085c
 80081a8:	20000d1c 	.word	0x20000d1c
 80081ac:	20000cec 	.word	0x20000cec
 80081b0:	20000ce8 	.word	0x20000ce8
 80081b4:	20000d50 	.word	0x20000d50

080081b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08a      	sub	sp, #40	; 0x28
 80081bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081c2:	f000 fac3 	bl	800874c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081c6:	4b1c      	ldr	r3, [pc, #112]	; (8008238 <xTimerCreateTimerTask+0x80>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d021      	beq.n	8008212 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081d6:	1d3a      	adds	r2, r7, #4
 80081d8:	f107 0108 	add.w	r1, r7, #8
 80081dc:	f107 030c 	add.w	r3, r7, #12
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fe fab9 	bl	8006758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	9202      	str	r2, [sp, #8]
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	2302      	movs	r3, #2
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	460a      	mov	r2, r1
 80081f8:	4910      	ldr	r1, [pc, #64]	; (800823c <xTimerCreateTimerTask+0x84>)
 80081fa:	4811      	ldr	r0, [pc, #68]	; (8008240 <xTimerCreateTimerTask+0x88>)
 80081fc:	f7ff f886 	bl	800730c <xTaskCreateStatic>
 8008200:	4602      	mov	r2, r0
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <xTimerCreateTimerTask+0x8c>)
 8008204:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008206:	4b0f      	ldr	r3, [pc, #60]	; (8008244 <xTimerCreateTimerTask+0x8c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800820e:	2301      	movs	r3, #1
 8008210:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d109      	bne.n	800822c <xTimerCreateTimerTask+0x74>
 8008218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	e7fe      	b.n	800822a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800822c:	697b      	ldr	r3, [r7, #20]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000d8c 	.word	0x20000d8c
 800823c:	080099fc 	.word	0x080099fc
 8008240:	08008361 	.word	0x08008361
 8008244:	20000d90 	.word	0x20000d90

08008248 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	; 0x28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008256:	2300      	movs	r3, #0
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <xTimerGenericCommand+0x2c>
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	e7fe      	b.n	8008272 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008274:	4b19      	ldr	r3, [pc, #100]	; (80082dc <xTimerGenericCommand+0x94>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d02a      	beq.n	80082d2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b05      	cmp	r3, #5
 800828c:	dc18      	bgt.n	80082c0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800828e:	f7ff feb5 	bl	8007ffc <xTaskGetSchedulerState>
 8008292:	4603      	mov	r3, r0
 8008294:	2b02      	cmp	r3, #2
 8008296:	d109      	bne.n	80082ac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008298:	4b10      	ldr	r3, [pc, #64]	; (80082dc <xTimerGenericCommand+0x94>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	f107 0110 	add.w	r1, r7, #16
 80082a0:	2300      	movs	r3, #0
 80082a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a4:	f7fe fc5c 	bl	8006b60 <xQueueGenericSend>
 80082a8:	6278      	str	r0, [r7, #36]	; 0x24
 80082aa:	e012      	b.n	80082d2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80082ac:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <xTimerGenericCommand+0x94>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	f107 0110 	add.w	r1, r7, #16
 80082b4:	2300      	movs	r3, #0
 80082b6:	2200      	movs	r2, #0
 80082b8:	f7fe fc52 	bl	8006b60 <xQueueGenericSend>
 80082bc:	6278      	str	r0, [r7, #36]	; 0x24
 80082be:	e008      	b.n	80082d2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <xTimerGenericCommand+0x94>)
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	f107 0110 	add.w	r1, r7, #16
 80082c8:	2300      	movs	r3, #0
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	f7fe fd42 	bl	8006d54 <xQueueGenericSendFromISR>
 80082d0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3728      	adds	r7, #40	; 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	20000d8c 	.word	0x20000d8c

080082e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af02      	add	r7, sp, #8
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082ea:	4b1c      	ldr	r3, [pc, #112]	; (800835c <prvProcessExpiredTimer+0x7c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fe facd 	bl	8006898 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d121      	bne.n	800834a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	18d1      	adds	r1, r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	683a      	ldr	r2, [r7, #0]
 8008312:	6978      	ldr	r0, [r7, #20]
 8008314:	f000 f8c8 	bl	80084a8 <prvInsertTimerInActiveList>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d015      	beq.n	800834a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800831e:	2300      	movs	r3, #0
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	2100      	movs	r1, #0
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f7ff ff8d 	bl	8008248 <xTimerGenericCommand>
 800832e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <prvProcessExpiredTimer+0x6a>
 8008336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e7fe      	b.n	8008348 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	6978      	ldr	r0, [r7, #20]
 8008350:	4798      	blx	r3
}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000d84 	.word	0x20000d84

08008360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008368:	f107 0308 	add.w	r3, r7, #8
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f857 	bl	8008420 <prvGetNextExpireTime>
 8008372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4619      	mov	r1, r3
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f803 	bl	8008384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800837e:	f000 f8d5 	bl	800852c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008382:	e7f1      	b.n	8008368 <prvTimerTask+0x8>

08008384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800838e:	f7ff fa5b 	bl	8007848 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008392:	f107 0308 	add.w	r3, r7, #8
 8008396:	4618      	mov	r0, r3
 8008398:	f000 f866 	bl	8008468 <prvSampleTimeNow>
 800839c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d130      	bne.n	8008406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <prvProcessTimerOrBlockTask+0x3c>
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d806      	bhi.n	80083c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083b2:	f7ff fa57 	bl	8007864 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083b6:	68f9      	ldr	r1, [r7, #12]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7ff ff91 	bl	80082e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083be:	e024      	b.n	800840a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083c6:	4b13      	ldr	r3, [pc, #76]	; (8008414 <prvProcessTimerOrBlockTask+0x90>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083d8:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <prvProcessTimerOrBlockTask+0x94>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4619      	mov	r1, r3
 80083e6:	f7fe ff5d 	bl	80072a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083ea:	f7ff fa3b 	bl	8007864 <xTaskResumeAll>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <prvProcessTimerOrBlockTask+0x98>)
 80083f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	f3bf 8f4f 	dsb	sy
 8008400:	f3bf 8f6f 	isb	sy
}
 8008404:	e001      	b.n	800840a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008406:	f7ff fa2d 	bl	8007864 <xTaskResumeAll>
}
 800840a:	bf00      	nop
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	20000d88 	.word	0x20000d88
 8008418:	20000d8c 	.word	0x20000d8c
 800841c:	e000ed04 	.word	0xe000ed04

08008420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008428:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <prvGetNextExpireTime+0x44>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	bf0c      	ite	eq
 8008432:	2301      	moveq	r3, #1
 8008434:	2300      	movne	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d105      	bne.n	8008452 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008446:	4b07      	ldr	r3, [pc, #28]	; (8008464 <prvGetNextExpireTime+0x44>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	e001      	b.n	8008456 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008452:	2300      	movs	r3, #0
 8008454:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008456:	68fb      	ldr	r3, [r7, #12]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	20000d84 	.word	0x20000d84

08008468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008470:	f7ff fa94 	bl	800799c <xTaskGetTickCount>
 8008474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008476:	4b0b      	ldr	r3, [pc, #44]	; (80084a4 <prvSampleTimeNow+0x3c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	429a      	cmp	r2, r3
 800847e:	d205      	bcs.n	800848c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008480:	f000 f904 	bl	800868c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e002      	b.n	8008492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008492:	4a04      	ldr	r2, [pc, #16]	; (80084a4 <prvSampleTimeNow+0x3c>)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008498:	68fb      	ldr	r3, [r7, #12]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20000d94 	.word	0x20000d94

080084a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d812      	bhi.n	80084f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d302      	bcc.n	80084e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084dc:	2301      	movs	r3, #1
 80084de:	617b      	str	r3, [r7, #20]
 80084e0:	e01b      	b.n	800851a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <prvInsertTimerInActiveList+0x7c>)
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f7fe f99b 	bl	8006828 <vListInsert>
 80084f2:	e012      	b.n	800851a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d206      	bcs.n	800850a <prvInsertTimerInActiveList+0x62>
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d302      	bcc.n	800850a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008504:	2301      	movs	r3, #1
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	e007      	b.n	800851a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800850a:	4b07      	ldr	r3, [pc, #28]	; (8008528 <prvInsertTimerInActiveList+0x80>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3304      	adds	r3, #4
 8008512:	4619      	mov	r1, r3
 8008514:	4610      	mov	r0, r2
 8008516:	f7fe f987 	bl	8006828 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800851a:	697b      	ldr	r3, [r7, #20]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000d88 	.word	0x20000d88
 8008528:	20000d84 	.word	0x20000d84

0800852c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08e      	sub	sp, #56	; 0x38
 8008530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008532:	e099      	b.n	8008668 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	da17      	bge.n	800856a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	3304      	adds	r3, #4
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <prvProcessReceivedCommands+0x2e>
 8008546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	e7fe      	b.n	8008558 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008560:	6850      	ldr	r0, [r2, #4]
 8008562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008564:	6892      	ldr	r2, [r2, #8]
 8008566:	4611      	mov	r1, r2
 8008568:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	db7a      	blt.n	8008666 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	3304      	adds	r3, #4
 8008580:	4618      	mov	r0, r3
 8008582:	f7fe f989 	bl	8006898 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008586:	463b      	mov	r3, r7
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff ff6d 	bl	8008468 <prvSampleTimeNow>
 800858e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b09      	cmp	r3, #9
 8008594:	d868      	bhi.n	8008668 <prvProcessReceivedCommands+0x13c>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <prvProcessReceivedCommands+0x70>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085c5 	.word	0x080085c5
 80085a0:	080085c5 	.word	0x080085c5
 80085a4:	080085c5 	.word	0x080085c5
 80085a8:	08008669 	.word	0x08008669
 80085ac:	0800861f 	.word	0x0800861f
 80085b0:	08008655 	.word	0x08008655
 80085b4:	080085c5 	.word	0x080085c5
 80085b8:	080085c5 	.word	0x080085c5
 80085bc:	08008669 	.word	0x08008669
 80085c0:	0800861f 	.word	0x0800861f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	18d1      	adds	r1, r2, r3
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d2:	f7ff ff69 	bl	80084a8 <prvInsertTimerInActiveList>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d045      	beq.n	8008668 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d13d      	bne.n	8008668 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	441a      	add	r2, r3
 80085f4:	2300      	movs	r3, #0
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	2300      	movs	r3, #0
 80085fa:	2100      	movs	r1, #0
 80085fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085fe:	f7ff fe23 	bl	8008248 <xTimerGenericCommand>
 8008602:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d12e      	bne.n	8008668 <prvProcessReceivedCommands+0x13c>
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e7fe      	b.n	800861c <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d109      	bne.n	8008640 <prvProcessReceivedCommands+0x114>
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e7fe      	b.n	800863e <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	18d1      	adds	r1, r2, r3
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800864c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864e:	f7ff ff2b 	bl	80084a8 <prvInsertTimerInActiveList>
					break;
 8008652:	e009      	b.n	8008668 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800865e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008660:	f000 fb5a 	bl	8008d18 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008664:	e000      	b.n	8008668 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008666:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008668:	4b07      	ldr	r3, [pc, #28]	; (8008688 <prvProcessReceivedCommands+0x15c>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	1d39      	adds	r1, r7, #4
 800866e:	2200      	movs	r2, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f7fe fc03 	bl	8006e7c <xQueueReceive>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	f47f af5b 	bne.w	8008534 <prvProcessReceivedCommands+0x8>
	}
}
 800867e:	bf00      	nop
 8008680:	3730      	adds	r7, #48	; 0x30
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20000d8c 	.word	0x20000d8c

0800868c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008692:	e044      	b.n	800871e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008694:	4b2b      	ldr	r3, [pc, #172]	; (8008744 <prvSwitchTimerLists+0xb8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800869e:	4b29      	ldr	r3, [pc, #164]	; (8008744 <prvSwitchTimerLists+0xb8>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe f8f3 	bl	8006898 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d12d      	bne.n	800871e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4413      	add	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d90e      	bls.n	80086f2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086e0:	4b18      	ldr	r3, [pc, #96]	; (8008744 <prvSwitchTimerLists+0xb8>)
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3304      	adds	r3, #4
 80086e8:	4619      	mov	r1, r3
 80086ea:	4610      	mov	r0, r2
 80086ec:	f7fe f89c 	bl	8006828 <vListInsert>
 80086f0:	e015      	b.n	800871e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086f2:	2300      	movs	r3, #0
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	2300      	movs	r3, #0
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	2100      	movs	r1, #0
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f7ff fda3 	bl	8008248 <xTimerGenericCommand>
 8008702:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <prvSwitchTimerLists+0x92>
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	e7fe      	b.n	800871c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <prvSwitchTimerLists+0xb8>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1b5      	bne.n	8008694 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008728:	4b06      	ldr	r3, [pc, #24]	; (8008744 <prvSwitchTimerLists+0xb8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800872e:	4b06      	ldr	r3, [pc, #24]	; (8008748 <prvSwitchTimerLists+0xbc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a04      	ldr	r2, [pc, #16]	; (8008744 <prvSwitchTimerLists+0xb8>)
 8008734:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008736:	4a04      	ldr	r2, [pc, #16]	; (8008748 <prvSwitchTimerLists+0xbc>)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	6013      	str	r3, [r2, #0]
}
 800873c:	bf00      	nop
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	20000d84 	.word	0x20000d84
 8008748:	20000d88 	.word	0x20000d88

0800874c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b082      	sub	sp, #8
 8008750:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008752:	f000 f929 	bl	80089a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008756:	4b15      	ldr	r3, [pc, #84]	; (80087ac <prvCheckForValidListAndQueue+0x60>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d120      	bne.n	80087a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800875e:	4814      	ldr	r0, [pc, #80]	; (80087b0 <prvCheckForValidListAndQueue+0x64>)
 8008760:	f7fe f814 	bl	800678c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008764:	4813      	ldr	r0, [pc, #76]	; (80087b4 <prvCheckForValidListAndQueue+0x68>)
 8008766:	f7fe f811 	bl	800678c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800876a:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <prvCheckForValidListAndQueue+0x6c>)
 800876c:	4a10      	ldr	r2, [pc, #64]	; (80087b0 <prvCheckForValidListAndQueue+0x64>)
 800876e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008770:	4b12      	ldr	r3, [pc, #72]	; (80087bc <prvCheckForValidListAndQueue+0x70>)
 8008772:	4a10      	ldr	r2, [pc, #64]	; (80087b4 <prvCheckForValidListAndQueue+0x68>)
 8008774:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008776:	2300      	movs	r3, #0
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	4b11      	ldr	r3, [pc, #68]	; (80087c0 <prvCheckForValidListAndQueue+0x74>)
 800877c:	4a11      	ldr	r2, [pc, #68]	; (80087c4 <prvCheckForValidListAndQueue+0x78>)
 800877e:	2110      	movs	r1, #16
 8008780:	200a      	movs	r0, #10
 8008782:	f7fe f91b 	bl	80069bc <xQueueGenericCreateStatic>
 8008786:	4602      	mov	r2, r0
 8008788:	4b08      	ldr	r3, [pc, #32]	; (80087ac <prvCheckForValidListAndQueue+0x60>)
 800878a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800878c:	4b07      	ldr	r3, [pc, #28]	; (80087ac <prvCheckForValidListAndQueue+0x60>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008794:	4b05      	ldr	r3, [pc, #20]	; (80087ac <prvCheckForValidListAndQueue+0x60>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	490b      	ldr	r1, [pc, #44]	; (80087c8 <prvCheckForValidListAndQueue+0x7c>)
 800879a:	4618      	mov	r0, r3
 800879c:	f7fe fd5a 	bl	8007254 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087a0:	f000 f930 	bl	8008a04 <vPortExitCritical>
}
 80087a4:	bf00      	nop
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	20000d8c 	.word	0x20000d8c
 80087b0:	20000d5c 	.word	0x20000d5c
 80087b4:	20000d70 	.word	0x20000d70
 80087b8:	20000d84 	.word	0x20000d84
 80087bc:	20000d88 	.word	0x20000d88
 80087c0:	20000e38 	.word	0x20000e38
 80087c4:	20000d98 	.word	0x20000d98
 80087c8:	08009a04 	.word	0x08009a04

080087cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3b04      	subs	r3, #4
 80087dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	3b04      	subs	r3, #4
 80087ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3b04      	subs	r3, #4
 80087fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087fc:	4a08      	ldr	r2, [pc, #32]	; (8008820 <pxPortInitialiseStack+0x54>)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	3b14      	subs	r3, #20
 8008806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3b20      	subs	r3, #32
 8008812:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008814:	68fb      	ldr	r3, [r7, #12]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr
 8008820:	08008825 	.word	0x08008825

08008824 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800882a:	2300      	movs	r3, #0
 800882c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800882e:	4b10      	ldr	r3, [pc, #64]	; (8008870 <prvTaskExitError+0x4c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008836:	d009      	beq.n	800884c <prvTaskExitError+0x28>
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	e7fe      	b.n	800884a <prvTaskExitError+0x26>
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800885e:	bf00      	nop
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d0fc      	beq.n	8008860 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr
 8008870:	2000011c 	.word	0x2000011c
	...

08008880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008880:	4b07      	ldr	r3, [pc, #28]	; (80088a0 <pxCurrentTCBConst2>)
 8008882:	6819      	ldr	r1, [r3, #0]
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800888a:	f380 8809 	msr	PSP, r0
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f04f 0000 	mov.w	r0, #0
 8008896:	f380 8811 	msr	BASEPRI, r0
 800889a:	f04e 0e0d 	orr.w	lr, lr, #13
 800889e:	4770      	bx	lr

080088a0 <pxCurrentTCBConst2>:
 80088a0:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop

080088a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80088a8:	4806      	ldr	r0, [pc, #24]	; (80088c4 <prvPortStartFirstTask+0x1c>)
 80088aa:	6800      	ldr	r0, [r0, #0]
 80088ac:	6800      	ldr	r0, [r0, #0]
 80088ae:	f380 8808 	msr	MSP, r0
 80088b2:	b662      	cpsie	i
 80088b4:	b661      	cpsie	f
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	df00      	svc	0
 80088c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088c2:	bf00      	nop
 80088c4:	e000ed08 	.word	0xe000ed08

080088c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088ce:	4b31      	ldr	r3, [pc, #196]	; (8008994 <xPortStartScheduler+0xcc>)
 80088d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	22ff      	movs	r2, #255	; 0xff
 80088de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <xPortStartScheduler+0xd0>)
 80088f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088f6:	4b29      	ldr	r3, [pc, #164]	; (800899c <xPortStartScheduler+0xd4>)
 80088f8:	2207      	movs	r2, #7
 80088fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088fc:	e009      	b.n	8008912 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80088fe:	4b27      	ldr	r3, [pc, #156]	; (800899c <xPortStartScheduler+0xd4>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3b01      	subs	r3, #1
 8008904:	4a25      	ldr	r2, [pc, #148]	; (800899c <xPortStartScheduler+0xd4>)
 8008906:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008908:	78fb      	ldrb	r3, [r7, #3]
 800890a:	b2db      	uxtb	r3, r3
 800890c:	005b      	lsls	r3, r3, #1
 800890e:	b2db      	uxtb	r3, r3
 8008910:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b80      	cmp	r3, #128	; 0x80
 800891c:	d0ef      	beq.n	80088fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800891e:	4b1f      	ldr	r3, [pc, #124]	; (800899c <xPortStartScheduler+0xd4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f1c3 0307 	rsb	r3, r3, #7
 8008926:	2b04      	cmp	r3, #4
 8008928:	d009      	beq.n	800893e <xPortStartScheduler+0x76>
 800892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892e:	f383 8811 	msr	BASEPRI, r3
 8008932:	f3bf 8f6f 	isb	sy
 8008936:	f3bf 8f4f 	dsb	sy
 800893a:	60bb      	str	r3, [r7, #8]
 800893c:	e7fe      	b.n	800893c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800893e:	4b17      	ldr	r3, [pc, #92]	; (800899c <xPortStartScheduler+0xd4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <xPortStartScheduler+0xd4>)
 8008946:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008948:	4b14      	ldr	r3, [pc, #80]	; (800899c <xPortStartScheduler+0xd4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008950:	4a12      	ldr	r2, [pc, #72]	; (800899c <xPortStartScheduler+0xd4>)
 8008952:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	b2da      	uxtb	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800895c:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <xPortStartScheduler+0xd8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a0f      	ldr	r2, [pc, #60]	; (80089a0 <xPortStartScheduler+0xd8>)
 8008962:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008966:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008968:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <xPortStartScheduler+0xd8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a0c      	ldr	r2, [pc, #48]	; (80089a0 <xPortStartScheduler+0xd8>)
 800896e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008972:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008974:	f000 f8b0 	bl	8008ad8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <xPortStartScheduler+0xdc>)
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800897e:	f7ff ff93 	bl	80088a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008982:	f7ff f8d7 	bl	8007b34 <vTaskSwitchContext>
	prvTaskExitError();
 8008986:	f7ff ff4d 	bl	8008824 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	e000e400 	.word	0xe000e400
 8008998:	20000e88 	.word	0x20000e88
 800899c:	20000e8c 	.word	0x20000e8c
 80089a0:	e000ed20 	.word	0xe000ed20
 80089a4:	2000011c 	.word	0x2000011c

080089a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089c0:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <vPortEnterCritical+0x54>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	4a0d      	ldr	r2, [pc, #52]	; (80089fc <vPortEnterCritical+0x54>)
 80089c8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089ca:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <vPortEnterCritical+0x54>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d10e      	bne.n	80089f0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089d2:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <vPortEnterCritical+0x58>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <vPortEnterCritical+0x48>
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	603b      	str	r3, [r7, #0]
 80089ee:	e7fe      	b.n	80089ee <vPortEnterCritical+0x46>
	}
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bc80      	pop	{r7}
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	2000011c 	.word	0x2000011c
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a0a:	4b10      	ldr	r3, [pc, #64]	; (8008a4c <vPortExitCritical+0x48>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <vPortExitCritical+0x22>
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e7fe      	b.n	8008a24 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008a26:	4b09      	ldr	r3, [pc, #36]	; (8008a4c <vPortExitCritical+0x48>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	4a07      	ldr	r2, [pc, #28]	; (8008a4c <vPortExitCritical+0x48>)
 8008a2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a30:	4b06      	ldr	r3, [pc, #24]	; (8008a4c <vPortExitCritical+0x48>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d104      	bne.n	8008a42 <vPortExitCritical+0x3e>
 8008a38:	2300      	movs	r3, #0
 8008a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr
 8008a4c:	2000011c 	.word	0x2000011c

08008a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a50:	f3ef 8009 	mrs	r0, PSP
 8008a54:	f3bf 8f6f 	isb	sy
 8008a58:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <pxCurrentTCBConst>)
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a60:	6010      	str	r0, [r2, #0]
 8008a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a6a:	f380 8811 	msr	BASEPRI, r0
 8008a6e:	f7ff f861 	bl	8007b34 <vTaskSwitchContext>
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008a7e:	6819      	ldr	r1, [r3, #0]
 8008a80:	6808      	ldr	r0, [r1, #0]
 8008a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a86:	f380 8809 	msr	PSP, r0
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	4770      	bx	lr

08008a90 <pxCurrentTCBConst>:
 8008a90:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop

08008a98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ab0:	f7fe ff82 	bl	80079b8 <xTaskIncrementTick>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aba:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <xPortSysTickHandler+0x3c>)
 8008abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008acc:	bf00      	nop
 8008ace:	3708      	adds	r7, #8
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	e000ed04 	.word	0xe000ed04

08008ad8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	; (8008b08 <vPortSetupTimerInterrupt+0x30>)
 8008ade:	2200      	movs	r2, #0
 8008ae0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <vPortSetupTimerInterrupt+0x34>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ae8:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <vPortSetupTimerInterrupt+0x38>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a09      	ldr	r2, [pc, #36]	; (8008b14 <vPortSetupTimerInterrupt+0x3c>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	099b      	lsrs	r3, r3, #6
 8008af4:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <vPortSetupTimerInterrupt+0x40>)
 8008af6:	3b01      	subs	r3, #1
 8008af8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008afa:	4b03      	ldr	r3, [pc, #12]	; (8008b08 <vPortSetupTimerInterrupt+0x30>)
 8008afc:	2207      	movs	r2, #7
 8008afe:	601a      	str	r2, [r3, #0]
}
 8008b00:	bf00      	nop
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr
 8008b08:	e000e010 	.word	0xe000e010
 8008b0c:	e000e018 	.word	0xe000e018
 8008b10:	20000000 	.word	0x20000000
 8008b14:	10624dd3 	.word	0x10624dd3
 8008b18:	e000e014 	.word	0xe000e014

08008b1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b22:	f3ef 8305 	mrs	r3, IPSR
 8008b26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b0f      	cmp	r3, #15
 8008b2c:	d913      	bls.n	8008b56 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b2e:	4a15      	ldr	r2, [pc, #84]	; (8008b84 <vPortValidateInterruptPriority+0x68>)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b38:	4b13      	ldr	r3, [pc, #76]	; (8008b88 <vPortValidateInterruptPriority+0x6c>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	7afa      	ldrb	r2, [r7, #11]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d209      	bcs.n	8008b56 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	e7fe      	b.n	8008b54 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b56:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <vPortValidateInterruptPriority+0x70>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <vPortValidateInterruptPriority+0x74>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d909      	bls.n	8008b7a <vPortValidateInterruptPriority+0x5e>
 8008b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	603b      	str	r3, [r7, #0]
 8008b78:	e7fe      	b.n	8008b78 <vPortValidateInterruptPriority+0x5c>
	}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr
 8008b84:	e000e3f0 	.word	0xe000e3f0
 8008b88:	20000e88 	.word	0x20000e88
 8008b8c:	e000ed0c 	.word	0xe000ed0c
 8008b90:	20000e8c 	.word	0x20000e8c

08008b94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08a      	sub	sp, #40	; 0x28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ba0:	f7fe fe52 	bl	8007848 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ba4:	4b57      	ldr	r3, [pc, #348]	; (8008d04 <pvPortMalloc+0x170>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bac:	f000 f90c 	bl	8008dc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bb0:	4b55      	ldr	r3, [pc, #340]	; (8008d08 <pvPortMalloc+0x174>)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f040 808c 	bne.w	8008cd6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01c      	beq.n	8008bfe <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008bc4:	2208      	movs	r2, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4413      	add	r3, r2
 8008bca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d013      	beq.n	8008bfe <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f023 0307 	bic.w	r3, r3, #7
 8008bdc:	3308      	adds	r3, #8
 8008bde:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d009      	beq.n	8008bfe <pvPortMalloc+0x6a>
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e7fe      	b.n	8008bfc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d068      	beq.n	8008cd6 <pvPortMalloc+0x142>
 8008c04:	4b41      	ldr	r3, [pc, #260]	; (8008d0c <pvPortMalloc+0x178>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d863      	bhi.n	8008cd6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c0e:	4b40      	ldr	r3, [pc, #256]	; (8008d10 <pvPortMalloc+0x17c>)
 8008c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c12:	4b3f      	ldr	r3, [pc, #252]	; (8008d10 <pvPortMalloc+0x17c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c18:	e004      	b.n	8008c24 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d903      	bls.n	8008c36 <pvPortMalloc+0xa2>
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1f1      	bne.n	8008c1a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c36:	4b33      	ldr	r3, [pc, #204]	; (8008d04 <pvPortMalloc+0x170>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d04a      	beq.n	8008cd6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c40:	6a3b      	ldr	r3, [r7, #32]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	2208      	movs	r2, #8
 8008c46:	4413      	add	r3, r2
 8008c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	1ad2      	subs	r2, r2, r3
 8008c5a:	2308      	movs	r3, #8
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d91e      	bls.n	8008ca0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4413      	add	r3, r2
 8008c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	f003 0307 	and.w	r3, r3, #7
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d009      	beq.n	8008c88 <pvPortMalloc+0xf4>
 8008c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	e7fe      	b.n	8008c86 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	1ad2      	subs	r2, r2, r3
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c9a:	69b8      	ldr	r0, [r7, #24]
 8008c9c:	f000 f8f6 	bl	8008e8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <pvPortMalloc+0x178>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	4a18      	ldr	r2, [pc, #96]	; (8008d0c <pvPortMalloc+0x178>)
 8008cac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cae:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <pvPortMalloc+0x178>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b18      	ldr	r3, [pc, #96]	; (8008d14 <pvPortMalloc+0x180>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d203      	bcs.n	8008cc2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cba:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <pvPortMalloc+0x178>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a15      	ldr	r2, [pc, #84]	; (8008d14 <pvPortMalloc+0x180>)
 8008cc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <pvPortMalloc+0x174>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cd6:	f7fe fdc5 	bl	8007864 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d009      	beq.n	8008cf8 <pvPortMalloc+0x164>
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	e7fe      	b.n	8008cf6 <pvPortMalloc+0x162>
	return pvReturn;
 8008cf8:	69fb      	ldr	r3, [r7, #28]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3728      	adds	r7, #40	; 0x28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20001a98 	.word	0x20001a98
 8008d08:	20001aa4 	.word	0x20001aa4
 8008d0c:	20001a9c 	.word	0x20001a9c
 8008d10:	20001a90 	.word	0x20001a90
 8008d14:	20001aa0 	.word	0x20001aa0

08008d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d046      	beq.n	8008db8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	425b      	negs	r3, r3
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4413      	add	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	4b20      	ldr	r3, [pc, #128]	; (8008dc0 <vPortFree+0xa8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4013      	ands	r3, r2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d109      	bne.n	8008d5a <vPortFree+0x42>
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	e7fe      	b.n	8008d58 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <vPortFree+0x5e>
 8008d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d66:	f383 8811 	msr	BASEPRI, r3
 8008d6a:	f3bf 8f6f 	isb	sy
 8008d6e:	f3bf 8f4f 	dsb	sy
 8008d72:	60bb      	str	r3, [r7, #8]
 8008d74:	e7fe      	b.n	8008d74 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	4b11      	ldr	r3, [pc, #68]	; (8008dc0 <vPortFree+0xa8>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d019      	beq.n	8008db8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d115      	bne.n	8008db8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortFree+0xa8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	43db      	mvns	r3, r3
 8008d96:	401a      	ands	r2, r3
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d9c:	f7fe fd54 	bl	8007848 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <vPortFree+0xac>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4413      	add	r3, r2
 8008daa:	4a06      	ldr	r2, [pc, #24]	; (8008dc4 <vPortFree+0xac>)
 8008dac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008dae:	6938      	ldr	r0, [r7, #16]
 8008db0:	f000 f86c 	bl	8008e8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008db4:	f7fe fd56 	bl	8007864 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008db8:	bf00      	nop
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20001aa4 	.word	0x20001aa4
 8008dc4:	20001a9c 	.word	0x20001a9c

08008dc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008dd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dd4:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <prvHeapInit+0xac>)
 8008dd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f003 0307 	and.w	r3, r3, #7
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00c      	beq.n	8008dfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3307      	adds	r3, #7
 8008de6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0307 	bic.w	r3, r3, #7
 8008dee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	4a1f      	ldr	r2, [pc, #124]	; (8008e74 <prvHeapInit+0xac>)
 8008df8:	4413      	add	r3, r2
 8008dfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e00:	4a1d      	ldr	r2, [pc, #116]	; (8008e78 <prvHeapInit+0xb0>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e06:	4b1c      	ldr	r3, [pc, #112]	; (8008e78 <prvHeapInit+0xb0>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	4413      	add	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e14:	2208      	movs	r2, #8
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0307 	bic.w	r3, r3, #7
 8008e22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	4a15      	ldr	r2, [pc, #84]	; (8008e7c <prvHeapInit+0xb4>)
 8008e28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <prvHeapInit+0xb4>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e32:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <prvHeapInit+0xb4>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	1ad2      	subs	r2, r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <prvHeapInit+0xb4>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4a0a      	ldr	r2, [pc, #40]	; (8008e80 <prvHeapInit+0xb8>)
 8008e56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	4a09      	ldr	r2, [pc, #36]	; (8008e84 <prvHeapInit+0xbc>)
 8008e5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e60:	4b09      	ldr	r3, [pc, #36]	; (8008e88 <prvHeapInit+0xc0>)
 8008e62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e66:	601a      	str	r2, [r3, #0]
}
 8008e68:	bf00      	nop
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000e90 	.word	0x20000e90
 8008e78:	20001a90 	.word	0x20001a90
 8008e7c:	20001a98 	.word	0x20001a98
 8008e80:	20001aa0 	.word	0x20001aa0
 8008e84:	20001a9c 	.word	0x20001a9c
 8008e88:	20001aa4 	.word	0x20001aa4

08008e8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e94:	4b27      	ldr	r3, [pc, #156]	; (8008f34 <prvInsertBlockIntoFreeList+0xa8>)
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	e002      	b.n	8008ea0 <prvInsertBlockIntoFreeList+0x14>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d8f7      	bhi.n	8008e9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d108      	bne.n	8008ece <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	441a      	add	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	441a      	add	r2, r3
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d118      	bne.n	8008f14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <prvInsertBlockIntoFreeList+0xac>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d00d      	beq.n	8008f0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	441a      	add	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	e008      	b.n	8008f1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <prvInsertBlockIntoFreeList+0xac>)
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	e003      	b.n	8008f1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d002      	beq.n	8008f2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f2a:	bf00      	nop
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bc80      	pop	{r7}
 8008f32:	4770      	bx	lr
 8008f34:	20001a90 	.word	0x20001a90
 8008f38:	20001a98 	.word	0x20001a98

08008f3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f40:	2200      	movs	r2, #0
 8008f42:	4912      	ldr	r1, [pc, #72]	; (8008f8c <MX_USB_DEVICE_Init+0x50>)
 8008f44:	4812      	ldr	r0, [pc, #72]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f46:	f7fc fa24 	bl	8005392 <USBD_Init>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f50:	f7f7 fae8 	bl	8000524 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f54:	490f      	ldr	r1, [pc, #60]	; (8008f94 <MX_USB_DEVICE_Init+0x58>)
 8008f56:	480e      	ldr	r0, [pc, #56]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f58:	f7fc fa46 	bl	80053e8 <USBD_RegisterClass>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f62:	f7f7 fadf 	bl	8000524 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f66:	490c      	ldr	r1, [pc, #48]	; (8008f98 <MX_USB_DEVICE_Init+0x5c>)
 8008f68:	4809      	ldr	r0, [pc, #36]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f6a:	f7fc f977 	bl	800525c <USBD_CDC_RegisterInterface>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f74:	f7f7 fad6 	bl	8000524 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f78:	4805      	ldr	r0, [pc, #20]	; (8008f90 <MX_USB_DEVICE_Init+0x54>)
 8008f7a:	f7fc fa4e 	bl	800541a <USBD_Start>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d001      	beq.n	8008f88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f84:	f7f7 face 	bl	8000524 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f88:	bf00      	nop
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000130 	.word	0x20000130
 8008f90:	20001d34 	.word	0x20001d34
 8008f94:	20000018 	.word	0x20000018
 8008f98:	20000120 	.word	0x20000120

08008f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4905      	ldr	r1, [pc, #20]	; (8008fb8 <CDC_Init_FS+0x1c>)
 8008fa4:	4805      	ldr	r0, [pc, #20]	; (8008fbc <CDC_Init_FS+0x20>)
 8008fa6:	f7fc f96f 	bl	8005288 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008faa:	4905      	ldr	r1, [pc, #20]	; (8008fc0 <CDC_Init_FS+0x24>)
 8008fac:	4803      	ldr	r0, [pc, #12]	; (8008fbc <CDC_Init_FS+0x20>)
 8008fae:	f7fc f984 	bl	80052ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	20002038 	.word	0x20002038
 8008fbc:	20001d34 	.word	0x20001d34
 8008fc0:	20001ff8 	.word	0x20001ff8

08008fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bc80      	pop	{r7}
 8008fd0:	4770      	bx	lr
	...

08008fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b23      	cmp	r3, #35	; 0x23
 8008fe8:	d84a      	bhi.n	8009080 <CDC_Control_FS+0xac>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <CDC_Control_FS+0x1c>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009081 	.word	0x08009081
 8008ff4:	08009081 	.word	0x08009081
 8008ff8:	08009081 	.word	0x08009081
 8008ffc:	08009081 	.word	0x08009081
 8009000:	08009081 	.word	0x08009081
 8009004:	08009081 	.word	0x08009081
 8009008:	08009081 	.word	0x08009081
 800900c:	08009081 	.word	0x08009081
 8009010:	08009081 	.word	0x08009081
 8009014:	08009081 	.word	0x08009081
 8009018:	08009081 	.word	0x08009081
 800901c:	08009081 	.word	0x08009081
 8009020:	08009081 	.word	0x08009081
 8009024:	08009081 	.word	0x08009081
 8009028:	08009081 	.word	0x08009081
 800902c:	08009081 	.word	0x08009081
 8009030:	08009081 	.word	0x08009081
 8009034:	08009081 	.word	0x08009081
 8009038:	08009081 	.word	0x08009081
 800903c:	08009081 	.word	0x08009081
 8009040:	08009081 	.word	0x08009081
 8009044:	08009081 	.word	0x08009081
 8009048:	08009081 	.word	0x08009081
 800904c:	08009081 	.word	0x08009081
 8009050:	08009081 	.word	0x08009081
 8009054:	08009081 	.word	0x08009081
 8009058:	08009081 	.word	0x08009081
 800905c:	08009081 	.word	0x08009081
 8009060:	08009081 	.word	0x08009081
 8009064:	08009081 	.word	0x08009081
 8009068:	08009081 	.word	0x08009081
 800906c:	08009081 	.word	0x08009081
 8009070:	08009081 	.word	0x08009081
 8009074:	08009081 	.word	0x08009081
 8009078:	08009081 	.word	0x08009081
 800907c:	08009081 	.word	0x08009081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009080:	bf00      	nop
  }

  return (USBD_OK);
 8009082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	bc80      	pop	{r7}
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop

08009090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800909a:	6879      	ldr	r1, [r7, #4]
 800909c:	4805      	ldr	r0, [pc, #20]	; (80090b4 <CDC_Receive_FS+0x24>)
 800909e:	f7fc f90c 	bl	80052ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80090a2:	4804      	ldr	r0, [pc, #16]	; (80090b4 <CDC_Receive_FS+0x24>)
 80090a4:	f7fc f94b 	bl	800533e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80090a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20001d34 	.word	0x20001d34

080090b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80090c4:	2300      	movs	r3, #0
 80090c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80090c8:	4b0d      	ldr	r3, [pc, #52]	; (8009100 <CDC_Transmit_FS+0x48>)
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090da:	2301      	movs	r3, #1
 80090dc:	e00b      	b.n	80090f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090de:	887b      	ldrh	r3, [r7, #2]
 80090e0:	461a      	mov	r2, r3
 80090e2:	6879      	ldr	r1, [r7, #4]
 80090e4:	4806      	ldr	r0, [pc, #24]	; (8009100 <CDC_Transmit_FS+0x48>)
 80090e6:	f7fc f8cf 	bl	8005288 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090ea:	4805      	ldr	r0, [pc, #20]	; (8009100 <CDC_Transmit_FS+0x48>)
 80090ec:	f7fc f8f8 	bl	80052e0 <USBD_CDC_TransmitPacket>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20001d34 	.word	0x20001d34

08009104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	4603      	mov	r3, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	2212      	movs	r2, #18
 8009114:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009116:	4b03      	ldr	r3, [pc, #12]	; (8009124 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009118:	4618      	mov	r0, r3
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	bc80      	pop	{r7}
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	2000014c 	.word	0x2000014c

08009128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2204      	movs	r2, #4
 8009138:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800913a:	4b03      	ldr	r3, [pc, #12]	; (8009148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	20000160 	.word	0x20000160

0800914c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d105      	bne.n	800916a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4907      	ldr	r1, [pc, #28]	; (8009180 <USBD_FS_ProductStrDescriptor+0x34>)
 8009162:	4808      	ldr	r0, [pc, #32]	; (8009184 <USBD_FS_ProductStrDescriptor+0x38>)
 8009164:	f7fd f8c5 	bl	80062f2 <USBD_GetString>
 8009168:	e004      	b.n	8009174 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4904      	ldr	r1, [pc, #16]	; (8009180 <USBD_FS_ProductStrDescriptor+0x34>)
 800916e:	4805      	ldr	r0, [pc, #20]	; (8009184 <USBD_FS_ProductStrDescriptor+0x38>)
 8009170:	f7fd f8bf 	bl	80062f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009174:	4b02      	ldr	r3, [pc, #8]	; (8009180 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20002078 	.word	0x20002078
 8009184:	08009a0c 	.word	0x08009a0c

08009188 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	6039      	str	r1, [r7, #0]
 8009192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	4904      	ldr	r1, [pc, #16]	; (80091a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009198:	4804      	ldr	r0, [pc, #16]	; (80091ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800919a:	f7fd f8aa 	bl	80062f2 <USBD_GetString>
  return USBD_StrDesc;
 800919e:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20002078 	.word	0x20002078
 80091ac:	08009a24 	.word	0x08009a24

080091b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	221a      	movs	r2, #26
 80091c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091c2:	f000 f843 	bl	800924c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091c6:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3708      	adds	r7, #8
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20000164 	.word	0x20000164

080091d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091e0:	79fb      	ldrb	r3, [r7, #7]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d105      	bne.n	80091f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	4907      	ldr	r1, [pc, #28]	; (8009208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091ea:	4808      	ldr	r0, [pc, #32]	; (800920c <USBD_FS_ConfigStrDescriptor+0x38>)
 80091ec:	f7fd f881 	bl	80062f2 <USBD_GetString>
 80091f0:	e004      	b.n	80091fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091f2:	683a      	ldr	r2, [r7, #0]
 80091f4:	4904      	ldr	r1, [pc, #16]	; (8009208 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091f6:	4805      	ldr	r0, [pc, #20]	; (800920c <USBD_FS_ConfigStrDescriptor+0x38>)
 80091f8:	f7fd f87b 	bl	80062f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091fc:	4b02      	ldr	r3, [pc, #8]	; (8009208 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20002078 	.word	0x20002078
 800920c:	08009a38 	.word	0x08009a38

08009210 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	6039      	str	r1, [r7, #0]
 800921a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4907      	ldr	r1, [pc, #28]	; (8009244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009226:	4808      	ldr	r0, [pc, #32]	; (8009248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009228:	f7fd f863 	bl	80062f2 <USBD_GetString>
 800922c:	e004      	b.n	8009238 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	4904      	ldr	r1, [pc, #16]	; (8009244 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009232:	4805      	ldr	r0, [pc, #20]	; (8009248 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009234:	f7fd f85d 	bl	80062f2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009238:	4b02      	ldr	r3, [pc, #8]	; (8009244 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	20002078 	.word	0x20002078
 8009248:	08009a44 	.word	0x08009a44

0800924c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b084      	sub	sp, #16
 8009250:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009252:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <Get_SerialNum+0x44>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009258:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <Get_SerialNum+0x48>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800925e:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <Get_SerialNum+0x4c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4413      	add	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d009      	beq.n	8009286 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009272:	2208      	movs	r2, #8
 8009274:	4909      	ldr	r1, [pc, #36]	; (800929c <Get_SerialNum+0x50>)
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 f814 	bl	80092a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800927c:	2204      	movs	r2, #4
 800927e:	4908      	ldr	r1, [pc, #32]	; (80092a0 <Get_SerialNum+0x54>)
 8009280:	68b8      	ldr	r0, [r7, #8]
 8009282:	f000 f80f 	bl	80092a4 <IntToUnicode>
  }
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	1ffff7e8 	.word	0x1ffff7e8
 8009294:	1ffff7ec 	.word	0x1ffff7ec
 8009298:	1ffff7f0 	.word	0x1ffff7f0
 800929c:	20000166 	.word	0x20000166
 80092a0:	20000176 	.word	0x20000176

080092a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092b6:	2300      	movs	r3, #0
 80092b8:	75fb      	strb	r3, [r7, #23]
 80092ba:	e027      	b.n	800930c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	0f1b      	lsrs	r3, r3, #28
 80092c0:	2b09      	cmp	r3, #9
 80092c2:	d80b      	bhi.n	80092dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	0f1b      	lsrs	r3, r3, #28
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	4619      	mov	r1, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	440b      	add	r3, r1
 80092d4:	3230      	adds	r2, #48	; 0x30
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	701a      	strb	r2, [r3, #0]
 80092da:	e00a      	b.n	80092f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	0f1b      	lsrs	r3, r3, #28
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	4619      	mov	r1, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	440b      	add	r3, r1
 80092ec:	3237      	adds	r2, #55	; 0x37
 80092ee:	b2d2      	uxtb	r2, r2
 80092f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092f8:	7dfb      	ldrb	r3, [r7, #23]
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	3301      	adds	r3, #1
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	4413      	add	r3, r2
 8009302:	2200      	movs	r2, #0
 8009304:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	3301      	adds	r3, #1
 800930a:	75fb      	strb	r3, [r7, #23]
 800930c:	7dfa      	ldrb	r2, [r7, #23]
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	429a      	cmp	r2, r3
 8009312:	d3d3      	bcc.n	80092bc <IntToUnicode+0x18>
  }
}
 8009314:	bf00      	nop
 8009316:	371c      	adds	r7, #28
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
	...

08009320 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a0d      	ldr	r2, [pc, #52]	; (8009364 <HAL_PCD_MspInit+0x44>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d113      	bne.n	800935a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009332:	4b0d      	ldr	r3, [pc, #52]	; (8009368 <HAL_PCD_MspInit+0x48>)
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	4a0c      	ldr	r2, [pc, #48]	; (8009368 <HAL_PCD_MspInit+0x48>)
 8009338:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800933c:	61d3      	str	r3, [r2, #28]
 800933e:	4b0a      	ldr	r3, [pc, #40]	; (8009368 <HAL_PCD_MspInit+0x48>)
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009346:	60fb      	str	r3, [r7, #12]
 8009348:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800934a:	2200      	movs	r2, #0
 800934c:	2105      	movs	r1, #5
 800934e:	2014      	movs	r0, #20
 8009350:	f7f7 fab5 	bl	80008be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009354:	2014      	movs	r0, #20
 8009356:	f7f7 face 	bl	80008f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	40005c00 	.word	0x40005c00
 8009368:	40021000 	.word	0x40021000

0800936c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b082      	sub	sp, #8
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fc f891 	bl	80054aa <USBD_LL_SetupStage>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	00db      	lsls	r3, r3, #3
 80093ae:	440b      	add	r3, r1
 80093b0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	4619      	mov	r1, r3
 80093ba:	f7fc f8c1 	bl	8005540 <USBD_LL_DataOutStage>
}
 80093be:	bf00      	nop
 80093c0:	3708      	adds	r7, #8
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	00db      	lsls	r3, r3, #3
 80093e4:	440b      	add	r3, r1
 80093e6:	333c      	adds	r3, #60	; 0x3c
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	4619      	mov	r1, r3
 80093ee:	f7fc f918 	bl	8005622 <USBD_LL_DataInStage>
}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009408:	4618      	mov	r0, r3
 800940a:	f7fc fa28 	bl	800585e <USBD_LL_SOF>
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b084      	sub	sp, #16
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800941e:	2301      	movs	r3, #1
 8009420:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	2b02      	cmp	r3, #2
 8009428:	d001      	beq.n	800942e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800942a:	f7f7 f87b 	bl	8000524 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009434:	7bfa      	ldrb	r2, [r7, #15]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f7fc f9d8 	bl	80057ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009444:	4618      	mov	r0, r3
 8009446:	f7fc f991 	bl	800576c <USBD_LL_Reset>
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009462:	4618      	mov	r0, r3
 8009464:	f7fc f9d2 	bl	800580c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d005      	beq.n	800947c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009470:	4b04      	ldr	r3, [pc, #16]	; (8009484 <HAL_PCD_SuspendCallback+0x30>)
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	4a03      	ldr	r2, [pc, #12]	; (8009484 <HAL_PCD_SuspendCallback+0x30>)
 8009476:	f043 0306 	orr.w	r3, r3, #6
 800947a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	e000ed00 	.word	0xe000ed00

08009488 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009496:	4618      	mov	r0, r3
 8009498:	f7fc f9cc 	bl	8005834 <USBD_LL_Resume>
}
 800949c:	bf00      	nop
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b082      	sub	sp, #8
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80094ac:	4a28      	ldr	r2, [pc, #160]	; (8009550 <USBD_LL_Init+0xac>)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a26      	ldr	r2, [pc, #152]	; (8009550 <USBD_LL_Init+0xac>)
 80094b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80094bc:	4b24      	ldr	r3, [pc, #144]	; (8009550 <USBD_LL_Init+0xac>)
 80094be:	4a25      	ldr	r2, [pc, #148]	; (8009554 <USBD_LL_Init+0xb0>)
 80094c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80094c2:	4b23      	ldr	r3, [pc, #140]	; (8009550 <USBD_LL_Init+0xac>)
 80094c4:	2208      	movs	r2, #8
 80094c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80094c8:	4b21      	ldr	r3, [pc, #132]	; (8009550 <USBD_LL_Init+0xac>)
 80094ca:	2202      	movs	r2, #2
 80094cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80094ce:	4b20      	ldr	r3, [pc, #128]	; (8009550 <USBD_LL_Init+0xac>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80094d4:	4b1e      	ldr	r3, [pc, #120]	; (8009550 <USBD_LL_Init+0xac>)
 80094d6:	2200      	movs	r2, #0
 80094d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80094da:	4b1d      	ldr	r3, [pc, #116]	; (8009550 <USBD_LL_Init+0xac>)
 80094dc:	2200      	movs	r2, #0
 80094de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80094e0:	481b      	ldr	r0, [pc, #108]	; (8009550 <USBD_LL_Init+0xac>)
 80094e2:	f7f7 fbae 	bl	8000c42 <HAL_PCD_Init>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d001      	beq.n	80094f0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80094ec:	f7f7 f81a 	bl	8000524 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094f6:	2318      	movs	r3, #24
 80094f8:	2200      	movs	r2, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	f7f8 fee2 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009506:	2358      	movs	r3, #88	; 0x58
 8009508:	2200      	movs	r2, #0
 800950a:	2180      	movs	r1, #128	; 0x80
 800950c:	f7f8 feda 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009516:	23c0      	movs	r3, #192	; 0xc0
 8009518:	2200      	movs	r2, #0
 800951a:	2181      	movs	r1, #129	; 0x81
 800951c:	f7f8 fed2 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009526:	f44f 7388 	mov.w	r3, #272	; 0x110
 800952a:	2200      	movs	r2, #0
 800952c:	2101      	movs	r1, #1
 800952e:	f7f8 fec9 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009538:	f44f 7380 	mov.w	r3, #256	; 0x100
 800953c:	2200      	movs	r2, #0
 800953e:	2182      	movs	r1, #130	; 0x82
 8009540:	f7f8 fec0 	bl	80022c4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20002278 	.word	0x20002278
 8009554:	40005c00 	.word	0x40005c00

08009558 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800956e:	4618      	mov	r0, r3
 8009570:	f7f7 fc72 	bl	8000e58 <HAL_PCD_Start>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f94e 	bl	800981c <USBD_Get_USB_Status>
 8009580:	4603      	mov	r3, r0
 8009582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009584:	7bbb      	ldrb	r3, [r7, #14]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b084      	sub	sp, #16
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	461a      	mov	r2, r3
 800959c:	4603      	mov	r3, r0
 800959e:	70fb      	strb	r3, [r7, #3]
 80095a0:	460b      	mov	r3, r1
 80095a2:	70bb      	strb	r3, [r7, #2]
 80095a4:	4613      	mov	r3, r2
 80095a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80095b6:	78bb      	ldrb	r3, [r7, #2]
 80095b8:	883a      	ldrh	r2, [r7, #0]
 80095ba:	78f9      	ldrb	r1, [r7, #3]
 80095bc:	f7f7 fdec 	bl	8001198 <HAL_PCD_EP_Open>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 f928 	bl	800981c <USBD_Get_USB_Status>
 80095cc:	4603      	mov	r3, r0
 80095ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	460b      	mov	r3, r1
 80095e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095f4:	78fa      	ldrb	r2, [r7, #3]
 80095f6:	4611      	mov	r1, r2
 80095f8:	4618      	mov	r0, r3
 80095fa:	f7f7 fe33 	bl	8001264 <HAL_PCD_EP_Close>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 f909 	bl	800981c <USBD_Get_USB_Status>
 800960a:	4603      	mov	r3, r0
 800960c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009632:	78fa      	ldrb	r2, [r7, #3]
 8009634:	4611      	mov	r1, r2
 8009636:	4618      	mov	r0, r3
 8009638:	f7f7 fef3 	bl	8001422 <HAL_PCD_EP_SetStall>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f8ea 	bl	800981c <USBD_Get_USB_Status>
 8009648:	4603      	mov	r3, r0
 800964a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964c:	7bbb      	ldrb	r3, [r7, #14]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	460b      	mov	r3, r1
 8009660:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009670:	78fa      	ldrb	r2, [r7, #3]
 8009672:	4611      	mov	r1, r2
 8009674:	4618      	mov	r0, r3
 8009676:	f7f7 ff34 	bl	80014e2 <HAL_PCD_EP_ClrStall>
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	4618      	mov	r0, r3
 8009682:	f000 f8cb 	bl	800981c <USBD_Get_USB_Status>
 8009686:	4603      	mov	r3, r0
 8009688:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968a:	7bbb      	ldrb	r3, [r7, #14]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	da0c      	bge.n	80096ca <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b6:	68f9      	ldr	r1, [r7, #12]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	4613      	mov	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4413      	add	r3, r2
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	440b      	add	r3, r1
 80096c4:	3302      	adds	r3, #2
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	e00b      	b.n	80096e2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	4613      	mov	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	440b      	add	r3, r1
 80096dc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80096e0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009706:	78fa      	ldrb	r2, [r7, #3]
 8009708:	4611      	mov	r1, r2
 800970a:	4618      	mov	r0, r3
 800970c:	f7f7 fd1f 	bl	800114e <HAL_PCD_SetAddress>
 8009710:	4603      	mov	r3, r0
 8009712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	4618      	mov	r0, r3
 8009718:	f000 f880 	bl	800981c <USBD_Get_USB_Status>
 800971c:	4603      	mov	r3, r0
 800971e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009720:	7bbb      	ldrb	r3, [r7, #14]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b086      	sub	sp, #24
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	461a      	mov	r2, r3
 8009736:	460b      	mov	r3, r1
 8009738:	72fb      	strb	r3, [r7, #11]
 800973a:	4613      	mov	r3, r2
 800973c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009742:	2300      	movs	r3, #0
 8009744:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800974c:	893b      	ldrh	r3, [r7, #8]
 800974e:	7af9      	ldrb	r1, [r7, #11]
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	f7f7 fe23 	bl	800139c <HAL_PCD_EP_Transmit>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f85d 	bl	800981c <USBD_Get_USB_Status>
 8009762:	4603      	mov	r3, r0
 8009764:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009766:	7dbb      	ldrb	r3, [r7, #22]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b086      	sub	sp, #24
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	607a      	str	r2, [r7, #4]
 800977a:	461a      	mov	r2, r3
 800977c:	460b      	mov	r3, r1
 800977e:	72fb      	strb	r3, [r7, #11]
 8009780:	4613      	mov	r3, r2
 8009782:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009792:	893b      	ldrh	r3, [r7, #8]
 8009794:	7af9      	ldrb	r1, [r7, #11]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	f7f7 fdac 	bl	80012f4 <HAL_PCD_EP_Receive>
 800979c:	4603      	mov	r3, r0
 800979e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097a0:	7dfb      	ldrb	r3, [r7, #23]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 f83a 	bl	800981c <USBD_Get_USB_Status>
 80097a8:	4603      	mov	r3, r0
 80097aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	4611      	mov	r1, r2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f7 fdce 	bl	800136e <HAL_PCD_EP_GetRxCount>
 80097d2:	4603      	mov	r3, r0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097e4:	4b02      	ldr	r3, [pc, #8]	; (80097f0 <USBD_static_malloc+0x14>)
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bc80      	pop	{r7}
 80097ee:	4770      	bx	lr
 80097f0:	20001aa8 	.word	0x20001aa8

080097f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]

}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr

08009806 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009806:	b480      	push	{r7}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009812:	bf00      	nop
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	2b03      	cmp	r3, #3
 800982e:	d817      	bhi.n	8009860 <USBD_Get_USB_Status+0x44>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <USBD_Get_USB_Status+0x1c>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	0800984f 	.word	0x0800984f
 8009840:	08009855 	.word	0x08009855
 8009844:	0800985b 	.word	0x0800985b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e00b      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800984e:	2302      	movs	r3, #2
 8009850:	73fb      	strb	r3, [r7, #15]
    break;
 8009852:	e008      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009854:	2301      	movs	r3, #1
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	e005      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800985a:	2302      	movs	r3, #2
 800985c:	73fb      	strb	r3, [r7, #15]
    break;
 800985e:	e002      	b.n	8009866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009860:	2302      	movs	r3, #2
 8009862:	73fb      	strb	r3, [r7, #15]
    break;
 8009864:	bf00      	nop
  }
  return usb_status;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	bc80      	pop	{r7}
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop

08009874 <__libc_init_array>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	2500      	movs	r5, #0
 8009878:	4e0c      	ldr	r6, [pc, #48]	; (80098ac <__libc_init_array+0x38>)
 800987a:	4c0d      	ldr	r4, [pc, #52]	; (80098b0 <__libc_init_array+0x3c>)
 800987c:	1ba4      	subs	r4, r4, r6
 800987e:	10a4      	asrs	r4, r4, #2
 8009880:	42a5      	cmp	r5, r4
 8009882:	d109      	bne.n	8009898 <__libc_init_array+0x24>
 8009884:	f000 f82e 	bl	80098e4 <_init>
 8009888:	2500      	movs	r5, #0
 800988a:	4e0a      	ldr	r6, [pc, #40]	; (80098b4 <__libc_init_array+0x40>)
 800988c:	4c0a      	ldr	r4, [pc, #40]	; (80098b8 <__libc_init_array+0x44>)
 800988e:	1ba4      	subs	r4, r4, r6
 8009890:	10a4      	asrs	r4, r4, #2
 8009892:	42a5      	cmp	r5, r4
 8009894:	d105      	bne.n	80098a2 <__libc_init_array+0x2e>
 8009896:	bd70      	pop	{r4, r5, r6, pc}
 8009898:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800989c:	4798      	blx	r3
 800989e:	3501      	adds	r5, #1
 80098a0:	e7ee      	b.n	8009880 <__libc_init_array+0xc>
 80098a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098a6:	4798      	blx	r3
 80098a8:	3501      	adds	r5, #1
 80098aa:	e7f2      	b.n	8009892 <__libc_init_array+0x1e>
 80098ac:	08009a88 	.word	0x08009a88
 80098b0:	08009a88 	.word	0x08009a88
 80098b4:	08009a88 	.word	0x08009a88
 80098b8:	08009a8c 	.word	0x08009a8c

080098bc <memcpy>:
 80098bc:	b510      	push	{r4, lr}
 80098be:	1e43      	subs	r3, r0, #1
 80098c0:	440a      	add	r2, r1
 80098c2:	4291      	cmp	r1, r2
 80098c4:	d100      	bne.n	80098c8 <memcpy+0xc>
 80098c6:	bd10      	pop	{r4, pc}
 80098c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d0:	e7f7      	b.n	80098c2 <memcpy+0x6>

080098d2 <memset>:
 80098d2:	4603      	mov	r3, r0
 80098d4:	4402      	add	r2, r0
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d100      	bne.n	80098dc <memset+0xa>
 80098da:	4770      	bx	lr
 80098dc:	f803 1b01 	strb.w	r1, [r3], #1
 80098e0:	e7f9      	b.n	80098d6 <memset+0x4>
	...

080098e4 <_init>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr

080098f0 <_fini>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr
