
freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080097cc  080097cc  000197cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098c8  080098c8  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080098c8  080098c8  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080098c8  080098c8  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c8  080098c8  000198c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098cc  080098cc  000198cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080098d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023e0  20000180  08009a50  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002560  08009a50  00022560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e023  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003fbd  00000000  00000000  0003e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001218  00000000  00000000  00042190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  000433a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b716  00000000  00000000  000443e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134df  00000000  00000000  0005fafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e482  00000000  00000000  00072fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010145f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c0  00000000  00000000  001014dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000180 	.word	0x20000180
 800012c:	00000000 	.word	0x00000000
 8000130:	080097b4 	.word	0x080097b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000184 	.word	0x20000184
 800014c:	080097b4 	.word	0x080097b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <PCB_Init>:

#include "PCB_BluePill.h"
#include "main.h"

void PCB_Init()
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000164:	2201      	movs	r2, #1
 8000166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800016a:	4802      	ldr	r0, [pc, #8]	; (8000174 <PCB_Init+0x14>)
 800016c:	f000 fce0 	bl	8000b30 <HAL_GPIO_WritePin>
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	40011000 	.word	0x40011000

08000178 <PCB_LED_Toggle>:

void PCB_LED_Toggle()
{
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000180:	4802      	ldr	r0, [pc, #8]	; (800018c <PCB_LED_Toggle+0x14>)
 8000182:	f000 fced 	bl	8000b60 <HAL_GPIO_TogglePin>
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40011000 	.word	0x40011000

08000190 <freeRTOS_Tasks_Ini>:
// еще добавлен static

char USB_Tx_Buf[24]; // Буфер для передачи в ПК.

void freeRTOS_Tasks_Ini (void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af02      	add	r7, sp, #8

	xTaskCreate(vTask_USB_Init, "Task_USB_Init", 100, NULL, 2, NULL); // З-а сброса лнии D+ после каждого запуска МК. Необхадимо для определения устройсва на шине USB.
 8000196:	2300      	movs	r3, #0
 8000198:	9301      	str	r3, [sp, #4]
 800019a:	2302      	movs	r3, #2
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2300      	movs	r3, #0
 80001a0:	2264      	movs	r2, #100	; 0x64
 80001a2:	4912      	ldr	r1, [pc, #72]	; (80001ec <freeRTOS_Tasks_Ini+0x5c>)
 80001a4:	4812      	ldr	r0, [pc, #72]	; (80001f0 <freeRTOS_Tasks_Ini+0x60>)
 80001a6:	f007 f876 	bl	8007296 <xTaskCreate>
	xTaskCreate(vTask_Transmit_VCP, "Task_Transmit_VCP", 100, NULL, 1, NULL); // З-а переиодческой отправки сообщения в VCP. Задача должна быть запущена после удаления vTask_USB_Init.
 80001aa:	2300      	movs	r3, #0
 80001ac:	9301      	str	r3, [sp, #4]
 80001ae:	2301      	movs	r3, #1
 80001b0:	9300      	str	r3, [sp, #0]
 80001b2:	2300      	movs	r3, #0
 80001b4:	2264      	movs	r2, #100	; 0x64
 80001b6:	490f      	ldr	r1, [pc, #60]	; (80001f4 <freeRTOS_Tasks_Ini+0x64>)
 80001b8:	480f      	ldr	r0, [pc, #60]	; (80001f8 <freeRTOS_Tasks_Ini+0x68>)
 80001ba:	f007 f86c 	bl	8007296 <xTaskCreate>

	Delay_LED = 500;
 80001be:	4b0f      	ldr	r3, [pc, #60]	; (80001fc <freeRTOS_Tasks_Ini+0x6c>)
 80001c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001c4:	801a      	strh	r2, [r3, #0]
	pDelay_LED = &Delay_LED;
 80001c6:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <freeRTOS_Tasks_Ini+0x70>)
 80001c8:	4a0c      	ldr	r2, [pc, #48]	; (80001fc <freeRTOS_Tasks_Ini+0x6c>)
 80001ca:	601a      	str	r2, [r3, #0]
	xTaskCreate(vTask_PCB_LED_Toggle, "Task_PCB_LED_Toggle", 40, (void*) pDelay_LED, 1, NULL); // З-а мигания LED
 80001cc:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <freeRTOS_Tasks_Ini+0x70>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	2300      	movs	r3, #0
 80001d2:	9301      	str	r3, [sp, #4]
 80001d4:	2301      	movs	r3, #1
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	4613      	mov	r3, r2
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	4909      	ldr	r1, [pc, #36]	; (8000204 <freeRTOS_Tasks_Ini+0x74>)
 80001de:	480a      	ldr	r0, [pc, #40]	; (8000208 <freeRTOS_Tasks_Ini+0x78>)
 80001e0:	f007 f859 	bl	8007296 <xTaskCreate>

}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	080097cc 	.word	0x080097cc
 80001f0:	0800024d 	.word	0x0800024d
 80001f4:	080097dc 	.word	0x080097dc
 80001f8:	0800020d 	.word	0x0800020d
 80001fc:	20001ce4 	.word	0x20001ce4
 8000200:	20001ce0 	.word	0x20001ce0
 8000204:	080097f0 	.word	0x080097f0
 8000208:	080002ad 	.word	0x080002ad

0800020c <vTask_Transmit_VCP>:

void vTask_Transmit_VCP(void *pvParameters)
{
 800020c:	b590      	push	{r4, r7, lr}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	sprintf(USB_Tx_Buf, "Hi from VCP\r\n");
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <vTask_Transmit_VCP+0x38>)
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <vTask_Transmit_VCP+0x3c>)
 8000218:	4614      	mov	r4, r2
 800021a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800021c:	6020      	str	r0, [r4, #0]
 800021e:	6061      	str	r1, [r4, #4]
 8000220:	60a2      	str	r2, [r4, #8]
 8000222:	881b      	ldrh	r3, [r3, #0]
 8000224:	81a3      	strh	r3, [r4, #12]

	for(;;)
	{
		CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 8000226:	4807      	ldr	r0, [pc, #28]	; (8000244 <vTask_Transmit_VCP+0x38>)
 8000228:	f7ff ff92 	bl	8000150 <strlen>
 800022c:	4603      	mov	r3, r0
 800022e:	b29b      	uxth	r3, r3
 8000230:	4619      	mov	r1, r3
 8000232:	4804      	ldr	r0, [pc, #16]	; (8000244 <vTask_Transmit_VCP+0x38>)
 8000234:	f008 fea8 	bl	8008f88 <CDC_Transmit_FS>
		vTaskDelay(500);
 8000238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800023c:	f007 f9d8 	bl	80075f0 <vTaskDelay>
		CDC_Transmit_FS((unsigned char*)USB_Tx_Buf, strlen(USB_Tx_Buf));
 8000240:	e7f1      	b.n	8000226 <vTask_Transmit_VCP+0x1a>
 8000242:	bf00      	nop
 8000244:	20001cc8 	.word	0x20001cc8
 8000248:	08009804 	.word	0x08009804

0800024c <vTask_USB_Init>:
	}

}

void vTask_USB_Init(void *pvParameters)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
	/* Кратковременный перевод GPIOA_12 на выход с записью в него лог. 0 + задержка. Необхадимо для определения USB устройсва после
	 перепрошивки/сброса МК. Не забыть закмментить родной вызов MX_USB_DEVICE_Init();  после каждой генерации STM32IDE.*/

	// НЕ ЗАБЫТЬ ЗАКОММЕНТИТЬ ВЫЗОВ MX_USB_DEVICE_Init(); ИЗ ЗАДАЧИ StartDefaultTask (main.c) ПОСЛЕ КАЖДОЙ ГЕНЕРАЦИИ ПРОЕКТА!!!

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000254:	f107 0308 	add.w	r3, r7, #8
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]
 8000260:	60da      	str	r2, [r3, #12]
	  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000266:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	2301      	movs	r3, #1
 800026a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026c:	2300      	movs	r3, #0
 800026e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000270:	2302      	movs	r3, #2
 8000272:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000274:	f107 0308 	add.w	r3, r7, #8
 8000278:	4619      	mov	r1, r3
 800027a:	480b      	ldr	r0, [pc, #44]	; (80002a8 <vTask_USB_Init+0x5c>)
 800027c:	f000 fafe 	bl	800087c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Запись 0, притянуть D+ к земле.
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000286:	4808      	ldr	r0, [pc, #32]	; (80002a8 <vTask_USB_Init+0x5c>)
 8000288:	f000 fc52 	bl	8000b30 <HAL_GPIO_WritePin>

	  vTaskDelay(2000);
 800028c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000290:	f007 f9ae 	bl	80075f0 <vTaskDelay>

	  MX_USB_DEVICE_Init(); // Инициализация USB микроконтроллераа
 8000294:	f008 fdba 	bl	8008e0c <MX_USB_DEVICE_Init>

	  vTaskDelete(NULL); // Удаленеи задачи самой себя
 8000298:	2000      	movs	r0, #0
 800029a:	f007 f937 	bl	800750c <vTaskDelete>

	for(;;)
	{
		vTaskDelay(1000);
 800029e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a2:	f007 f9a5 	bl	80075f0 <vTaskDelay>
 80002a6:	e7fa      	b.n	800029e <vTask_USB_Init+0x52>
 80002a8:	40010800 	.word	0x40010800

080002ac <vTask_PCB_LED_Toggle>:


}

void vTask_PCB_LED_Toggle(void *pvParameters)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]

	uint16_t *pDelay_LED = (uint16_t*) pvParameters; // Получение параметра с привденем к иходному типу данных - uint16_t
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{
	PCB_LED_Toggle();
 80002b8:	f7ff ff5e 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*pDelay_LED); // Разыменование т.е. передача значения задержки
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	881b      	ldrh	r3, [r3, #0]
 80002c0:	4618      	mov	r0, r3
 80002c2:	f007 f995 	bl	80075f0 <vTaskDelay>
	PCB_LED_Toggle();
 80002c6:	f7ff ff57 	bl	8000178 <PCB_LED_Toggle>
	vTaskDelay(*(uint16_t*)pvParameters); // Можно и без промежуточных переменных, привести pvParameters к указателю uint16_t "(uint16_t*)pvParameters", а затем разименовать
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	881b      	ldrh	r3, [r3, #0]
 80002ce:	4618      	mov	r0, r3
 80002d0:	f007 f98e 	bl	80075f0 <vTaskDelay>
	PCB_LED_Toggle();
 80002d4:	e7f0      	b.n	80002b8 <vTask_PCB_LED_Toggle+0xc>
	...

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f95e 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f816 	bl	8000310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f86e 	bl	80003c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80002e8:	f006 f888 	bl	80063fc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <main+0x2c>)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4805      	ldr	r0, [pc, #20]	; (8000308 <main+0x30>)
 80002f2:	f006 f8e9 	bl	80064c8 <osThreadNew>
 80002f6:	4602      	mov	r2, r0
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <main+0x34>)
 80002fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002fc:	f006 f8b0 	bl	8006460 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000300:	e7fe      	b.n	8000300 <main+0x28>
 8000302:	bf00      	nop
 8000304:	08009894 	.word	0x08009894
 8000308:	0800045d 	.word	0x0800045d
 800030c:	20001ce8 	.word	0x20001ce8

08000310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b094      	sub	sp, #80	; 0x50
 8000314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000316:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031a:	2228      	movs	r2, #40	; 0x28
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f009 fa3f 	bl	80097a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	f107 0314 	add.w	r3, r7, #20
 8000328:	2200      	movs	r2, #0
 800032a:	601a      	str	r2, [r3, #0]
 800032c:	605a      	str	r2, [r3, #4]
 800032e:	609a      	str	r2, [r3, #8]
 8000330:	60da      	str	r2, [r3, #12]
 8000332:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000340:	2301      	movs	r3, #1
 8000342:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034e:	2301      	movs	r3, #1
 8000350:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000352:	2302      	movs	r3, #2
 8000354:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000360:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000366:	4618      	mov	r0, r3
 8000368:	f001 ff96 	bl	8002298 <HAL_RCC_OscConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000372:	f000 f87f 	bl	8000474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	230f      	movs	r3, #15
 8000378:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037a:	2302      	movs	r3, #2
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037e:	2300      	movs	r3, #0
 8000380:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000386:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038c:	f107 0314 	add.w	r3, r7, #20
 8000390:	2102      	movs	r1, #2
 8000392:	4618      	mov	r0, r3
 8000394:	f002 fa00 	bl	8002798 <HAL_RCC_ClockConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800039e:	f000 f869 	bl	8000474 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003a2:	2310      	movs	r3, #16
 80003a4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 fb5d 	bl	8002a6c <HAL_RCCEx_PeriphCLKConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80003b8:	f000 f85c 	bl	8000474 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3750      	adds	r7, #80	; 0x50
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <MX_GPIO_Init+0x90>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <MX_GPIO_Init+0x90>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <MX_GPIO_Init+0x90>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0310 	and.w	r3, r3, #16
 80003ec:	60fb      	str	r3, [r7, #12]
 80003ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f0:	4b18      	ldr	r3, [pc, #96]	; (8000454 <MX_GPIO_Init+0x90>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a17      	ldr	r2, [pc, #92]	; (8000454 <MX_GPIO_Init+0x90>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <MX_GPIO_Init+0x90>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	60bb      	str	r3, [r7, #8]
 8000406:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_GPIO_Init+0x90>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a11      	ldr	r2, [pc, #68]	; (8000454 <MX_GPIO_Init+0x90>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_GPIO_Init+0x90>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	607b      	str	r3, [r7, #4]
 800041e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000426:	480c      	ldr	r0, [pc, #48]	; (8000458 <MX_GPIO_Init+0x94>)
 8000428:	f000 fb82 	bl	8000b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800042c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4804      	ldr	r0, [pc, #16]	; (8000458 <MX_GPIO_Init+0x94>)
 8000446:	f000 fa19 	bl	800087c <HAL_GPIO_Init>

}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40011000 	.word	0x40011000

0800045c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */

  PCB_Init();
 8000464:	f7ff fe7c 	bl	8000160 <PCB_Init>
  freeRTOS_Tasks_Ini();
 8000468:	f7ff fe92 	bl	8000190 <freeRTOS_Tasks_Ini>

  /* Infinite loop */
  for(;;)
  {
osDelay(1);
 800046c:	2001      	movs	r0, #1
 800046e:	f006 f8d5 	bl	800661c <osDelay>
 8000472:	e7fb      	b.n	800046c <StartDefaultTask+0x10>

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000478:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800047a:	e7fe      	b.n	800047a <Error_Handler+0x6>

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <HAL_MspInit+0x68>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <HAL_MspInit+0x68>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <HAL_MspInit+0x68>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_MspInit+0x68>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a11      	ldr	r2, [pc, #68]	; (80004e4 <HAL_MspInit+0x68>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x68>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	210f      	movs	r1, #15
 80004b6:	f06f 0001 	mvn.w	r0, #1
 80004ba:	f000 f9a8 	bl	800080e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <HAL_MspInit+0x6c>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <HAL_MspInit+0x6c>)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010000 	.word	0x40010000

080004ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <NMI_Handler+0x4>

080004f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f6:	e7fe      	b.n	80004f6 <HardFault_Handler+0x4>

080004f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <MemManage_Handler+0x4>

080004fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <BusFault_Handler+0x4>

08000504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <UsageFault_Handler+0x4>

0800050a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800050e:	bf00      	nop
 8000510:	46bd      	mov	sp, r7
 8000512:	bc80      	pop	{r7}
 8000514:	4770      	bx	lr

08000516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051a:	f000 f885 	bl	8000628 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800051e:	f007 fcd9 	bl	8007ed4 <xTaskGetSchedulerState>
 8000522:	4603      	mov	r3, r0
 8000524:	2b01      	cmp	r3, #1
 8000526:	d001      	beq.n	800052c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000528:	f008 fa1e 	bl	8008968 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}

08000530 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000536:	f000 fc5d 	bl	8000df4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20002274 	.word	0x20002274

08000544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000550:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000552:	e003      	b.n	800055c <LoopCopyDataInit>

08000554 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000556:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000558:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800055a:	3104      	adds	r1, #4

0800055c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800055c:	480a      	ldr	r0, [pc, #40]	; (8000588 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000560:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000562:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000564:	d3f6      	bcc.n	8000554 <CopyDataInit>
  ldr r2, =_sbss
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000568:	e002      	b.n	8000570 <LoopFillZerobss>

0800056a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800056c:	f842 3b04 	str.w	r3, [r2], #4

08000570 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000570:	4b08      	ldr	r3, [pc, #32]	; (8000594 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000572:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000574:	d3f9      	bcc.n	800056a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000576:	f7ff ffe5 	bl	8000544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057a:	f009 f8e3 	bl	8009744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff feab 	bl	80002d8 <main>
  bx lr
 8000582:	4770      	bx	lr
  ldr r3, =_sidata
 8000584:	080098d0 	.word	0x080098d0
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800058c:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000590:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000594:	20002560 	.word	0x20002560

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <HAL_Init+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_Init+0x28>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f923 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f808 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f7ff ff60 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f93b 	bl	8000862 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f903 	bl	800080e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004

08000628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <HAL_IncTick+0x1c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x20>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a03      	ldr	r2, [pc, #12]	; (8000648 <HAL_IncTick+0x20>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000008 	.word	0x20000008
 8000648:	20001cec 	.word	0x20001cec

0800064c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <HAL_GetTick+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20001cec 	.word	0x20001cec

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <__NVIC_EnableIRQ+0x34>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	; 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	; 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007c4:	d301      	bcc.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00f      	b.n	80007ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <SysTick_Config+0x40>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	210f      	movs	r1, #15
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f7ff ff90 	bl	80006fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <SysTick_Config+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <SysTick_Config+0x40>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff2d 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff42 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff90 	bl	8000750 <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff5f 	bl	80006fc <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff35 	bl	80006c4 <__NVIC_EnableIRQ>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffa2 	bl	80007b4 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800087c:	b480      	push	{r7}
 800087e:	b08b      	sub	sp, #44	; 0x2c
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800088e:	e127      	b.n	8000ae0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000890:	2201      	movs	r2, #1
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	69fa      	ldr	r2, [r7, #28]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 8116 	bne.w	8000ada <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b12      	cmp	r3, #18
 80008b4:	d034      	beq.n	8000920 <HAL_GPIO_Init+0xa4>
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d80d      	bhi.n	80008d6 <HAL_GPIO_Init+0x5a>
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d02b      	beq.n	8000916 <HAL_GPIO_Init+0x9a>
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d804      	bhi.n	80008cc <HAL_GPIO_Init+0x50>
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d031      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d01c      	beq.n	8000904 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ca:	e048      	b.n	800095e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d043      	beq.n	8000958 <HAL_GPIO_Init+0xdc>
 80008d0:	2b11      	cmp	r3, #17
 80008d2:	d01b      	beq.n	800090c <HAL_GPIO_Init+0x90>
          break;
 80008d4:	e043      	b.n	800095e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008d6:	4a89      	ldr	r2, [pc, #548]	; (8000afc <HAL_GPIO_Init+0x280>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d026      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008dc:	4a87      	ldr	r2, [pc, #540]	; (8000afc <HAL_GPIO_Init+0x280>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d806      	bhi.n	80008f0 <HAL_GPIO_Init+0x74>
 80008e2:	4a87      	ldr	r2, [pc, #540]	; (8000b00 <HAL_GPIO_Init+0x284>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d020      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008e8:	4a86      	ldr	r2, [pc, #536]	; (8000b04 <HAL_GPIO_Init+0x288>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d01d      	beq.n	800092a <HAL_GPIO_Init+0xae>
          break;
 80008ee:	e036      	b.n	800095e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008f0:	4a85      	ldr	r2, [pc, #532]	; (8000b08 <HAL_GPIO_Init+0x28c>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d019      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008f6:	4a85      	ldr	r2, [pc, #532]	; (8000b0c <HAL_GPIO_Init+0x290>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d016      	beq.n	800092a <HAL_GPIO_Init+0xae>
 80008fc:	4a84      	ldr	r2, [pc, #528]	; (8000b10 <HAL_GPIO_Init+0x294>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d013      	beq.n	800092a <HAL_GPIO_Init+0xae>
          break;
 8000902:	e02c      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e028      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	3304      	adds	r3, #4
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e023      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	3308      	adds	r3, #8
 800091c:	623b      	str	r3, [r7, #32]
          break;
 800091e:	e01e      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	330c      	adds	r3, #12
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e019      	b.n	800095e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d102      	bne.n	8000938 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000932:	2304      	movs	r3, #4
 8000934:	623b      	str	r3, [r7, #32]
          break;
 8000936:	e012      	b.n	800095e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d105      	bne.n	800094c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000940:	2308      	movs	r3, #8
 8000942:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	611a      	str	r2, [r3, #16]
          break;
 800094a:	e008      	b.n	800095e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800094c:	2308      	movs	r3, #8
 800094e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	69fa      	ldr	r2, [r7, #28]
 8000954:	615a      	str	r2, [r3, #20]
          break;
 8000956:	e002      	b.n	800095e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
          break;
 800095c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	2bff      	cmp	r3, #255	; 0xff
 8000962:	d801      	bhi.n	8000968 <HAL_GPIO_Init+0xec>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	e001      	b.n	800096c <HAL_GPIO_Init+0xf0>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3304      	adds	r3, #4
 800096c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	2bff      	cmp	r3, #255	; 0xff
 8000972:	d802      	bhi.n	800097a <HAL_GPIO_Init+0xfe>
 8000974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	e002      	b.n	8000980 <HAL_GPIO_Init+0x104>
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	3b08      	subs	r3, #8
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	210f      	movs	r1, #15
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	401a      	ands	r2, r3
 8000992:	6a39      	ldr	r1, [r7, #32]
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	431a      	orrs	r2, r3
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	f000 8096 	beq.w	8000ada <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	4b59      	ldr	r3, [pc, #356]	; (8000b14 <HAL_GPIO_Init+0x298>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a58      	ldr	r2, [pc, #352]	; (8000b14 <HAL_GPIO_Init+0x298>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b56      	ldr	r3, [pc, #344]	; (8000b14 <HAL_GPIO_Init+0x298>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009c6:	4a54      	ldr	r2, [pc, #336]	; (8000b18 <HAL_GPIO_Init+0x29c>)
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	3302      	adds	r3, #2
 80009ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	220f      	movs	r2, #15
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	4013      	ands	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4b      	ldr	r2, [pc, #300]	; (8000b1c <HAL_GPIO_Init+0x2a0>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d013      	beq.n	8000a1a <HAL_GPIO_Init+0x19e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a4a      	ldr	r2, [pc, #296]	; (8000b20 <HAL_GPIO_Init+0x2a4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d00d      	beq.n	8000a16 <HAL_GPIO_Init+0x19a>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a49      	ldr	r2, [pc, #292]	; (8000b24 <HAL_GPIO_Init+0x2a8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d007      	beq.n	8000a12 <HAL_GPIO_Init+0x196>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a48      	ldr	r2, [pc, #288]	; (8000b28 <HAL_GPIO_Init+0x2ac>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_GPIO_Init+0x192>
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e006      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e004      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e002      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a16:	2301      	movs	r3, #1
 8000a18:	e000      	b.n	8000a1c <HAL_GPIO_Init+0x1a0>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a1e:	f002 0203 	and.w	r2, r2, #3
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4093      	lsls	r3, r2
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a2c:	493a      	ldr	r1, [pc, #232]	; (8000b18 <HAL_GPIO_Init+0x29c>)
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a30:	089b      	lsrs	r3, r3, #2
 8000a32:	3302      	adds	r3, #2
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4938      	ldr	r1, [pc, #224]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	600b      	str	r3, [r1, #0]
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4933      	ldr	r1, [pc, #204]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a5e:	4013      	ands	r3, r2
 8000a60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d006      	beq.n	8000a7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a6e:	4b2f      	ldr	r3, [pc, #188]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	492e      	ldr	r1, [pc, #184]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	604b      	str	r3, [r1, #4]
 8000a7a:	e006      	b.n	8000a8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a7c:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	4929      	ldr	r1, [pc, #164]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	4924      	ldr	r1, [pc, #144]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	608b      	str	r3, [r1, #8]
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	491f      	ldr	r1, [pc, #124]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	491a      	ldr	r1, [pc, #104]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60cb      	str	r3, [r1, #12]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4915      	ldr	r1, [pc, #84]	; (8000b2c <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	3301      	adds	r3, #1
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f47f aed0 	bne.w	8000890 <HAL_GPIO_Init+0x14>
  }
}
 8000af0:	bf00      	nop
 8000af2:	372c      	adds	r7, #44	; 0x2c
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	10210000 	.word	0x10210000
 8000b00:	10110000 	.word	0x10110000
 8000b04:	10120000 	.word	0x10120000
 8000b08:	10310000 	.word	0x10310000
 8000b0c:	10320000 	.word	0x10320000
 8000b10:	10220000 	.word	0x10220000
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000
 8000b1c:	40010800 	.word	0x40010800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40011000 	.word	0x40011000
 8000b28:	40011400 	.word	0x40011400
 8000b2c:	40010400 	.word	0x40010400

08000b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b40:	787b      	ldrb	r3, [r7, #1]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b46:	887a      	ldrh	r2, [r7, #2]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b4c:	e003      	b.n	8000b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	041a      	lsls	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	611a      	str	r2, [r3, #16]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr

08000b60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4013      	ands	r3, r2
 8000b78:	041a      	lsls	r2, r3, #16
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	43d9      	mvns	r1, r3
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	400b      	ands	r3, r1
 8000b82:	431a      	orrs	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	611a      	str	r2, [r3, #16]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b94:	b08b      	sub	sp, #44	; 0x2c
 8000b96:	af06      	add	r7, sp, #24
 8000b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d101      	bne.n	8000ba4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e0fd      	b.n	8000da0 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d106      	bne.n	8000bbe <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f008 fb19 	bl	80091f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f002 f82a 	bl	8002c24 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	687e      	ldr	r6, [r7, #4]
 8000bd8:	466d      	mov	r5, sp
 8000bda:	f106 0410 	add.w	r4, r6, #16
 8000bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	602b      	str	r3, [r5, #0]
 8000be6:	1d33      	adds	r3, r6, #4
 8000be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	f001 fff4 	bl	8002bd8 <USB_CoreInit>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d005      	beq.n	8000c02 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e0ce      	b.n	8000da0 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f002 f825 	bl	8002c58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e04c      	b.n	8000cae <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	440b      	add	r3, r1
 8000c24:	3301      	adds	r3, #1
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	4613      	mov	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	4413      	add	r3, r2
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	440b      	add	r3, r1
 8000c3a:	7bfa      	ldrb	r2, [r7, #15]
 8000c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c3e:	7bfa      	ldrb	r2, [r7, #15]
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	b298      	uxth	r0, r3
 8000c44:	6879      	ldr	r1, [r7, #4]
 8000c46:	4613      	mov	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	3336      	adds	r3, #54	; 0x36
 8000c52:	4602      	mov	r2, r0
 8000c54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	1c5a      	adds	r2, r3, #1
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3303      	adds	r3, #3
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c6c:	7bfa      	ldrb	r2, [r7, #15]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3338      	adds	r3, #56	; 0x38
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c80:	7bfa      	ldrb	r2, [r7, #15]
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	440b      	add	r3, r1
 8000c8e:	333c      	adds	r3, #60	; 0x3c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c94:	7bfa      	ldrb	r2, [r7, #15]
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3340      	adds	r3, #64	; 0x40
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	3301      	adds	r3, #1
 8000cac:	73fb      	strb	r3, [r7, #15]
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d3ad      	bcc.n	8000c14 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e044      	b.n	8000d48 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cbe:	7bfa      	ldrb	r2, [r7, #15]
 8000cc0:	6879      	ldr	r1, [r7, #4]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cd4:	7bfa      	ldrb	r2, [r7, #15]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cea:	7bfa      	ldrb	r2, [r7, #15]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	00db      	lsls	r3, r3, #3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	440b      	add	r3, r1
 8000d3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	3301      	adds	r3, #1
 8000d46:	73fb      	strb	r3, [r7, #15]
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3b5      	bcc.n	8000cbe <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	687e      	ldr	r6, [r7, #4]
 8000d5a:	466d      	mov	r5, sp
 8000d5c:	f106 0410 	add.w	r4, r6, #16
 8000d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d64:	6823      	ldr	r3, [r4, #0]
 8000d66:	602b      	str	r3, [r5, #0]
 8000d68:	1d33      	adds	r3, r6, #4
 8000d6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d6c:	6838      	ldr	r0, [r7, #0]
 8000d6e:	f001 ff7f 	bl	8002c70 <USB_DevInit>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e00d      	b.n	8000da0 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 ff19 	bl	8004bd0 <USB_DevDisconnect>

  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000da8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_PCD_Start+0x16>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e016      	b.n	8000dec <HAL_PCD_Start+0x44>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f001 ff14 	bl	8002bf8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f008 fc7f 	bl	80096d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f003 feed 	bl	8004bbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 feef 	bl	8004be4 <USB_ReadInterrupts>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e10:	d102      	bne.n	8000e18 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 fb61 	bl	80014da <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fee1 	bl	8004be4 <USB_ReadInterrupts>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2c:	d112      	bne.n	8000e54 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e40:	b292      	uxth	r2, r2
 8000e42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f008 fa4d 	bl	80092e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 f925 	bl	800109e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fec3 	bl	8004be4 <USB_ReadInterrupts>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e68:	d10b      	bne.n	8000e82 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e7c:	b292      	uxth	r2, r2
 8000e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f003 feac 	bl	8004be4 <USB_ReadInterrupts>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e96:	d10b      	bne.n	8000eb0 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea0:	b29a      	uxth	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fe95 	bl	8004be4 <USB_ReadInterrupts>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec4:	d126      	bne.n	8000f14 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0204 	bic.w	r2, r2, #4
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0208 	bic.w	r2, r2, #8
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f008 fa2e 	bl	8009358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fe63 	bl	8004be4 <USB_ReadInterrupts>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f28:	f040 8084 	bne.w	8001034 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	77fb      	strb	r3, [r7, #31]
 8000f30:	e011      	b.n	8000f56 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	461a      	mov	r2, r3
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	441a      	add	r2, r3
 8000f3e:	7ffb      	ldrb	r3, [r7, #31]
 8000f40:	8812      	ldrh	r2, [r2, #0]
 8000f42:	b292      	uxth	r2, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	f107 0120 	add.w	r1, r7, #32
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f50:	7ffb      	ldrb	r3, [r7, #31]
 8000f52:	3301      	adds	r3, #1
 8000f54:	77fb      	strb	r3, [r7, #31]
 8000f56:	7ffb      	ldrb	r3, [r7, #31]
 8000f58:	2b07      	cmp	r3, #7
 8000f5a:	d9ea      	bls.n	8000f32 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0201 	bic.w	r2, r2, #1
 8000f86:	b292      	uxth	r2, r2
 8000f88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f8c:	bf00      	nop
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d0f6      	beq.n	8000f8e <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	77fb      	strb	r3, [r7, #31]
 8000fbc:	e010      	b.n	8000fe0 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000fbe:	7ffb      	ldrb	r3, [r7, #31]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	7ffa      	ldrb	r2, [r7, #31]
 8000fc8:	0092      	lsls	r2, r2, #2
 8000fca:	440a      	add	r2, r1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	f107 0120 	add.w	r1, r7, #32
 8000fd2:	440b      	add	r3, r1
 8000fd4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fd8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000fda:	7ffb      	ldrb	r3, [r7, #31]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	77fb      	strb	r3, [r7, #31]
 8000fe0:	7ffb      	ldrb	r3, [r7, #31]
 8000fe2:	2b07      	cmp	r3, #7
 8000fe4:	d9eb      	bls.n	8000fbe <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0208 	orr.w	r2, r2, #8
 8000ff8:	b292      	uxth	r2, r2
 8000ffa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001006:	b29a      	uxth	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001010:	b292      	uxth	r2, r2
 8001012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800101e:	b29a      	uxth	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f042 0204 	orr.w	r2, r2, #4
 8001028:	b292      	uxth	r2, r2
 800102a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f008 f978 	bl	8009324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fdd3 	bl	8004be4 <USB_ReadInterrupts>
 800103e:	4603      	mov	r3, r0
 8001040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001048:	d10e      	bne.n	8001068 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800105c:	b292      	uxth	r2, r2
 800105e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f008 f931 	bl	80092ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fdb9 	bl	8004be4 <USB_ReadInterrupts>
 8001072:	4603      	mov	r3, r0
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800107c:	d10b      	bne.n	8001096 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001090:	b292      	uxth	r2, r2
 8001092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	460b      	mov	r3, r1
 80010a8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d101      	bne.n	80010b8 <HAL_PCD_SetAddress+0x1a>
 80010b4:	2302      	movs	r3, #2
 80010b6:	e013      	b.n	80010e0 <HAL_PCD_SetAddress+0x42>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	78fa      	ldrb	r2, [r7, #3]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fd60 	bl	8004b96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	4608      	mov	r0, r1
 80010f2:	4611      	mov	r1, r2
 80010f4:	461a      	mov	r2, r3
 80010f6:	4603      	mov	r3, r0
 80010f8:	70fb      	strb	r3, [r7, #3]
 80010fa:	460b      	mov	r3, r1
 80010fc:	803b      	strh	r3, [r7, #0]
 80010fe:	4613      	mov	r3, r2
 8001100:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001106:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800110a:	2b00      	cmp	r3, #0
 800110c:	da0e      	bge.n	800112c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	1c5a      	adds	r2, r3, #1
 8001116:	4613      	mov	r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2201      	movs	r2, #1
 8001128:	705a      	strb	r2, [r3, #1]
 800112a:	e00e      	b.n	800114a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	f003 0207 	and.w	r2, r3, #7
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800114a:	78fb      	ldrb	r3, [r7, #3]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	b2da      	uxtb	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001156:	883a      	ldrh	r2, [r7, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	78ba      	ldrb	r2, [r7, #2]
 8001160:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	785b      	ldrb	r3, [r3, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001174:	78bb      	ldrb	r3, [r7, #2]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d102      	bne.n	8001180 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2200      	movs	r2, #0
 800117e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_PCD_EP_Open+0xa6>
 800118a:	2302      	movs	r3, #2
 800118c:	e00e      	b.n	80011ac <HAL_PCD_EP_Open+0xc4>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	68f9      	ldr	r1, [r7, #12]
 800119c:	4618      	mov	r0, r3
 800119e:	f001 fd87 	bl	8002cb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80011aa:	7afb      	ldrb	r3, [r7, #11]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	da0e      	bge.n	80011e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2201      	movs	r2, #1
 80011e2:	705a      	strb	r2, [r3, #1]
 80011e4:	e00e      	b.n	8001204 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	f003 0207 	and.w	r2, r3, #7
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001204:	78fb      	ldrb	r3, [r7, #3]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	b2da      	uxtb	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <HAL_PCD_EP_Close+0x6a>
 800121a:	2302      	movs	r3, #2
 800121c:	e00e      	b.n	800123c <HAL_PCD_EP_Close+0x88>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68f9      	ldr	r1, [r7, #12]
 800122c:	4618      	mov	r0, r3
 800122e:	f002 f8a9 	bl	8003384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	460b      	mov	r3, r1
 8001252:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	f003 0207 	and.w	r2, r3, #7
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	2200      	movs	r2, #0
 8001282:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001284:	7afb      	ldrb	r3, [r7, #11]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	b2da      	uxtb	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001290:	7afb      	ldrb	r3, [r7, #11]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6979      	ldr	r1, [r7, #20]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fa5b 	bl	800375c <USB_EPStartXfer>
 80012a6:	e005      	b.n	80012b4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6979      	ldr	r1, [r7, #20]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fa54 	bl	800375c <USB_EPStartXfer>
  }

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	f003 0207 	and.w	r2, r3, #7
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012e0:	681b      	ldr	r3, [r3, #0]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	460b      	mov	r3, r1
 80012fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012fc:	7afb      	ldrb	r3, [r7, #11]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2201      	movs	r2, #1
 8001336:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001338:	7afb      	ldrb	r3, [r7, #11]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	b2da      	uxtb	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001344:	7afb      	ldrb	r3, [r7, #11]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	2b00      	cmp	r3, #0
 800134c:	d106      	bne.n	800135c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6979      	ldr	r1, [r7, #20]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fa01 	bl	800375c <USB_EPStartXfer>
 800135a:	e005      	b.n	8001368 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6979      	ldr	r1, [r7, #20]
 8001362:	4618      	mov	r0, r3
 8001364:	f002 f9fa 	bl	800375c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	f003 0207 	and.w	r2, r3, #7
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d901      	bls.n	8001390 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e04c      	b.n	800142a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da0e      	bge.n	80013b6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2201      	movs	r2, #1
 80013b2:	705a      	strb	r2, [r3, #1]
 80013b4:	e00c      	b.n	80013d0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80013b6:	78fa      	ldrb	r2, [r7, #3]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2201      	movs	r2, #1
 80013d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_PCD_EP_SetStall+0x7e>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e01c      	b.n	800142a <HAL_PCD_EP_SetStall+0xb8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 facc 	bl	800499c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	2b00      	cmp	r3, #0
 800140c:	d108      	bne.n	8001420 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f003 fbf1 	bl	8004c02 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b084      	sub	sp, #16
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	460b      	mov	r3, r1
 800143c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	f003 020f 	and.w	r2, r3, #15
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	d901      	bls.n	8001450 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e040      	b.n	80014d2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001450:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da0e      	bge.n	8001476 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4613      	mov	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2201      	movs	r2, #1
 8001472:	705a      	strb	r2, [r3, #1]
 8001474:	e00e      	b.n	8001494 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	f003 0207 	and.w	r2, r3, #7
 800147c:	4613      	mov	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_PCD_EP_ClrStall+0x82>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e00e      	b.n	80014d2 <HAL_PCD_EP_ClrStall+0xa0>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68f9      	ldr	r1, [r7, #12]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 faba 	bl	8004a3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b08e      	sub	sp, #56	; 0x38
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014e2:	e2df      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ec:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80014fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 8158 	bne.w	80017b4 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001504:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	2b00      	cmp	r3, #0
 800150c:	d152      	bne.n	80015b4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800151a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800151e:	81fb      	strh	r3, [r7, #14]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800152a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800152e:	b29b      	uxth	r3, r3
 8001530:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3328      	adds	r3, #40	; 0x28
 8001536:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001540:	b29b      	uxth	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	3302      	adds	r3, #2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	4413      	add	r3, r2
 8001556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	695a      	ldr	r2, [r3, #20]
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	441a      	add	r2, r3
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001572:	2100      	movs	r1, #0
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f007 fe8e 	bl	8009296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 828e 	beq.w	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f040 8289 	bne.w	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80015b2:	e277      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d034      	beq.n	8001638 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	461a      	mov	r2, r3
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	4413      	add	r3, r2
 80015e2:	3306      	adds	r3, #6
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	4413      	add	r3, r2
 80015ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6818      	ldr	r0, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800160c:	b29b      	uxth	r3, r3
 800160e:	f003 fb47 	bl	8004ca0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800161e:	4013      	ands	r3, r2
 8001620:	823b      	strh	r3, [r7, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	8a3a      	ldrh	r2, [r7, #16]
 8001628:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800162c:	b292      	uxth	r2, r2
 800162e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f007 fe03 	bl	800923c <HAL_PCD_SetupStageCallback>
 8001636:	e235      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001638:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800163c:	2b00      	cmp	r3, #0
 800163e:	f280 8231 	bge.w	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29a      	uxth	r2, r3
 800164a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800164e:	4013      	ands	r3, r2
 8001650:	83bb      	strh	r3, [r7, #28]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	8bba      	ldrh	r2, [r7, #28]
 8001658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800165c:	b292      	uxth	r2, r2
 800165e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001668:	b29b      	uxth	r3, r3
 800166a:	461a      	mov	r2, r3
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4413      	add	r3, r2
 8001674:	3306      	adds	r3, #6
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4413      	add	r3, r2
 800167e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d019      	beq.n	80016c8 <PCD_EP_ISR_Handler+0x1ee>
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d015      	beq.n	80016c8 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	6959      	ldr	r1, [r3, #20]
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f003 faf7 	bl	8004ca0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	441a      	add	r2, r3
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016c0:	2100      	movs	r1, #0
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f007 fdcc 	bl	8009260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4413      	add	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d112      	bne.n	8001716 <PCD_EP_ISR_Handler+0x23c>
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800170a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800170e:	b29a      	uxth	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	e02f      	b.n	8001776 <PCD_EP_ISR_Handler+0x29c>
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b3e      	cmp	r3, #62	; 0x3e
 800171c:	d813      	bhi.n	8001746 <PCD_EP_ISR_Handler+0x26c>
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <PCD_EP_ISR_Handler+0x25e>
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	3301      	adds	r3, #1
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
 8001738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173a:	b29b      	uxth	r3, r3
 800173c:	029b      	lsls	r3, r3, #10
 800173e:	b29a      	uxth	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	801a      	strh	r2, [r3, #0]
 8001744:	e017      	b.n	8001776 <PCD_EP_ISR_Handler+0x29c>
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	633b      	str	r3, [r7, #48]	; 0x30
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	2b00      	cmp	r3, #0
 8001758:	d102      	bne.n	8001760 <PCD_EP_ISR_Handler+0x286>
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	3b01      	subs	r3, #1
 800175e:	633b      	str	r3, [r7, #48]	; 0x30
 8001760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001762:	b29b      	uxth	r3, r3
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	b29b      	uxth	r3, r3
 8001768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800176c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001770:	b29a      	uxth	r2, r3
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001786:	827b      	strh	r3, [r7, #18]
 8001788:	8a7b      	ldrh	r3, [r7, #18]
 800178a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800178e:	827b      	strh	r3, [r7, #18]
 8001790:	8a7b      	ldrh	r3, [r7, #18]
 8001792:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001796:	827b      	strh	r3, [r7, #18]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	8a7b      	ldrh	r3, [r7, #18]
 800179e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80017a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80017a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	8013      	strh	r3, [r2, #0]
 80017b2:	e177      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	881b      	ldrh	r3, [r3, #0]
 80017c4:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f280 80ea 	bge.w	80019a4 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017e6:	4013      	ands	r3, r2
 80017e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017fe:	b292      	uxth	r2, r2
 8001800:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001802:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	7b1b      	ldrb	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d122      	bne.n	8001866 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001828:	b29b      	uxth	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4413      	add	r3, r2
 8001834:	3306      	adds	r3, #6
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	4413      	add	r3, r2
 800183e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001848:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800184a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8087 	beq.w	8001960 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	6959      	ldr	r1, [r3, #20]
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	88da      	ldrh	r2, [r3, #6]
 800185e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001860:	f003 fa1e 	bl	8004ca0 <USB_ReadPMA>
 8001864:	e07c      	b.n	8001960 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	78db      	ldrb	r3, [r3, #3]
 800186a:	2b02      	cmp	r3, #2
 800186c:	d108      	bne.n	8001880 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800186e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001870:	461a      	mov	r2, r3
 8001872:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f923 	bl	8001ac0 <HAL_PCD_EP_DB_Receive>
 800187a:	4603      	mov	r3, r0
 800187c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800187e:	e06f      	b.n	8001960 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4413      	add	r3, r2
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	b29b      	uxth	r3, r3
 8001892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189a:	847b      	strh	r3, [r7, #34]	; 0x22
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	441a      	add	r2, r3
 80018aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80018ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018bc:	b29b      	uxth	r3, r3
 80018be:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d021      	beq.n	800191e <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	3302      	adds	r3, #2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001902:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001904:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001906:	2b00      	cmp	r3, #0
 8001908:	d02a      	beq.n	8001960 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	6959      	ldr	r1, [r3, #20]
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	891a      	ldrh	r2, [r3, #8]
 8001916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001918:	f003 f9c2 	bl	8004ca0 <USB_ReadPMA>
 800191c:	e020      	b.n	8001960 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001926:	b29b      	uxth	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	3306      	adds	r3, #6
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001946:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001948:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	6959      	ldr	r1, [r3, #20]
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	895a      	ldrh	r2, [r3, #10]
 800195a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800195c:	f003 f9a0 	bl	8004ca0 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001966:	441a      	add	r2, r3
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001972:	441a      	add	r2, r3
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <PCD_EP_ISR_Handler+0x4b0>
 8001980:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	429a      	cmp	r2, r3
 8001988:	d206      	bcs.n	8001998 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f007 fc65 	bl	8009260 <HAL_PCD_DataOutStageCallback>
 8001996:	e005      	b.n	80019a4 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800199e:	4618      	mov	r0, r3
 80019a0:	f001 fedc 	bl	800375c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80019a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d07a      	beq.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80019ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	4413      	add	r3, r2
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019dc:	843b      	strh	r3, [r7, #32]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	441a      	add	r2, r3
 80019ec:	8c3b      	ldrh	r3, [r7, #32]
 80019ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	78db      	ldrb	r3, [r3, #3]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d108      	bne.n	8001a14 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d146      	bne.n	8001a98 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d141      	bne.n	8001a98 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	461a      	mov	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	8bfb      	ldrh	r3, [r7, #30]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d906      	bls.n	8001a56 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	8bfb      	ldrh	r3, [r7, #30]
 8001a4e:	1ad2      	subs	r2, r2, r3
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	619a      	str	r2, [r3, #24]
 8001a54:	e002      	b.n	8001a5c <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f007 fc13 	bl	8009296 <HAL_PCD_DataInStageCallback>
 8001a70:	e018      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	8bfb      	ldrh	r3, [r7, #30]
 8001a78:	441a      	add	r2, r3
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	8bfb      	ldrh	r3, [r7, #30]
 8001a84:	441a      	add	r2, r3
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fe63 	bl	800375c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a96:	e005      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a98:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f91b 	bl	8001cda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	b21b      	sxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f6ff ad17 	blt.w	80014e4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3738      	adds	r7, #56	; 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	4613      	mov	r3, r2
 8001acc:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d07e      	beq.n	8001bd6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	3302      	adds	r3, #2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	8b7b      	ldrh	r3, [r7, #26]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d306      	bcc.n	8001b1a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	8b7b      	ldrh	r3, [r7, #26]
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	619a      	str	r2, [r3, #24]
 8001b18:	e002      	b.n	8001b20 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d123      	bne.n	8001b70 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b42:	833b      	strh	r3, [r7, #24]
 8001b44:	8b3b      	ldrh	r3, [r7, #24]
 8001b46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b4a:	833b      	strh	r3, [r7, #24]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	441a      	add	r2, r3
 8001b5a:	8b3b      	ldrh	r3, [r7, #24]
 8001b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01f      	beq.n	8001bba <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b94:	82fb      	strh	r3, [r7, #22]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	441a      	add	r2, r3
 8001ba4:	8afb      	ldrh	r3, [r7, #22]
 8001ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001bba:	8b7b      	ldrh	r3, [r7, #26]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8087 	beq.w	8001cd0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	6959      	ldr	r1, [r3, #20]
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	891a      	ldrh	r2, [r3, #8]
 8001bce:	8b7b      	ldrh	r3, [r7, #26]
 8001bd0:	f003 f866 	bl	8004ca0 <USB_ReadPMA>
 8001bd4:	e07c      	b.n	8001cd0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	3306      	adds	r3, #6
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	8b7b      	ldrh	r3, [r7, #26]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d306      	bcc.n	8001c18 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	8b7b      	ldrh	r3, [r7, #26]
 8001c10:	1ad2      	subs	r2, r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	619a      	str	r2, [r3, #24]
 8001c16:	e002      	b.n	8001c1e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d123      	bne.n	8001c6e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c40:	83fb      	strh	r3, [r7, #30]
 8001c42:	8bfb      	ldrh	r3, [r7, #30]
 8001c44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c48:	83fb      	strh	r3, [r7, #30]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	441a      	add	r2, r3
 8001c58:	8bfb      	ldrh	r3, [r7, #30]
 8001c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d11f      	bne.n	8001cb8 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c92:	83bb      	strh	r3, [r7, #28]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	441a      	add	r2, r3
 8001ca2:	8bbb      	ldrh	r3, [r7, #28]
 8001ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001cb8:	8b7b      	ldrh	r3, [r7, #26]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d008      	beq.n	8001cd0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6818      	ldr	r0, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6959      	ldr	r1, [r3, #20]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	895a      	ldrh	r2, [r3, #10]
 8001cca:	8b7b      	ldrh	r3, [r7, #26]
 8001ccc:	f002 ffe8 	bl	8004ca0 <USB_ReadPMA>
    }
  }

  return count;
 8001cd0:	8b7b      	ldrh	r3, [r7, #26]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b092      	sub	sp, #72	; 0x48
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8132 	beq.w	8001f58 <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6812      	ldr	r2, [r2, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d1c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	699a      	ldr	r2, [r3, #24]
 8001d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d906      	bls.n	8001d36 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d2e:	1ad2      	subs	r2, r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	619a      	str	r2, [r3, #24]
 8001d34:	e002      	b.n	8001d3c <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d12c      	bne.n	8001d9e <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f007 faa3 	bl	8009296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 822f 	beq.w	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d76:	827b      	strh	r3, [r7, #18]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	441a      	add	r2, r3
 8001d86:	8a7b      	ldrh	r3, [r7, #18]
 8001d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	8013      	strh	r3, [r2, #0]
 8001d9c:	e20d      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d01f      	beq.n	8001de8 <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	881b      	ldrh	r3, [r3, #0]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	441a      	add	r2, r3
 8001dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f040 81e3 	bne.w	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e06:	441a      	add	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	6a1a      	ldr	r2, [r3, #32]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d309      	bcc.n	8001e2c <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	6a1a      	ldr	r2, [r3, #32]
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	621a      	str	r2, [r3, #32]
 8001e2a:	e014      	b.n	8001e56 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e36:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e40:	e009      	b.n	8001e56 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	2200      	movs	r2, #0
 8001e54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d155      	bne.n	8001f0a <HAL_PCD_EP_DB_Transmit+0x230>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4413      	add	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	011a      	lsls	r2, r3, #4
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d112      	bne.n	8001eb2 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	801a      	strh	r2, [r3, #0]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	801a      	strh	r2, [r3, #0]
 8001eb0:	e047      	b.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x268>
 8001eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb4:	2b3e      	cmp	r3, #62	; 0x3e
 8001eb6:	d811      	bhi.n	8001edc <HAL_PCD_EP_DB_Transmit+0x202>
 8001eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eca:	3301      	adds	r3, #1
 8001ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	029b      	lsls	r3, r3, #10
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	801a      	strh	r2, [r3, #0]
 8001eda:	e032      	b.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x268>
 8001edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <HAL_PCD_EP_DB_Transmit+0x218>
 8001eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	029b      	lsls	r3, r3, #10
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	801a      	strh	r2, [r3, #0]
 8001f08:	e01b      	b.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	785b      	ldrb	r3, [r3, #1]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d117      	bne.n	8001f42 <HAL_PCD_EP_DB_Transmit+0x268>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	623b      	str	r3, [r7, #32]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	461a      	mov	r2, r3
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	4413      	add	r3, r2
 8001f28:	623b      	str	r3, [r7, #32]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	011a      	lsls	r2, r3, #4
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	4413      	add	r3, r2
 8001f34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f38:	61fb      	str	r3, [r7, #28]
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6818      	ldr	r0, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	6959      	ldr	r1, [r3, #20]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	891a      	ldrh	r2, [r3, #8]
 8001f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	f002 fe61 	bl	8004c18 <USB_WritePMA>
 8001f56:	e130      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	461a      	mov	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3306      	adds	r3, #6
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f80:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d306      	bcc.n	8001f9a <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f92:	1ad2      	subs	r2, r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	619a      	str	r2, [r3, #24]
 8001f98:	e002      	b.n	8001fa0 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d12c      	bne.n	8002002 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f007 f971 	bl	8009296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 80fd 	bne.w	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	881b      	ldrh	r3, [r3, #0]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fda:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	441a      	add	r2, r3
 8001fea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]
 8002000:	e0db      	b.n	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11f      	bne.n	800204c <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002026:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	441a      	add	r2, r3
 8002036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800203c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002040:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002048:	b29b      	uxth	r3, r3
 800204a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 80b1 	bne.w	80021ba <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800205e:	441a      	add	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	69da      	ldr	r2, [r3, #28]
 8002068:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800206a:	441a      	add	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d309      	bcc.n	8002090 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002088:	1ad2      	subs	r2, r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	621a      	str	r2, [r3, #32]
 800208e:	e014      	b.n	80020ba <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 8002098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800209a:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80020a4:	e009      	b.n	80020ba <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2200      	movs	r2, #0
 80020b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	637b      	str	r3, [r7, #52]	; 0x34
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	785b      	ldrb	r3, [r3, #1]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d155      	bne.n	8002174 <HAL_PCD_EP_DB_Transmit+0x49a>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	4413      	add	r3, r2
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	011a      	lsls	r2, r3, #4
 80020e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e8:	4413      	add	r3, r2
 80020ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
 80020f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d112      	bne.n	800211c <HAL_PCD_EP_DB_Transmit+0x442>
 80020f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002100:	b29a      	uxth	r2, r3
 8002102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002114:	b29a      	uxth	r2, r3
 8002116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	e044      	b.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	2b3e      	cmp	r3, #62	; 0x3e
 8002120:	d811      	bhi.n	8002146 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002124:	085b      	lsrs	r3, r3, #1
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_PCD_EP_DB_Transmit+0x45e>
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	3301      	adds	r3, #1
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213a:	b29b      	uxth	r3, r3
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	b29a      	uxth	r2, r3
 8002140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002142:	801a      	strh	r2, [r3, #0]
 8002144:	e02f      	b.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <HAL_PCD_EP_DB_Transmit+0x482>
 8002156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002158:	3b01      	subs	r3, #1
 800215a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215e:	b29b      	uxth	r3, r3
 8002160:	029b      	lsls	r3, r3, #10
 8002162:	b29b      	uxth	r3, r3
 8002164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800216c:	b29a      	uxth	r2, r3
 800216e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002170:	801a      	strh	r2, [r3, #0]
 8002172:	e018      	b.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	785b      	ldrb	r3, [r3, #1]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d114      	bne.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218a:	4413      	add	r3, r2
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	011a      	lsls	r2, r3, #4
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	4413      	add	r3, r2
 8002198:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800219c:	633b      	str	r3, [r7, #48]	; 0x30
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6818      	ldr	r0, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6959      	ldr	r1, [r3, #20]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	895a      	ldrh	r2, [r3, #10]
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	f002 fd2f 	bl	8004c18 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d4:	823b      	strh	r3, [r7, #16]
 80021d6:	8a3b      	ldrh	r3, [r7, #16]
 80021d8:	f083 0310 	eor.w	r3, r3, #16
 80021dc:	823b      	strh	r3, [r7, #16]
 80021de:	8a3b      	ldrh	r3, [r7, #16]
 80021e0:	f083 0320 	eor.w	r3, r3, #32
 80021e4:	823b      	strh	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	441a      	add	r2, r3
 80021f4:	8a3b      	ldrh	r3, [r7, #16]
 80021f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002206:	b29b      	uxth	r3, r3
 8002208:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3748      	adds	r7, #72	; 0x48
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	460b      	mov	r3, r1
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	4613      	mov	r3, r2
 8002224:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002226:	897b      	ldrh	r3, [r7, #10]
 8002228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002232:	897b      	ldrh	r3, [r7, #10]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e009      	b.n	800225e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800224a:	897a      	ldrh	r2, [r7, #10]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4413      	add	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800225e:	893b      	ldrh	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2200      	movs	r2, #0
 8002268:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	b29a      	uxth	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	80da      	strh	r2, [r3, #6]
 8002272:	e00b      	b.n	800228c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2201      	movs	r2, #1
 8002278:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	b29a      	uxth	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	0c1b      	lsrs	r3, r3, #16
 8002286:	b29a      	uxth	r2, r3
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	371c      	adds	r7, #28
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e26c      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8087 	beq.w	80023c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b8:	4b92      	ldr	r3, [pc, #584]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d00c      	beq.n	80022de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c4:	4b8f      	ldr	r3, [pc, #572]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d112      	bne.n	80022f6 <HAL_RCC_OscConfig+0x5e>
 80022d0:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022dc:	d10b      	bne.n	80022f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d06c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x12c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d168      	bne.n	80023c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e246      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x76>
 8002300:	4b80      	ldr	r3, [pc, #512]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a7f      	ldr	r2, [pc, #508]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e02e      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b7b      	ldr	r3, [pc, #492]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7a      	ldr	r2, [pc, #488]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b78      	ldr	r3, [pc, #480]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a77      	ldr	r2, [pc, #476]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0xbc>
 800233a:	4b72      	ldr	r3, [pc, #456]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a71      	ldr	r2, [pc, #452]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6f      	ldr	r3, [pc, #444]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6e      	ldr	r2, [pc, #440]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 8002354:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6a      	ldr	r2, [pc, #424]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b68      	ldr	r3, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a67      	ldr	r2, [pc, #412]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe f96a 	bl	800064c <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe f966 	bl	800064c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e1fa      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b5d      	ldr	r3, [pc, #372]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xe4>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe f956 	bl	800064c <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe f952 	bl	800064c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1e6      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b53      	ldr	r3, [pc, #332]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x10c>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d2:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023de:	4b49      	ldr	r3, [pc, #292]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x18c>
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b43      	ldr	r3, [pc, #268]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x176>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1ba      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4939      	ldr	r1, [pc, #228]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e03a      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_RCC_OscConfig+0x270>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7fe f90b 	bl	800064c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243a:	f7fe f907 	bl	800064c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e19b      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4927      	ldr	r1, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b26      	ldr	r3, [pc, #152]	; (8002508 <HAL_RCC_OscConfig+0x270>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7fe f8ea 	bl	800064c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7fe f8e6 	bl	800064c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e17a      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03a      	beq.n	800251c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d019      	beq.n	80024e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b17      	ldr	r3, [pc, #92]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7fe f8ca 	bl	800064c <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7fe f8c6 	bl	800064c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e15a      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f000 faa8 	bl	8002a30 <RCC_Delay>
 80024e0:	e01c      	b.n	800251c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_RCC_OscConfig+0x274>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe f8b0 	bl	800064c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ee:	e00f      	b.n	8002510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe f8ac 	bl	800064c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d908      	bls.n	8002510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e140      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	42420000 	.word	0x42420000
 800250c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b9e      	ldr	r3, [pc, #632]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e9      	bne.n	80024f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a6 	beq.w	8002676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b97      	ldr	r3, [pc, #604]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b94      	ldr	r3, [pc, #592]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a93      	ldr	r2, [pc, #588]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]
 8002546:	4b91      	ldr	r3, [pc, #580]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b8e      	ldr	r3, [pc, #568]	; (8002790 <HAL_RCC_OscConfig+0x4f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b8b      	ldr	r3, [pc, #556]	; (8002790 <HAL_RCC_OscConfig+0x4f8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <HAL_RCC_OscConfig+0x4f8>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7fe f86d 	bl	800064c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7fe f869 	bl	800064c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	; 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0fd      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b81      	ldr	r3, [pc, #516]	; (8002790 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x312>
 800259c:	4b7b      	ldr	r3, [pc, #492]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a7a      	ldr	r2, [pc, #488]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	e02d      	b.n	8002606 <HAL_RCC_OscConfig+0x36e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x334>
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a72      	ldr	r2, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	6213      	str	r3, [r2, #32]
 80025ca:	e01c      	b.n	8002606 <HAL_RCC_OscConfig+0x36e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d10c      	bne.n	80025ee <HAL_RCC_OscConfig+0x356>
 80025d4:	4b6d      	ldr	r3, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a6c      	ldr	r2, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a69      	ldr	r2, [pc, #420]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6213      	str	r3, [r2, #32]
 80025ec:	e00b      	b.n	8002606 <HAL_RCC_OscConfig+0x36e>
 80025ee:	4b67      	ldr	r3, [pc, #412]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a66      	ldr	r2, [pc, #408]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	4b64      	ldr	r3, [pc, #400]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a63      	ldr	r2, [pc, #396]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d015      	beq.n	800263a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7fe f81d 	bl	800064c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe f819 	bl	800064c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0ab      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ee      	beq.n	8002616 <HAL_RCC_OscConfig+0x37e>
 8002638:	e014      	b.n	8002664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7fe f807 	bl	800064c <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe f803 	bl	800064c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e095      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002658:	4b4c      	ldr	r3, [pc, #304]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ee      	bne.n	8002642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a47      	ldr	r2, [pc, #284]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8081 	beq.w	8002782 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002680:	4b42      	ldr	r3, [pc, #264]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d061      	beq.n	8002750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d146      	bne.n	8002722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_OscConfig+0x4fc>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fd ffd7 	bl	800064c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7fd ffd3 	bl	800064c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e067      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d108      	bne.n	80026dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	492d      	ldr	r1, [pc, #180]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a19      	ldr	r1, [r3, #32]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	430b      	orrs	r3, r1
 80026ee:	4927      	ldr	r1, [pc, #156]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_RCC_OscConfig+0x4fc>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fd ffa7 	bl	800064c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7fd ffa3 	bl	800064c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e037      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002714:	4b1d      	ldr	r3, [pc, #116]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x46a>
 8002720:	e02f      	b.n	8002782 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_RCC_OscConfig+0x4fc>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fd ff90 	bl	800064c <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fd ff8c 	bl	800064c <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e020      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x498>
 800274e:	e018      	b.n	8002782 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e013      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x4f4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	429a      	cmp	r2, r3
 800276e:	d106      	bne.n	800277e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	429a      	cmp	r2, r3
 800277c:	d001      	beq.n	8002782 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e000      	b.n	8002784 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40007000 	.word	0x40007000
 8002794:	42420060 	.word	0x42420060

08002798 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0d0      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d910      	bls.n	80027dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b67      	ldr	r3, [pc, #412]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 0207 	bic.w	r2, r3, #7
 80027c2:	4965      	ldr	r1, [pc, #404]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ca:	4b63      	ldr	r3, [pc, #396]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d001      	beq.n	80027dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0b8      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d020      	beq.n	800282a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f4:	4b59      	ldr	r3, [pc, #356]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800280c:	4b53      	ldr	r3, [pc, #332]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002816:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b50      	ldr	r3, [pc, #320]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	494d      	ldr	r1, [pc, #308]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d040      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d107      	bne.n	800284e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d115      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e07f      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d107      	bne.n	8002866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d109      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e073      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	4b3d      	ldr	r3, [pc, #244]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e06b      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002876:	4b39      	ldr	r3, [pc, #228]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 0203 	bic.w	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4936      	ldr	r1, [pc, #216]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002888:	f7fd fee0 	bl	800064c <HAL_GetTick>
 800288c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288e:	e00a      	b.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002890:	f7fd fedc 	bl	800064c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f241 3288 	movw	r2, #5000	; 0x1388
 800289e:	4293      	cmp	r3, r2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e053      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a6:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 020c 	and.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d1eb      	bne.n	8002890 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d210      	bcs.n	80028e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c6:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 0207 	bic.w	r2, r3, #7
 80028ce:	4922      	ldr	r1, [pc, #136]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e032      	b.n	800294e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4916      	ldr	r1, [pc, #88]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	490e      	ldr	r1, [pc, #56]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002926:	f000 f821 	bl	800296c <HAL_RCC_GetSysClockFreq>
 800292a:	4601      	mov	r1, r0
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	5cd3      	ldrb	r3, [r2, r3]
 800293a:	fa21 f303 	lsr.w	r3, r1, r3
 800293e:	4a09      	ldr	r2, [pc, #36]	; (8002964 <HAL_RCC_ClockConfig+0x1cc>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <HAL_RCC_ClockConfig+0x1d0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fd fe3e 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
 8002960:	080098b8 	.word	0x080098b8
 8002964:	20000000 	.word	0x20000000
 8002968:	20000004 	.word	0x20000004

0800296c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b490      	push	{r4, r7}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002972:	4b2a      	ldr	r3, [pc, #168]	; (8002a1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002974:	1d3c      	adds	r4, r7, #4
 8002976:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002978:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <HAL_RCC_GetSysClockFreq+0xb4>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002992:	2300      	movs	r3, #0
 8002994:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	d002      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x40>
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x46>
 80029aa:	e02d      	b.n	8002a08 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ac:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ae:	623b      	str	r3, [r7, #32]
      break;
 80029b0:	e02d      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	0c9b      	lsrs	r3, r3, #18
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029be:	4413      	add	r3, r2
 80029c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	0c5b      	lsrs	r3, r3, #17
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029de:	4413      	add	r3, r2
 80029e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ea:	fb02 f203 	mul.w	r2, r2, r3
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	e004      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	623b      	str	r3, [r7, #32]
      break;
 8002a06:	e002      	b.n	8002a0e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b07      	ldr	r3, [pc, #28]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a0a:	623b      	str	r3, [r7, #32]
      break;
 8002a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3728      	adds	r7, #40	; 0x28
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc90      	pop	{r4, r7}
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	08009820 	.word	0x08009820
 8002a20:	08009830 	.word	0x08009830
 8002a24:	40021000 	.word	0x40021000
 8002a28:	007a1200 	.word	0x007a1200
 8002a2c:	003d0900 	.word	0x003d0900

08002a30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <RCC_Delay+0x34>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0a      	ldr	r2, [pc, #40]	; (8002a68 <RCC_Delay+0x38>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a5b      	lsrs	r3, r3, #9
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a4c:	bf00      	nop
  }
  while (Delay --);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1e5a      	subs	r2, r3, #1
 8002a52:	60fa      	str	r2, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <RCC_Delay+0x1c>
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000000 	.word	0x20000000
 8002a68:	10624dd3 	.word	0x10624dd3

08002a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d07d      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b4c      	ldr	r3, [pc, #304]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	4a4b      	ldr	r2, [pc, #300]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	61d3      	str	r3, [r2, #28]
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d118      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a42      	ldr	r2, [pc, #264]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002acc:	f7fd fdbe 	bl	800064c <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad4:	f7fd fdba 	bl	800064c <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b64      	cmp	r3, #100	; 0x64
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e06d      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	4b3a      	ldr	r3, [pc, #232]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0f0      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002afa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02e      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d027      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b20:	4b2c      	ldr	r3, [pc, #176]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b26:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d014      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fd fd89 	bl	800064c <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fd fd85 	bl	800064c <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e036      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ee      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4917      	ldr	r1, [pc, #92]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d105      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	490b      	ldr	r1, [pc, #44]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	4904      	ldr	r1, [pc, #16]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	42420440 	.word	0x42420440

08002bd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bd8:	b084      	sub	sp, #16
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	f107 0014 	add.w	r0, r7, #20
 8002be6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	b004      	add	sp, #16
 8002bf6:	4770      	bx	lr

08002bf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c08:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c2c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	4013      	ands	r3, r2
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c70:	b084      	sub	sp, #16
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	f107 0014 	add.w	r0, r7, #20
 8002c7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	b004      	add	sp, #16
 8002cae:	4770      	bx	lr

08002cb0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b09b      	sub	sp, #108	; 0x6c
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	78db      	ldrb	r3, [r3, #3]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d81f      	bhi.n	8002d22 <USB_ActivateEndpoint+0x72>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <USB_ActivateEndpoint+0x38>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d15 	.word	0x08002d15
 8002cf0:	08002d2b 	.word	0x08002d2b
 8002cf4:	08002d07 	.word	0x08002d07
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002cf8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d04:	e012      	b.n	8002d2c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002d06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d0a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002d0e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d12:	e00b      	b.n	8002d2c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002d14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d20:	e004      	b.n	8002d2c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002d28:	e000      	b.n	8002d2c <USB_ActivateEndpoint+0x7c>
      break;
 8002d2a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	4413      	add	r3, r2
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	441a      	add	r2, r3
 8002d7c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f040 8149 	bne.w	8003030 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	785b      	ldrb	r3, [r3, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8084 	beq.w	8002eb0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	4413      	add	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	011a      	lsls	r2, r3, #4
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	88db      	ldrh	r3, [r3, #6]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	81fb      	strh	r3, [r7, #14]
 8002dea:	89fb      	ldrh	r3, [r7, #14]
 8002dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <USB_ActivateEndpoint+0x17c>
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	81bb      	strh	r3, [r7, #12]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	89bb      	ldrh	r3, [r7, #12]
 8002e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	78db      	ldrb	r3, [r3, #3]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d020      	beq.n	8002e76 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	881b      	ldrh	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e4a:	813b      	strh	r3, [r7, #8]
 8002e4c:	893b      	ldrh	r3, [r7, #8]
 8002e4e:	f083 0320 	eor.w	r3, r3, #32
 8002e52:	813b      	strh	r3, [r7, #8]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	441a      	add	r2, r3
 8002e5e:	893b      	ldrh	r3, [r7, #8]
 8002e60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	8013      	strh	r3, [r2, #0]
 8002e74:	e27f      	b.n	8003376 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	441a      	add	r2, r3
 8002e98:	897b      	ldrh	r3, [r7, #10]
 8002e9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	8013      	strh	r3, [r2, #0]
 8002eae:	e262      	b.n	8003376 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	4413      	add	r3, r2
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	011a      	lsls	r2, r3, #4
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	88db      	ldrh	r3, [r3, #6]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	4413      	add	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	011a      	lsls	r2, r3, #4
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	4413      	add	r3, r2
 8002f02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d112      	bne.n	8002f36 <USB_ActivateEndpoint+0x286>
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	801a      	strh	r2, [r3, #0]
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	e02f      	b.n	8002f96 <USB_ActivateEndpoint+0x2e6>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8002f3c:	d813      	bhi.n	8002f66 <USB_ActivateEndpoint+0x2b6>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <USB_ActivateEndpoint+0x2a8>
 8002f52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f54:	3301      	adds	r3, #1
 8002f56:	663b      	str	r3, [r7, #96]	; 0x60
 8002f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	029b      	lsls	r3, r3, #10
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	801a      	strh	r2, [r3, #0]
 8002f64:	e017      	b.n	8002f96 <USB_ActivateEndpoint+0x2e6>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <USB_ActivateEndpoint+0x2d0>
 8002f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	029b      	lsls	r3, r3, #10
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4413      	add	r3, r2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	83fb      	strh	r3, [r7, #30]
 8002fa4:	8bfb      	ldrh	r3, [r7, #30]
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01b      	beq.n	8002fe6 <USB_ActivateEndpoint+0x336>
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fc4:	83bb      	strh	r3, [r7, #28]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	441a      	add	r2, r3
 8002fd0:	8bbb      	ldrh	r3, [r7, #28]
 8002fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffc:	837b      	strh	r3, [r7, #26]
 8002ffe:	8b7b      	ldrh	r3, [r7, #26]
 8003000:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003004:	837b      	strh	r3, [r7, #26]
 8003006:	8b7b      	ldrh	r3, [r7, #26]
 8003008:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800300c:	837b      	strh	r3, [r7, #26]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	441a      	add	r2, r3
 8003018:	8b7b      	ldrh	r3, [r7, #26]
 800301a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800301e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302a:	b29b      	uxth	r3, r3
 800302c:	8013      	strh	r3, [r2, #0]
 800302e:	e1a2      	b.n	8003376 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800305c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003060:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003068:	b29b      	uxth	r3, r3
 800306a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800307c:	4413      	add	r3, r2
 800307e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	011a      	lsls	r2, r3, #4
 8003086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003088:	4413      	add	r3, r2
 800308a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800308e:	657b      	str	r3, [r7, #84]	; 0x54
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	891b      	ldrh	r3, [r3, #8]
 8003094:	085b      	lsrs	r3, r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800309e:	801a      	strh	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	653b      	str	r3, [r7, #80]	; 0x50
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030b0:	4413      	add	r3, r2
 80030b2:	653b      	str	r3, [r7, #80]	; 0x50
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	011a      	lsls	r2, r3, #4
 80030ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	895b      	ldrh	r3, [r3, #10]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f040 8091 	bne.w	8003200 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80030ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01b      	beq.n	800312e <USB_ActivateEndpoint+0x47e>
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	441a      	add	r2, r3
 8003118:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800311a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800311e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003122:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800312a:	b29b      	uxth	r3, r3
 800312c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	873b      	strh	r3, [r7, #56]	; 0x38
 800313c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <USB_ActivateEndpoint+0x4ce>
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800315c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	441a      	add	r2, r3
 8003168:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800316a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800316e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003176:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800317a:	b29b      	uxth	r3, r3
 800317c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003194:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003196:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003198:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800319c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800319e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80031a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	441a      	add	r2, r3
 80031b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80031b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031dc:	867b      	strh	r3, [r7, #50]	; 0x32
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	441a      	add	r2, r3
 80031e8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80031ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	8013      	strh	r3, [r2, #0]
 80031fe:	e0ba      	b.n	8003376 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003210:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d01d      	beq.n	8003258 <USB_ActivateEndpoint+0x5a8>
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	b29b      	uxth	r3, r3
 800322a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003254:	b29b      	uxth	r3, r3
 8003256:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01d      	beq.n	80032b0 <USB_ActivateEndpoint+0x600>
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	b29b      	uxth	r3, r3
 8003282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800329c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	78db      	ldrb	r3, [r3, #3]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d024      	beq.n	8003302 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80032d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032d6:	f083 0320 	eor.w	r3, r3, #32
 80032da:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	441a      	add	r2, r3
 80032e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	8013      	strh	r3, [r2, #0]
 8003300:	e01d      	b.n	800333e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4413      	add	r3, r2
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003318:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	441a      	add	r2, r3
 8003326:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800332a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800332e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800333a:	b29b      	uxth	r3, r3
 800333c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	441a      	add	r2, r3
 8003360:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800336a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800336e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003372:	b29b      	uxth	r3, r3
 8003374:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003376:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800337a:	4618      	mov	r0, r3
 800337c:	376c      	adds	r7, #108	; 0x6c
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr

08003384 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003384:	b480      	push	{r7}
 8003386:	b08d      	sub	sp, #52	; 0x34
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	7b1b      	ldrb	r3, [r3, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 808e 	bne.w	80034b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d044      	beq.n	800342a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	81bb      	strh	r3, [r7, #12]
 80033ae:	89bb      	ldrh	r3, [r7, #12]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <USB_DeactivateEndpoint+0x6c>
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	817b      	strh	r3, [r7, #10]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	441a      	add	r2, r3
 80033da:	897b      	ldrh	r3, [r7, #10]
 80033dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003406:	813b      	strh	r3, [r7, #8]
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	441a      	add	r2, r3
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800341c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003424:	b29b      	uxth	r3, r3
 8003426:	8013      	strh	r3, [r2, #0]
 8003428:	e192      	b.n	8003750 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	827b      	strh	r3, [r7, #18]
 8003438:	8a7b      	ldrh	r3, [r7, #18]
 800343a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01b      	beq.n	800347a <USB_DeactivateEndpoint+0xf6>
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003458:	823b      	strh	r3, [r7, #16]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	441a      	add	r2, r3
 8003464:	8a3b      	ldrh	r3, [r7, #16]
 8003466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800346a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800346e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003476:	b29b      	uxth	r3, r3
 8003478:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	b29b      	uxth	r3, r3
 8003488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003490:	81fb      	strh	r3, [r7, #14]
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	441a      	add	r2, r3
 800349c:	89fb      	ldrh	r3, [r7, #14]
 800349e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]
 80034b2:	e14d      	b.n	8003750 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 80a5 	bne.w	8003608 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	843b      	strh	r3, [r7, #32]
 80034cc:	8c3b      	ldrh	r3, [r7, #32]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01b      	beq.n	800350e <USB_DeactivateEndpoint+0x18a>
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ec:	83fb      	strh	r3, [r7, #30]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	441a      	add	r2, r3
 80034f8:	8bfb      	ldrh	r3, [r7, #30]
 80034fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	b29b      	uxth	r3, r3
 800350c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	83bb      	strh	r3, [r7, #28]
 800351c:	8bbb      	ldrh	r3, [r7, #28]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01b      	beq.n	800355e <USB_DeactivateEndpoint+0x1da>
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353c:	837b      	strh	r3, [r7, #26]
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	441a      	add	r2, r3
 8003548:	8b7b      	ldrh	r3, [r7, #26]
 800354a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800354e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003556:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800355a:	b29b      	uxth	r3, r3
 800355c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003574:	833b      	strh	r3, [r7, #24]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	441a      	add	r2, r3
 8003580:	8b3b      	ldrh	r3, [r7, #24]
 8003582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800358a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800358e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003592:	b29b      	uxth	r3, r3
 8003594:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ac:	82fb      	strh	r3, [r7, #22]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	441a      	add	r2, r3
 80035b8:	8afb      	ldrh	r3, [r7, #22]
 80035ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29b      	uxth	r3, r3
 80035dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035e4:	82bb      	strh	r3, [r7, #20]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	441a      	add	r2, r3
 80035f0:	8abb      	ldrh	r3, [r7, #20]
 80035f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003602:	b29b      	uxth	r3, r3
 8003604:	8013      	strh	r3, [r2, #0]
 8003606:	e0a3      	b.n	8003750 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <USB_DeactivateEndpoint+0x2d4>
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	441a      	add	r2, r3
 8003642:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003666:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d01b      	beq.n	80036a8 <USB_DeactivateEndpoint+0x324>
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003686:	853b      	strh	r3, [r7, #40]	; 0x28
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	441a      	add	r2, r3
 8003692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003694:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003698:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800369c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	441a      	add	r2, r3
 80036ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036dc:	b29b      	uxth	r3, r3
 80036de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	441a      	add	r2, r3
 8003702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800370c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003714:	b29b      	uxth	r3, r3
 8003716:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800373c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374c:	b29b      	uxth	r3, r3
 800374e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3734      	adds	r7, #52	; 0x34
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b0c4      	sub	sp, #272	; 0x110
 8003760:	af00      	add	r7, sp, #0
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	6018      	str	r0, [r3, #0]
 8003766:	463b      	mov	r3, r7
 8003768:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800376a:	463b      	mov	r3, r7
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	2b01      	cmp	r3, #1
 8003772:	f040 8557 	bne.w	8004224 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003776:	463b      	mov	r3, r7
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	463b      	mov	r3, r7
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	429a      	cmp	r2, r3
 8003784:	d905      	bls.n	8003792 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8003786:	463b      	mov	r3, r7
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003790:	e004      	b.n	800379c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003792:	463b      	mov	r3, r7
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800379c:	463b      	mov	r3, r7
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	7b1b      	ldrb	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12c      	bne.n	8003800 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80037a6:	463b      	mov	r3, r7
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6959      	ldr	r1, [r3, #20]
 80037ac:	463b      	mov	r3, r7
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	88da      	ldrh	r2, [r3, #6]
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	1d38      	adds	r0, r7, #4
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	f001 fa2c 	bl	8004c18 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037c0:	1d3b      	adds	r3, r7, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4413      	add	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	463b      	mov	r3, r7
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	011a      	lsls	r2, r3, #4
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	4413      	add	r3, r2
 80037e4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	801a      	strh	r2, [r3, #0]
 80037fc:	f000 bcdd 	b.w	80041ba <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8003800:	463b      	mov	r3, r7
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	78db      	ldrb	r3, [r3, #3]
 8003806:	2b02      	cmp	r3, #2
 8003808:	f040 8347 	bne.w	8003e9a <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800380c:	463b      	mov	r3, r7
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a1a      	ldr	r2, [r3, #32]
 8003812:	463b      	mov	r3, r7
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	429a      	cmp	r2, r3
 800381a:	f240 82eb 	bls.w	8003df4 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	463b      	mov	r3, r7
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29b      	uxth	r3, r3
 8003830:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003838:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	463b      	mov	r3, r7
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	441a      	add	r2, r3
 800384a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800384e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003852:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003856:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800385a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800385e:	b29b      	uxth	r3, r3
 8003860:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003862:	463b      	mov	r3, r7
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800386c:	1ad2      	subs	r2, r2, r3
 800386e:	463b      	mov	r3, r7
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	463b      	mov	r3, r7
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 8159 	beq.w	8003b42 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003890:	1d3b      	adds	r3, r7, #4
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	637b      	str	r3, [r7, #52]	; 0x34
 8003896:	463b      	mov	r3, r7
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d164      	bne.n	800396a <USB_EPStartXfer+0x20e>
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a6:	1d3b      	adds	r3, r7, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	4413      	add	r3, r2
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b8:	463b      	mov	r3, r7
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	011a      	lsls	r2, r3, #4
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	4413      	add	r3, r2
 80038c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d112      	bne.n	80038f8 <USB_EPStartXfer+0x19c>
 80038d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038dc:	b29a      	uxth	r2, r3
 80038de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e0:	801a      	strh	r2, [r3, #0]
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	e054      	b.n	80039a2 <USB_EPStartXfer+0x246>
 80038f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fc:	2b3e      	cmp	r3, #62	; 0x3e
 80038fe:	d817      	bhi.n	8003930 <USB_EPStartXfer+0x1d4>
 8003900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800390a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <USB_EPStartXfer+0x1c4>
 8003916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800391a:	3301      	adds	r3, #1
 800391c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003924:	b29b      	uxth	r3, r3
 8003926:	029b      	lsls	r3, r3, #10
 8003928:	b29a      	uxth	r2, r3
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e038      	b.n	80039a2 <USB_EPStartXfer+0x246>
 8003930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800393a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	2b00      	cmp	r3, #0
 8003944:	d104      	bne.n	8003950 <USB_EPStartXfer+0x1f4>
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800394a:	3b01      	subs	r3, #1
 800394c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003954:	b29b      	uxth	r3, r3
 8003956:	029b      	lsls	r3, r3, #10
 8003958:	b29b      	uxth	r3, r3
 800395a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800395e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003962:	b29a      	uxth	r2, r3
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	801a      	strh	r2, [r3, #0]
 8003968:	e01b      	b.n	80039a2 <USB_EPStartXfer+0x246>
 800396a:	463b      	mov	r3, r7
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d116      	bne.n	80039a2 <USB_EPStartXfer+0x246>
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800397c:	b29b      	uxth	r3, r3
 800397e:	461a      	mov	r2, r3
 8003980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003982:	4413      	add	r3, r2
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
 8003986:	463b      	mov	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	011a      	lsls	r2, r3, #4
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	4413      	add	r3, r2
 8003992:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003996:	633b      	str	r3, [r7, #48]	; 0x30
 8003998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399c:	b29a      	uxth	r2, r3
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80039a2:	463b      	mov	r3, r7
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	895b      	ldrh	r3, [r3, #10]
 80039a8:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80039ac:	463b      	mov	r3, r7
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6959      	ldr	r1, [r3, #20]
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80039bc:	1d38      	adds	r0, r7, #4
 80039be:	6800      	ldr	r0, [r0, #0]
 80039c0:	f001 f92a 	bl	8004c18 <USB_WritePMA>
            ep->xfer_buff += len;
 80039c4:	463b      	mov	r3, r7
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ce:	441a      	add	r2, r3
 80039d0:	463b      	mov	r3, r7
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039d6:	463b      	mov	r3, r7
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6a1a      	ldr	r2, [r3, #32]
 80039dc:	463b      	mov	r3, r7
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d909      	bls.n	80039fa <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80039e6:	463b      	mov	r3, r7
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f0:	1ad2      	subs	r2, r2, r3
 80039f2:	463b      	mov	r3, r7
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	621a      	str	r2, [r3, #32]
 80039f8:	e008      	b.n	8003a0c <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80039fa:	463b      	mov	r3, r7
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003a04:	463b      	mov	r3, r7
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a0c:	463b      	mov	r3, r7
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d164      	bne.n	8003ae0 <USB_EPStartXfer+0x384>
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61fb      	str	r3, [r7, #28]
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	463b      	mov	r3, r7
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	011a      	lsls	r2, r3, #4
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d112      	bne.n	8003a6e <USB_EPStartXfer+0x312>
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	881b      	ldrh	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	801a      	strh	r2, [r3, #0]
 8003a6c:	e057      	b.n	8003b1e <USB_EPStartXfer+0x3c2>
 8003a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a72:	2b3e      	cmp	r3, #62	; 0x3e
 8003a74:	d817      	bhi.n	8003aa6 <USB_EPStartXfer+0x34a>
 8003a76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d004      	beq.n	8003a96 <USB_EPStartXfer+0x33a>
 8003a8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a90:	3301      	adds	r3, #1
 8003a92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	029b      	lsls	r3, r3, #10
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	801a      	strh	r2, [r3, #0]
 8003aa4:	e03b      	b.n	8003b1e <USB_EPStartXfer+0x3c2>
 8003aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <USB_EPStartXfer+0x36a>
 8003abc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	e01e      	b.n	8003b1e <USB_EPStartXfer+0x3c2>
 8003ae0:	463b      	mov	r3, r7
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	785b      	ldrb	r3, [r3, #1]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d119      	bne.n	8003b1e <USB_EPStartXfer+0x3c2>
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	4413      	add	r3, r2
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
 8003b02:	463b      	mov	r3, r7
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	011a      	lsls	r2, r3, #4
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	4413      	add	r3, r2
 8003b0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b12:	623b      	str	r3, [r7, #32]
 8003b14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b1e:	463b      	mov	r3, r7
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	891b      	ldrh	r3, [r3, #8]
 8003b24:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b28:	463b      	mov	r3, r7
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6959      	ldr	r1, [r3, #20]
 8003b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b38:	1d38      	adds	r0, r7, #4
 8003b3a:	6800      	ldr	r0, [r0, #0]
 8003b3c:	f001 f86c 	bl	8004c18 <USB_WritePMA>
 8003b40:	e33b      	b.n	80041ba <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b42:	463b      	mov	r3, r7
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	785b      	ldrb	r3, [r3, #1]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d164      	bne.n	8003c16 <USB_EPStartXfer+0x4ba>
 8003b4c:	1d3b      	adds	r3, r7, #4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b60:	4413      	add	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b64:	463b      	mov	r3, r7
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	011a      	lsls	r2, r3, #4
 8003b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6e:	4413      	add	r3, r2
 8003b70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d112      	bne.n	8003ba4 <USB_EPStartXfer+0x448>
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	e057      	b.n	8003c54 <USB_EPStartXfer+0x4f8>
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8003baa:	d817      	bhi.n	8003bdc <USB_EPStartXfer+0x480>
 8003bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <USB_EPStartXfer+0x470>
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	029b      	lsls	r3, r3, #10
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e03b      	b.n	8003c54 <USB_EPStartXfer+0x4f8>
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <USB_EPStartXfer+0x4a0>
 8003bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bf6:	3b01      	subs	r3, #1
 8003bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	029b      	lsls	r3, r3, #10
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c12:	801a      	strh	r2, [r3, #0]
 8003c14:	e01e      	b.n	8003c54 <USB_EPStartXfer+0x4f8>
 8003c16:	463b      	mov	r3, r7
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d119      	bne.n	8003c54 <USB_EPStartXfer+0x4f8>
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	657b      	str	r3, [r7, #84]	; 0x54
 8003c26:	1d3b      	adds	r3, r7, #4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c34:	4413      	add	r3, r2
 8003c36:	657b      	str	r3, [r7, #84]	; 0x54
 8003c38:	463b      	mov	r3, r7
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	011a      	lsls	r2, r3, #4
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	4413      	add	r3, r2
 8003c44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c48:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c52:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c54:	463b      	mov	r3, r7
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	891b      	ldrh	r3, [r3, #8]
 8003c5a:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c5e:	463b      	mov	r3, r7
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6959      	ldr	r1, [r3, #20]
 8003c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c6e:	1d38      	adds	r0, r7, #4
 8003c70:	6800      	ldr	r0, [r0, #0]
 8003c72:	f000 ffd1 	bl	8004c18 <USB_WritePMA>
            ep->xfer_buff += len;
 8003c76:	463b      	mov	r3, r7
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c80:	441a      	add	r2, r3
 8003c82:	463b      	mov	r3, r7
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c88:	463b      	mov	r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a1a      	ldr	r2, [r3, #32]
 8003c8e:	463b      	mov	r3, r7
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d909      	bls.n	8003cac <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003c98:	463b      	mov	r3, r7
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6a1a      	ldr	r2, [r3, #32]
 8003c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	621a      	str	r2, [r3, #32]
 8003caa:	e008      	b.n	8003cbe <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003cac:	463b      	mov	r3, r7
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003cb6:	463b      	mov	r3, r7
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cbe:	1d3b      	adds	r3, r7, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc4:	463b      	mov	r3, r7
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d164      	bne.n	8003d98 <USB_EPStartXfer+0x63c>
 8003cce:	1d3b      	adds	r3, r7, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	4413      	add	r3, r2
 8003ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	011a      	lsls	r2, r3, #4
 8003cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d112      	bne.n	8003d26 <USB_EPStartXfer+0x5ca>
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	801a      	strh	r2, [r3, #0]
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	801a      	strh	r2, [r3, #0]
 8003d24:	e054      	b.n	8003dd0 <USB_EPStartXfer+0x674>
 8003d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8003d2c:	d817      	bhi.n	8003d5e <USB_EPStartXfer+0x602>
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <USB_EPStartXfer+0x5f2>
 8003d44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	801a      	strh	r2, [r3, #0]
 8003d5c:	e038      	b.n	8003dd0 <USB_EPStartXfer+0x674>
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <USB_EPStartXfer+0x622>
 8003d74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	e01b      	b.n	8003dd0 <USB_EPStartXfer+0x674>
 8003d98:	463b      	mov	r3, r7
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	785b      	ldrb	r3, [r3, #1]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d116      	bne.n	8003dd0 <USB_EPStartXfer+0x674>
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db0:	4413      	add	r3, r2
 8003db2:	647b      	str	r3, [r7, #68]	; 0x44
 8003db4:	463b      	mov	r3, r7
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	011a      	lsls	r2, r3, #4
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003dc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003dd0:	463b      	mov	r3, r7
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	895b      	ldrh	r3, [r3, #10]
 8003dd6:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dda:	463b      	mov	r3, r7
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6959      	ldr	r1, [r3, #20]
 8003de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003dea:	1d38      	adds	r0, r7, #4
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	f000 ff13 	bl	8004c18 <USB_WritePMA>
 8003df2:	e1e2      	b.n	80041ba <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003df4:	463b      	mov	r3, r7
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003dfe:	1d3b      	adds	r3, r7, #4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	463b      	mov	r3, r7
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e1c:	1d3b      	adds	r3, r7, #4
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	463b      	mov	r3, r7
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	441a      	add	r2, r3
 8003e2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	663b      	str	r3, [r7, #96]	; 0x60
 8003e48:	1d3b      	adds	r3, r7, #4
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e56:	4413      	add	r3, r2
 8003e58:	663b      	str	r3, [r7, #96]	; 0x60
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	011a      	lsls	r2, r3, #4
 8003e62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e64:	4413      	add	r3, r2
 8003e66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e76:	463b      	mov	r3, r7
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	891b      	ldrh	r3, [r3, #8]
 8003e7c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e80:	463b      	mov	r3, r7
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6959      	ldr	r1, [r3, #20]
 8003e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e90:	1d38      	adds	r0, r7, #4
 8003e92:	6800      	ldr	r0, [r0, #0]
 8003e94:	f000 fec0 	bl	8004c18 <USB_WritePMA>
 8003e98:	e18f      	b.n	80041ba <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	463b      	mov	r3, r7
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 808f 	beq.w	8003fd4 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ebc:	463b      	mov	r3, r7
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d164      	bne.n	8003f90 <USB_EPStartXfer+0x834>
 8003ec6:	1d3b      	adds	r3, r7, #4
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	673b      	str	r3, [r7, #112]	; 0x70
 8003ecc:	1d3b      	adds	r3, r7, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eda:	4413      	add	r3, r2
 8003edc:	673b      	str	r3, [r7, #112]	; 0x70
 8003ede:	463b      	mov	r3, r7
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	011a      	lsls	r2, r3, #4
 8003ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee8:	4413      	add	r3, r2
 8003eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d112      	bne.n	8003f1e <USB_EPStartXfer+0x7c2>
 8003ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	e054      	b.n	8003fc8 <USB_EPStartXfer+0x86c>
 8003f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f22:	2b3e      	cmp	r3, #62	; 0x3e
 8003f24:	d817      	bhi.n	8003f56 <USB_EPStartXfer+0x7fa>
 8003f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f2a:	085b      	lsrs	r3, r3, #1
 8003f2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d004      	beq.n	8003f46 <USB_EPStartXfer+0x7ea>
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f52:	801a      	strh	r2, [r3, #0]
 8003f54:	e038      	b.n	8003fc8 <USB_EPStartXfer+0x86c>
 8003f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <USB_EPStartXfer+0x81a>
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f70:	3b01      	subs	r3, #1
 8003f72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	029b      	lsls	r3, r3, #10
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	e01b      	b.n	8003fc8 <USB_EPStartXfer+0x86c>
 8003f90:	463b      	mov	r3, r7
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d116      	bne.n	8003fc8 <USB_EPStartXfer+0x86c>
 8003f9a:	1d3b      	adds	r3, r7, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa8:	4413      	add	r3, r2
 8003faa:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fac:	463b      	mov	r3, r7
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	011a      	lsls	r2, r3, #4
 8003fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fbc:	677b      	str	r3, [r7, #116]	; 0x74
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003fc8:	463b      	mov	r3, r7
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	895b      	ldrh	r3, [r3, #10]
 8003fce:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003fd2:	e097      	b.n	8004104 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d168      	bne.n	80040b0 <USB_EPStartXfer+0x954>
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe6:	1d3b      	adds	r3, r7, #4
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ffc:	463b      	mov	r3, r7
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	011a      	lsls	r2, r3, #4
 8004004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004008:	4413      	add	r3, r2
 800400a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800400e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004010:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d112      	bne.n	800403e <USB_EPStartXfer+0x8e2>
 8004018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004022:	b29a      	uxth	r2, r3
 8004024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004026:	801a      	strh	r2, [r3, #0]
 8004028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004036:	b29a      	uxth	r2, r3
 8004038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	e05d      	b.n	80040fa <USB_EPStartXfer+0x99e>
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	2b3e      	cmp	r3, #62	; 0x3e
 8004044:	d817      	bhi.n	8004076 <USB_EPStartXfer+0x91a>
 8004046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404a:	085b      	lsrs	r3, r3, #1
 800404c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <USB_EPStartXfer+0x90a>
 800405c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004060:	3301      	adds	r3, #1
 8004062:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004066:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800406a:	b29b      	uxth	r3, r3
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	b29a      	uxth	r2, r3
 8004070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004072:	801a      	strh	r2, [r3, #0]
 8004074:	e041      	b.n	80040fa <USB_EPStartXfer+0x99e>
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004080:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004084:	f003 031f 	and.w	r3, r3, #31
 8004088:	2b00      	cmp	r3, #0
 800408a:	d104      	bne.n	8004096 <USB_EPStartXfer+0x93a>
 800408c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004090:	3b01      	subs	r3, #1
 8004092:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004096:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800409a:	b29b      	uxth	r3, r3
 800409c:	029b      	lsls	r3, r3, #10
 800409e:	b29b      	uxth	r3, r3
 80040a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	e024      	b.n	80040fa <USB_EPStartXfer+0x99e>
 80040b0:	463b      	mov	r3, r7
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d11f      	bne.n	80040fa <USB_EPStartXfer+0x99e>
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040d2:	4413      	add	r3, r2
 80040d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d8:	463b      	mov	r3, r7
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	011a      	lsls	r2, r3, #4
 80040e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040e4:	4413      	add	r3, r2
 80040e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040fa:	463b      	mov	r3, r7
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	891b      	ldrh	r3, [r3, #8]
 8004100:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004104:	463b      	mov	r3, r7
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6959      	ldr	r1, [r3, #20]
 800410a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410e:	b29b      	uxth	r3, r3
 8004110:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8004114:	1d38      	adds	r0, r7, #4
 8004116:	6800      	ldr	r0, [r0, #0]
 8004118:	f000 fd7e 	bl	8004c18 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800411c:	463b      	mov	r3, r7
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	785b      	ldrb	r3, [r3, #1]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d122      	bne.n	800416c <USB_EPStartXfer+0xa10>
 8004126:	1d3b      	adds	r3, r7, #4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	463b      	mov	r3, r7
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b29b      	uxth	r3, r3
 8004138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004140:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	463b      	mov	r3, r7
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800415e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004162:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004166:	b29b      	uxth	r3, r3
 8004168:	8013      	strh	r3, [r2, #0]
 800416a:	e026      	b.n	80041ba <USB_EPStartXfer+0xa5e>
 800416c:	463b      	mov	r3, r7
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d121      	bne.n	80041ba <USB_EPStartXfer+0xa5e>
 8004176:	1d3b      	adds	r3, r7, #4
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	463b      	mov	r3, r7
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004190:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	463b      	mov	r3, r7
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	441a      	add	r2, r3
 80041a2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80041a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	463b      	mov	r3, r7
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	f107 020e 	add.w	r2, r7, #14
 80041d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	8013      	strh	r3, [r2, #0]
 80041da:	f107 030e 	add.w	r3, r7, #14
 80041de:	f107 020e 	add.w	r2, r7, #14
 80041e2:	8812      	ldrh	r2, [r2, #0]
 80041e4:	f082 0210 	eor.w	r2, r2, #16
 80041e8:	801a      	strh	r2, [r3, #0]
 80041ea:	f107 030e 	add.w	r3, r7, #14
 80041ee:	f107 020e 	add.w	r2, r7, #14
 80041f2:	8812      	ldrh	r2, [r2, #0]
 80041f4:	f082 0220 	eor.w	r2, r2, #32
 80041f8:	801a      	strh	r2, [r3, #0]
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	463b      	mov	r3, r7
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	f107 030e 	add.w	r3, r7, #14
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421e:	b29b      	uxth	r3, r3
 8004220:	8013      	strh	r3, [r2, #0]
 8004222:	e3b5      	b.n	8004990 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	7b1b      	ldrb	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f040 8090 	bne.w	8004350 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004230:	463b      	mov	r3, r7
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	463b      	mov	r3, r7
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	429a      	cmp	r2, r3
 800423e:	d90e      	bls.n	800425e <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004240:	463b      	mov	r3, r7
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800424a:	463b      	mov	r3, r7
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004254:	1ad2      	subs	r2, r2, r3
 8004256:	463b      	mov	r3, r7
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	619a      	str	r2, [r3, #24]
 800425c:	e008      	b.n	8004270 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 800425e:	463b      	mov	r3, r7
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 8004268:	463b      	mov	r3, r7
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004278:	1d3b      	adds	r3, r7, #4
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004280:	b29b      	uxth	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004288:	4413      	add	r3, r2
 800428a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800428e:	463b      	mov	r3, r7
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	011a      	lsls	r2, r3, #4
 8004296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800429a:	4413      	add	r3, r2
 800429c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <USB_EPStartXfer+0xb7e>
 80042ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d6:	801a      	strh	r2, [r3, #0]
 80042d8:	e32c      	b.n	8004934 <USB_EPStartXfer+0x11d8>
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	2b3e      	cmp	r3, #62	; 0x3e
 80042e0:	d818      	bhi.n	8004314 <USB_EPStartXfer+0xbb8>
 80042e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <USB_EPStartXfer+0xba6>
 80042f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042fc:	3301      	adds	r3, #1
 80042fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004306:	b29b      	uxth	r3, r3
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	b29a      	uxth	r2, r3
 800430c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e30f      	b.n	8004934 <USB_EPStartXfer+0x11d8>
 8004314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <USB_EPStartXfer+0xbd8>
 800432a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800432e:	3b01      	subs	r3, #1
 8004330:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004334:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004338:	b29b      	uxth	r3, r3
 800433a:	029b      	lsls	r3, r3, #10
 800433c:	b29b      	uxth	r3, r3
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29a      	uxth	r2, r3
 8004348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	e2f1      	b.n	8004934 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004350:	463b      	mov	r3, r7
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	78db      	ldrb	r3, [r3, #3]
 8004356:	2b02      	cmp	r3, #2
 8004358:	f040 818f 	bne.w	800467a <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800435c:	463b      	mov	r3, r7
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d175      	bne.n	8004452 <USB_EPStartXfer+0xcf6>
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800437e:	4413      	add	r3, r2
 8004380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004384:	463b      	mov	r3, r7
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	011a      	lsls	r2, r3, #4
 800438c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004390:	4413      	add	r3, r2
 8004392:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800439a:	463b      	mov	r3, r7
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <USB_EPStartXfer+0xc76>
 80043a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043b6:	801a      	strh	r2, [r3, #0]
 80043b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	e065      	b.n	800449e <USB_EPStartXfer+0xd42>
 80043d2:	463b      	mov	r3, r7
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b3e      	cmp	r3, #62	; 0x3e
 80043da:	d81a      	bhi.n	8004412 <USB_EPStartXfer+0xcb6>
 80043dc:	463b      	mov	r3, r7
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043e8:	463b      	mov	r3, r7
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <USB_EPStartXfer+0xca4>
 80043f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043fa:	3301      	adds	r3, #1
 80043fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004400:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004404:	b29b      	uxth	r3, r3
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	b29a      	uxth	r2, r3
 800440a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e045      	b.n	800449e <USB_EPStartXfer+0xd42>
 8004412:	463b      	mov	r3, r7
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800441e:	463b      	mov	r3, r7
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <USB_EPStartXfer+0xcda>
 800442c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004430:	3b01      	subs	r3, #1
 8004432:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004436:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800443a:	b29b      	uxth	r3, r3
 800443c:	029b      	lsls	r3, r3, #10
 800443e:	b29b      	uxth	r3, r3
 8004440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004448:	b29a      	uxth	r2, r3
 800444a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	e025      	b.n	800449e <USB_EPStartXfer+0xd42>
 8004452:	463b      	mov	r3, r7
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d120      	bne.n	800449e <USB_EPStartXfer+0xd42>
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004464:	1d3b      	adds	r3, r7, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446c:	b29b      	uxth	r3, r3
 800446e:	461a      	mov	r2, r3
 8004470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004474:	4413      	add	r3, r2
 8004476:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800447a:	463b      	mov	r3, r7
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	011a      	lsls	r2, r3, #4
 8004482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004486:	4413      	add	r3, r2
 8004488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800448c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004490:	463b      	mov	r3, r7
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	b29a      	uxth	r2, r3
 8004498:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800449c:	801a      	strh	r2, [r3, #0]
 800449e:	1d3b      	adds	r3, r7, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044a6:	463b      	mov	r3, r7
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d175      	bne.n	800459c <USB_EPStartXfer+0xe40>
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044c8:	4413      	add	r3, r2
 80044ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044ce:	463b      	mov	r3, r7
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	011a      	lsls	r2, r3, #4
 80044d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044da:	4413      	add	r3, r2
 80044dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044e4:	463b      	mov	r3, r7
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d116      	bne.n	800451c <USB_EPStartXfer+0xdc0>
 80044ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044f2:	881b      	ldrh	r3, [r3, #0]
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800450e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004512:	b29a      	uxth	r2, r3
 8004514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	e061      	b.n	80045e0 <USB_EPStartXfer+0xe84>
 800451c:	463b      	mov	r3, r7
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b3e      	cmp	r3, #62	; 0x3e
 8004524:	d81a      	bhi.n	800455c <USB_EPStartXfer+0xe00>
 8004526:	463b      	mov	r3, r7
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004532:	463b      	mov	r3, r7
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <USB_EPStartXfer+0xdee>
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004544:	3301      	adds	r3, #1
 8004546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800454a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454e:	b29b      	uxth	r3, r3
 8004550:	029b      	lsls	r3, r3, #10
 8004552:	b29a      	uxth	r2, r3
 8004554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	e041      	b.n	80045e0 <USB_EPStartXfer+0xe84>
 800455c:	463b      	mov	r3, r7
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004568:	463b      	mov	r3, r7
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <USB_EPStartXfer+0xe24>
 8004576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457a:	3b01      	subs	r3, #1
 800457c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004584:	b29b      	uxth	r3, r3
 8004586:	029b      	lsls	r3, r3, #10
 8004588:	b29b      	uxth	r3, r3
 800458a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800458e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004592:	b29a      	uxth	r2, r3
 8004594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	e021      	b.n	80045e0 <USB_EPStartXfer+0xe84>
 800459c:	463b      	mov	r3, r7
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d11c      	bne.n	80045e0 <USB_EPStartXfer+0xe84>
 80045a6:	1d3b      	adds	r3, r7, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045b6:	4413      	add	r3, r2
 80045b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045bc:	463b      	mov	r3, r7
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	011a      	lsls	r2, r3, #4
 80045c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045c8:	4413      	add	r3, r2
 80045ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045d2:	463b      	mov	r3, r7
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80045e0:	463b      	mov	r3, r7
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 81a4 	beq.w	8004934 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80045ec:	1d3b      	adds	r3, r7, #4
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	463b      	mov	r3, r7
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004600:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <USB_EPStartXfer+0xebc>
 800460c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10d      	bne.n	8004634 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004618:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800461c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 8187 	bne.w	8004934 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8004626:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b00      	cmp	r3, #0
 8004630:	f040 8180 	bne.w	8004934 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	463b      	mov	r3, r7
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800464a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800464e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004652:	1d3b      	adds	r3, r7, #4
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	463b      	mov	r3, r7
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	441a      	add	r2, r3
 8004660:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800466c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004670:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004674:	b29b      	uxth	r3, r3
 8004676:	8013      	strh	r3, [r2, #0]
 8004678:	e15c      	b.n	8004934 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	78db      	ldrb	r3, [r3, #3]
 8004680:	2b01      	cmp	r3, #1
 8004682:	f040 8155 	bne.w	8004930 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004686:	463b      	mov	r3, r7
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	463b      	mov	r3, r7
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90e      	bls.n	80046b4 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 8004696:	463b      	mov	r3, r7
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 80046a0:	463b      	mov	r3, r7
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046aa:	1ad2      	subs	r2, r2, r3
 80046ac:	463b      	mov	r3, r7
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	619a      	str	r2, [r3, #24]
 80046b2:	e008      	b.n	80046c6 <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80046b4:	463b      	mov	r3, r7
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80046be:	463b      	mov	r3, r7
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80046c6:	463b      	mov	r3, r7
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d16f      	bne.n	80047b0 <USB_EPStartXfer+0x1054>
 80046d0:	1d3b      	adds	r3, r7, #4
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d8:	1d3b      	adds	r3, r7, #4
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046e8:	4413      	add	r3, r2
 80046ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046ee:	463b      	mov	r3, r7
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	011a      	lsls	r2, r3, #4
 80046f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046fa:	4413      	add	r3, r2
 80046fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004700:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004704:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d116      	bne.n	800473a <USB_EPStartXfer+0xfde>
 800470c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004718:	b29a      	uxth	r2, r3
 800471a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004730:	b29a      	uxth	r2, r3
 8004732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	e05f      	b.n	80047fa <USB_EPStartXfer+0x109e>
 800473a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473e:	2b3e      	cmp	r3, #62	; 0x3e
 8004740:	d818      	bhi.n	8004774 <USB_EPStartXfer+0x1018>
 8004742:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800474c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <USB_EPStartXfer+0x1006>
 8004758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800475c:	3301      	adds	r3, #1
 800475e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004766:	b29b      	uxth	r3, r3
 8004768:	029b      	lsls	r3, r3, #10
 800476a:	b29a      	uxth	r2, r3
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e042      	b.n	80047fa <USB_EPStartXfer+0x109e>
 8004774:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004778:	095b      	lsrs	r3, r3, #5
 800477a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <USB_EPStartXfer+0x1038>
 800478a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800478e:	3b01      	subs	r3, #1
 8004790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004798:	b29b      	uxth	r3, r3
 800479a:	029b      	lsls	r3, r3, #10
 800479c:	b29b      	uxth	r3, r3
 800479e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047ac:	801a      	strh	r2, [r3, #0]
 80047ae:	e024      	b.n	80047fa <USB_EPStartXfer+0x109e>
 80047b0:	463b      	mov	r3, r7
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d11f      	bne.n	80047fa <USB_EPStartXfer+0x109e>
 80047ba:	1d3b      	adds	r3, r7, #4
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047d2:	4413      	add	r3, r2
 80047d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047d8:	463b      	mov	r3, r7
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	011a      	lsls	r2, r3, #4
 80047e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e4:	4413      	add	r3, r2
 80047e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004802:	463b      	mov	r3, r7
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d16f      	bne.n	80048ec <USB_EPStartXfer+0x1190>
 800480c:	1d3b      	adds	r3, r7, #4
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004814:	1d3b      	adds	r3, r7, #4
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481c:	b29b      	uxth	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004824:	4413      	add	r3, r2
 8004826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800482a:	463b      	mov	r3, r7
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	011a      	lsls	r2, r3, #4
 8004832:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004836:	4413      	add	r3, r2
 8004838:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800483c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d116      	bne.n	8004876 <USB_EPStartXfer+0x111a>
 8004848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004854:	b29a      	uxth	r2, r3
 8004856:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004868:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486c:	b29a      	uxth	r2, r3
 800486e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	e05e      	b.n	8004934 <USB_EPStartXfer+0x11d8>
 8004876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800487a:	2b3e      	cmp	r3, #62	; 0x3e
 800487c:	d818      	bhi.n	80048b0 <USB_EPStartXfer+0x1154>
 800487e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <USB_EPStartXfer+0x1142>
 8004894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004898:	3301      	adds	r3, #1
 800489a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800489e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	e041      	b.n	8004934 <USB_EPStartXfer+0x11d8>
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b4:	095b      	lsrs	r3, r3, #5
 80048b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <USB_EPStartXfer+0x1174>
 80048c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ca:	3b01      	subs	r3, #1
 80048cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	029b      	lsls	r3, r3, #10
 80048d8:	b29b      	uxth	r3, r3
 80048da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e8:	801a      	strh	r2, [r3, #0]
 80048ea:	e023      	b.n	8004934 <USB_EPStartXfer+0x11d8>
 80048ec:	463b      	mov	r3, r7
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d11e      	bne.n	8004934 <USB_EPStartXfer+0x11d8>
 80048f6:	1d3b      	adds	r3, r7, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004906:	4413      	add	r3, r2
 8004908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800490c:	463b      	mov	r3, r7
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	011a      	lsls	r2, r3, #4
 8004914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004918:	4413      	add	r3, r2
 800491a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800491e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004926:	b29a      	uxth	r2, r3
 8004928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	e001      	b.n	8004934 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e02e      	b.n	8004992 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004934:	1d3b      	adds	r3, r7, #4
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	463b      	mov	r3, r7
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004952:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004956:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800495a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800495e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004962:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004966:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	463b      	mov	r3, r7
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	441a      	add	r2, r3
 8004978:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800497c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800498c:	b29b      	uxth	r3, r3
 800498e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d020      	beq.n	80049f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c4:	81bb      	strh	r3, [r7, #12]
 80049c6:	89bb      	ldrh	r3, [r7, #12]
 80049c8:	f083 0310 	eor.w	r3, r3, #16
 80049cc:	81bb      	strh	r3, [r7, #12]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	89bb      	ldrh	r3, [r7, #12]
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
 80049ee:	e01f      	b.n	8004a30 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	881b      	ldrh	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	81fb      	strh	r3, [r7, #14]
 8004a08:	89fb      	ldrh	r3, [r7, #14]
 8004a0a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a0e:	81fb      	strh	r3, [r7, #14]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	441a      	add	r2, r3
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b087      	sub	sp, #28
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	7b1b      	ldrb	r3, [r3, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 809d 	bne.w	8004b8a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	785b      	ldrb	r3, [r3, #1]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d04c      	beq.n	8004af2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	823b      	strh	r3, [r7, #16]
 8004a66:	8a3b      	ldrh	r3, [r7, #16]
 8004a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d01b      	beq.n	8004aa8 <USB_EPClearStall+0x6c>
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	81fb      	strh	r3, [r7, #14]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	441a      	add	r2, r3
 8004a92:	89fb      	ldrh	r3, [r7, #14]
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d06c      	beq.n	8004b8a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ac6:	81bb      	strh	r3, [r7, #12]
 8004ac8:	89bb      	ldrh	r3, [r7, #12]
 8004aca:	f083 0320 	eor.w	r3, r3, #32
 8004ace:	81bb      	strh	r3, [r7, #12]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	441a      	add	r2, r3
 8004ada:	89bb      	ldrh	r3, [r7, #12]
 8004adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	8013      	strh	r3, [r2, #0]
 8004af0:	e04b      	b.n	8004b8a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	82fb      	strh	r3, [r7, #22]
 8004b00:	8afb      	ldrh	r3, [r7, #22]
 8004b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01b      	beq.n	8004b42 <USB_EPClearStall+0x106>
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b20:	82bb      	strh	r3, [r7, #20]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8abb      	ldrh	r3, [r7, #20]
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b58:	827b      	strh	r3, [r7, #18]
 8004b5a:	8a7b      	ldrh	r3, [r7, #18]
 8004b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b60:	827b      	strh	r3, [r7, #18]
 8004b62:	8a7b      	ldrh	r3, [r7, #18]
 8004b64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b68:	827b      	strh	r3, [r7, #18]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8a7b      	ldrh	r3, [r7, #18]
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr

08004b96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004ba2:	78fb      	ldrb	r3, [r7, #3]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2280      	movs	r2, #128	; 0x80
 8004bac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bc80      	pop	{r7}
 8004bba:	4770      	bx	lr

08004bbc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr

08004bd0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bc80      	pop	{r7}
 8004be2:	4770      	bx	lr

08004be4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bc80      	pop	{r7}
 8004c00:	4770      	bx	lr

08004c02 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b08d      	sub	sp, #52	; 0x34
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	4611      	mov	r1, r2
 8004c24:	461a      	mov	r2, r3
 8004c26:	460b      	mov	r3, r1
 8004c28:	80fb      	strh	r3, [r7, #6]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c2e:	88bb      	ldrh	r3, [r7, #4]
 8004c30:	3301      	adds	r3, #1
 8004c32:	085b      	lsrs	r3, r3, #1
 8004c34:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	005a      	lsls	r2, r3, #1
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c50:	e01e      	b.n	8004c90 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	3302      	adds	r3, #2
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	3302      	adds	r3, #2
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	3301      	adds	r3, #1
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1dd      	bne.n	8004c52 <USB_WritePMA+0x3a>
  }
}
 8004c96:	bf00      	nop
 8004c98:	3734      	adds	r7, #52	; 0x34
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr

08004ca0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b08b      	sub	sp, #44	; 0x2c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	460b      	mov	r3, r1
 8004cb0:	80fb      	strh	r3, [r7, #6]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004cb6:	88bb      	ldrh	r3, [r7, #4]
 8004cb8:	085b      	lsrs	r3, r3, #1
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004cc6:	88fb      	ldrh	r3, [r7, #6]
 8004cc8:	005a      	lsls	r2, r3, #1
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd8:	e01b      	b.n	8004d12 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	0a1b      	lsrs	r3, r3, #8
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	3301      	adds	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	3302      	adds	r3, #2
 8004d0a:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e0      	bne.n	8004cda <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004d18:	88bb      	ldrh	r3, [r7, #4]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	701a      	strb	r2, [r3, #0]
  }
}
 8004d34:	bf00      	nop
 8004d36:	372c      	adds	r7, #44	; 0x2c
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bc80      	pop	{r7}
 8004d3c:	4770      	bx	lr

08004d3e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	460b      	mov	r3, r1
 8004d48:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7c1b      	ldrb	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d115      	bne.n	8004d82 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	2181      	movs	r1, #129	; 0x81
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f004 fb7d 	bl	800945e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d6e:	2202      	movs	r2, #2
 8004d70:	2101      	movs	r1, #1
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f004 fb73 	bl	800945e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004d80:	e012      	b.n	8004da8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d82:	2340      	movs	r3, #64	; 0x40
 8004d84:	2202      	movs	r2, #2
 8004d86:	2181      	movs	r1, #129	; 0x81
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f004 fb68 	bl	800945e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	2202      	movs	r2, #2
 8004d98:	2101      	movs	r1, #1
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f004 fb5f 	bl	800945e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004da8:	2308      	movs	r3, #8
 8004daa:	2203      	movs	r2, #3
 8004dac:	2182      	movs	r1, #130	; 0x82
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f004 fb55 	bl	800945e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004dba:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004dbe:	f004 fc75 	bl	80096ac <USBD_static_malloc>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e026      	b.n	8004e28 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004de0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	7c1b      	ldrb	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e0e:	2101      	movs	r1, #1
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f004 fc15 	bl	8009640 <USBD_LL_PrepareReceive>
 8004e16:	e007      	b.n	8004e28 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e1e:	2340      	movs	r3, #64	; 0x40
 8004e20:	2101      	movs	r1, #1
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f004 fc0c 	bl	8009640 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e42:	2181      	movs	r1, #129	; 0x81
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f004 fb30 	bl	80094aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e50:	2101      	movs	r1, #1
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f004 fb29 	bl	80094aa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e60:	2182      	movs	r1, #130	; 0x82
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f004 fb21 	bl	80094aa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00e      	beq.n	8004e96 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f004 fc1b 	bl	80096c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eb0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d039      	beq.n	8004f3e <USBD_CDC_Setup+0x9e>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d17c      	bne.n	8004fc8 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	88db      	ldrh	r3, [r3, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d029      	beq.n	8004f2a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	da11      	bge.n	8004f04 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004eec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	88d2      	ldrh	r2, [r2, #6]
 8004ef2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004ef4:	6939      	ldr	r1, [r7, #16]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	88db      	ldrh	r3, [r3, #6]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 f9f9 	bl	80062f4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004f02:	e068      	b.n	8004fd6 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	785a      	ldrb	r2, [r3, #1]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	88db      	ldrh	r3, [r3, #6]
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004f1a:	6939      	ldr	r1, [r7, #16]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	88db      	ldrh	r3, [r3, #6]
 8004f20:	461a      	mov	r2, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fa14 	bl	8006350 <USBD_CtlPrepareRx>
      break;
 8004f28:	e055      	b.n	8004fd6 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	7850      	ldrb	r0, [r2, #1]
 8004f36:	2200      	movs	r2, #0
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4798      	blx	r3
      break;
 8004f3c:	e04b      	b.n	8004fd6 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	2b0a      	cmp	r3, #10
 8004f44:	d017      	beq.n	8004f76 <USBD_CDC_Setup+0xd6>
 8004f46:	2b0b      	cmp	r3, #11
 8004f48:	d029      	beq.n	8004f9e <USBD_CDC_Setup+0xfe>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d133      	bne.n	8004fb6 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	d107      	bne.n	8004f68 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 f9c7 	bl	80062f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f66:	e02e      	b.n	8004fc6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f68:	6839      	ldr	r1, [r7, #0]
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f001 f958 	bl	8006220 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f70:	2302      	movs	r3, #2
 8004f72:	75fb      	strb	r3, [r7, #23]
          break;
 8004f74:	e027      	b.n	8004fc6 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f7c:	2b03      	cmp	r3, #3
 8004f7e:	d107      	bne.n	8004f90 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f80:	f107 030f 	add.w	r3, r7, #15
 8004f84:	2201      	movs	r2, #1
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f001 f9b3 	bl	80062f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f8e:	e01a      	b.n	8004fc6 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f90:	6839      	ldr	r1, [r7, #0]
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 f944 	bl	8006220 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f9c:	e013      	b.n	8004fc6 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d00d      	beq.n	8004fc4 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 f938 	bl	8006220 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fb4:	e006      	b.n	8004fc4 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 f931 	bl	8006220 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc2:	e000      	b.n	8004fc6 <USBD_CDC_Setup+0x126>
          break;
 8004fc4:	bf00      	nop
      }
      break;
 8004fc6:	e006      	b.n	8004fd6 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 f928 	bl	8006220 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fd4:	bf00      	nop
  }

  return ret;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ffa:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d03a      	beq.n	800507c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	331c      	adds	r3, #28
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d029      	beq.n	8005070 <USBD_CDC_DataIn+0x90>
 800501c:	78fa      	ldrb	r2, [r7, #3]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	4613      	mov	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	331c      	adds	r3, #28
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	78f9      	ldrb	r1, [r7, #3]
 8005030:	68b8      	ldr	r0, [r7, #8]
 8005032:	460b      	mov	r3, r1
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4403      	add	r3, r0
 800503c:	3338      	adds	r3, #56	; 0x38
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	fbb2 f1f3 	udiv	r1, r2, r3
 8005044:	fb03 f301 	mul.w	r3, r3, r1
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d110      	bne.n	8005070 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	331c      	adds	r3, #28
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005062:	78f9      	ldrb	r1, [r7, #3]
 8005064:	2300      	movs	r3, #0
 8005066:	2200      	movs	r2, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f004 fac6 	bl	80095fa <USBD_LL_Transmit>
 800506e:	e003      	b.n	8005078 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	460b      	mov	r3, r1
 8005090:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005098:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f004 faf1 	bl	8009686 <USBD_LL_GetRxDataSize>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050ca:	4611      	mov	r1, r2
 80050cc:	4798      	blx	r3

    return USBD_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e000      	b.n	80050d4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80050d2:	2302      	movs	r3, #2
  }
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d015      	beq.n	8005122 <USBD_CDC_EP0_RxReady+0x46>
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050fc:	2bff      	cmp	r3, #255	; 0xff
 80050fe:	d010      	beq.n	8005122 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800510e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005116:	b292      	uxth	r2, r2
 8005118:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	22ff      	movs	r2, #255	; 0xff
 800511e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2243      	movs	r2, #67	; 0x43
 8005138:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800513a:	4b03      	ldr	r3, [pc, #12]	; (8005148 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	20000094 	.word	0x20000094

0800514c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2243      	movs	r2, #67	; 0x43
 8005158:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800515a:	4b03      	ldr	r3, [pc, #12]	; (8005168 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000050 	.word	0x20000050

0800516c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2243      	movs	r2, #67	; 0x43
 8005178:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800517a:	4b03      	ldr	r3, [pc, #12]	; (8005188 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	200000d8 	.word	0x200000d8

0800518c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	220a      	movs	r2, #10
 8005198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800519a:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	2000000c 	.word	0x2000000c

080051ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80051b6:	2302      	movs	r3, #2
 80051b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	4613      	mov	r3, r2
 80051e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	68ba      	ldr	r2, [r7, #8]
 80051f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051f6:	88fa      	ldrh	r2, [r7, #6]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800521a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800523e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01c      	beq.n	8005284 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005250:	2b00      	cmp	r3, #0
 8005252:	d115      	bne.n	8005280 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005272:	b29b      	uxth	r3, r3
 8005274:	2181      	movs	r1, #129	; 0x81
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f004 f9bf 	bl	80095fa <USBD_LL_Transmit>

      return USBD_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e002      	b.n	8005286 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005284:	2302      	movs	r3, #2
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800529c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d017      	beq.n	80052d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	7c1b      	ldrb	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d109      	bne.n	80052c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ba:	2101      	movs	r1, #1
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f004 f9bf 	bl	8009640 <USBD_LL_PrepareReceive>
 80052c2:	e007      	b.n	80052d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052ca:	2340      	movs	r3, #64	; 0x40
 80052cc:	2101      	movs	r1, #1
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f004 f9b6 	bl	8009640 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b084      	sub	sp, #16
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	4613      	mov	r3, r2
 80052ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80052f6:	2302      	movs	r3, #2
 80052f8:	e01a      	b.n	8005330 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	79fa      	ldrb	r2, [r7, #7]
 8005326:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f004 f823 	bl	8009374 <USBD_LL_Init>

  return USBD_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005342:	2300      	movs	r3, #0
 8005344:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	e001      	b.n	800535e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800535a:	2302      	movs	r3, #2
 800535c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800535e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr

0800536a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b082      	sub	sp, #8
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f004 f858 	bl	8009428 <USBD_LL_Start>

  return USBD_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80053a2:	2302      	movs	r3, #2
 80053a4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00c      	beq.n	80053ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	4611      	mov	r1, r2
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	4798      	blx	r3
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	4611      	mov	r1, r2
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	4798      	blx	r3

  return USBD_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b082      	sub	sp, #8
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fecb 	bl	80061a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005420:	461a      	mov	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2b01      	cmp	r3, #1
 8005434:	d00c      	beq.n	8005450 <USBD_LL_SetupStage+0x56>
 8005436:	2b01      	cmp	r3, #1
 8005438:	d302      	bcc.n	8005440 <USBD_LL_SetupStage+0x46>
 800543a:	2b02      	cmp	r3, #2
 800543c:	d010      	beq.n	8005460 <USBD_LL_SetupStage+0x66>
 800543e:	e017      	b.n	8005470 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005446:	4619      	mov	r1, r3
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f9cb 	bl	80057e4 <USBD_StdDevReq>
      break;
 800544e:	e01a      	b.n	8005486 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa2d 	bl	80058b8 <USBD_StdItfReq>
      break;
 800545e:	e012      	b.n	8005486 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa6b 	bl	8005944 <USBD_StdEPReq>
      break;
 800546e:	e00a      	b.n	8005486 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005476:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800547a:	b2db      	uxtb	r3, r3
 800547c:	4619      	mov	r1, r3
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f004 f832 	bl	80094e8 <USBD_LL_StallEP>
      break;
 8005484:	bf00      	nop
  }

  return USBD_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	460b      	mov	r3, r1
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d14b      	bne.n	800553c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80054aa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d134      	bne.n	8005520 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d919      	bls.n	80054f6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	68da      	ldr	r2, [r3, #12]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054d8:	429a      	cmp	r2, r3
 80054da:	d203      	bcs.n	80054e4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	e002      	b.n	80054ea <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	461a      	mov	r2, r3
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 ff4c 	bl	800638c <USBD_CtlContinueRx>
 80054f4:	e038      	b.n	8005568 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00a      	beq.n	8005518 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005508:	2b03      	cmp	r3, #3
 800550a:	d105      	bne.n	8005518 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 ff49 	bl	80063b0 <USBD_CtlSendStatus>
 800551e:	e023      	b.n	8005568 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005526:	2b05      	cmp	r3, #5
 8005528:	d11e      	bne.n	8005568 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005532:	2100      	movs	r1, #0
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f003 ffd7 	bl	80094e8 <USBD_LL_StallEP>
 800553a:	e015      	b.n	8005568 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800554e:	2b03      	cmp	r3, #3
 8005550:	d108      	bne.n	8005564 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	7afa      	ldrb	r2, [r7, #11]
 800555c:	4611      	mov	r1, r2
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	4798      	blx	r3
 8005562:	e001      	b.n	8005568 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005564:	2302      	movs	r3, #2
 8005566:	e000      	b.n	800556a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	460b      	mov	r3, r1
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d17f      	bne.n	8005686 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3314      	adds	r3, #20
 800558a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005592:	2b02      	cmp	r3, #2
 8005594:	d15c      	bne.n	8005650 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d915      	bls.n	80055ce <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	461a      	mov	r2, r3
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 feb6 	bl	800632c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055c0:	2300      	movs	r3, #0
 80055c2:	2200      	movs	r2, #0
 80055c4:	2100      	movs	r1, #0
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f004 f83a 	bl	8009640 <USBD_LL_PrepareReceive>
 80055cc:	e04e      	b.n	800566c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	6912      	ldr	r2, [r2, #16]
 80055d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80055da:	fb02 f201 	mul.w	r2, r2, r1
 80055de:	1a9b      	subs	r3, r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11c      	bne.n	800561e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d316      	bcc.n	800561e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d20f      	bcs.n	800561e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055fe:	2200      	movs	r2, #0
 8005600:	2100      	movs	r1, #0
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fe92 	bl	800632c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005610:	2300      	movs	r3, #0
 8005612:	2200      	movs	r2, #0
 8005614:	2100      	movs	r1, #0
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f004 f812 	bl	8009640 <USBD_LL_PrepareReceive>
 800561c:	e026      	b.n	800566c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005630:	2b03      	cmp	r3, #3
 8005632:	d105      	bne.n	8005640 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005640:	2180      	movs	r1, #128	; 0x80
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f003 ff50 	bl	80094e8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fec4 	bl	80063d6 <USBD_CtlReceiveStatus>
 800564e:	e00d      	b.n	800566c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005656:	2b04      	cmp	r3, #4
 8005658:	d004      	beq.n	8005664 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f003 ff3e 	bl	80094e8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d11d      	bne.n	80056b2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fe83 	bl	8005382 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005684:	e015      	b.n	80056b2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005698:	2b03      	cmp	r3, #3
 800569a:	d108      	bne.n	80056ae <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	7afa      	ldrb	r2, [r7, #11]
 80056a6:	4611      	mov	r1, r2
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	4798      	blx	r3
 80056ac:	e001      	b.n	80056b2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80056ae:	2302      	movs	r3, #2
 80056b0:	e000      	b.n	80056b4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056c4:	2340      	movs	r3, #64	; 0x40
 80056c6:	2200      	movs	r2, #0
 80056c8:	2100      	movs	r1, #0
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f003 fec7 	bl	800945e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2240      	movs	r2, #64	; 0x40
 80056dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056e0:	2340      	movs	r3, #64	; 0x40
 80056e2:	2200      	movs	r2, #0
 80056e4:	2180      	movs	r1, #128	; 0x80
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f003 feb9 	bl	800945e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2240      	movs	r2, #64	; 0x40
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d009      	beq.n	8005734 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6852      	ldr	r2, [r2, #4]
 800572c:	b2d2      	uxtb	r2, r2
 800572e:	4611      	mov	r1, r2
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
  }

  return USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2204      	movs	r2, #4
 8005774:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr

08005784 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005792:	2b04      	cmp	r3, #4
 8005794:	d105      	bne.n	80057a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d10b      	bne.n	80057d8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
	...

080057e4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d004      	beq.n	8005808 <USBD_StdDevReq+0x24>
 80057fe:	2b40      	cmp	r3, #64	; 0x40
 8005800:	d002      	beq.n	8005808 <USBD_StdDevReq+0x24>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <USBD_StdDevReq+0x34>
 8005806:	e04c      	b.n	80058a2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
      break;
 8005816:	e049      	b.n	80058ac <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	2b09      	cmp	r3, #9
 800581e:	d83a      	bhi.n	8005896 <USBD_StdDevReq+0xb2>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <USBD_StdDevReq+0x44>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005879 	.word	0x08005879
 800582c:	0800588d 	.word	0x0800588d
 8005830:	08005897 	.word	0x08005897
 8005834:	08005883 	.word	0x08005883
 8005838:	08005897 	.word	0x08005897
 800583c:	0800585b 	.word	0x0800585b
 8005840:	08005851 	.word	0x08005851
 8005844:	08005897 	.word	0x08005897
 8005848:	0800586f 	.word	0x0800586f
 800584c:	08005865 	.word	0x08005865
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9d4 	bl	8005c00 <USBD_GetDescriptor>
          break;
 8005858:	e022      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800585a:	6839      	ldr	r1, [r7, #0]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fb37 	bl	8005ed0 <USBD_SetAddress>
          break;
 8005862:	e01d      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fb74 	bl	8005f54 <USBD_SetConfig>
          break;
 800586c:	e018      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fbfd 	bl	8006070 <USBD_GetConfig>
          break;
 8005876:	e013      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fc2c 	bl	80060d8 <USBD_GetStatus>
          break;
 8005880:	e00e      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fc5a 	bl	800613e <USBD_SetFeature>
          break;
 800588a:	e009      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fc69 	bl	8006166 <USBD_ClrFeature>
          break;
 8005894:	e004      	b.n	80058a0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005896:	6839      	ldr	r1, [r7, #0]
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fcc1 	bl	8006220 <USBD_CtlError>
          break;
 800589e:	bf00      	nop
      }
      break;
 80058a0:	e004      	b.n	80058ac <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fcbb 	bl	8006220 <USBD_CtlError>
      break;
 80058aa:	bf00      	nop
  }

  return ret;
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d003      	beq.n	80058da <USBD_StdItfReq+0x22>
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d001      	beq.n	80058da <USBD_StdItfReq+0x22>
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d12a      	bne.n	8005930 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058e0:	3b01      	subs	r3, #1
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d81d      	bhi.n	8005922 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	889b      	ldrh	r3, [r3, #4]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d813      	bhi.n	8005918 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
 80058fe:	4603      	mov	r3, r0
 8005900:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	88db      	ldrh	r3, [r3, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d110      	bne.n	800592c <USBD_StdItfReq+0x74>
 800590a:	7bfb      	ldrb	r3, [r7, #15]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10d      	bne.n	800592c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fd4d 	bl	80063b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005916:	e009      	b.n	800592c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fc80 	bl	8006220 <USBD_CtlError>
          break;
 8005920:	e004      	b.n	800592c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fc7b 	bl	8006220 <USBD_CtlError>
          break;
 800592a:	e000      	b.n	800592e <USBD_StdItfReq+0x76>
          break;
 800592c:	bf00      	nop
      }
      break;
 800592e:	e004      	b.n	800593a <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005930:	6839      	ldr	r1, [r7, #0]
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fc74 	bl	8006220 <USBD_CtlError>
      break;
 8005938:	bf00      	nop
  }

  return USBD_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	889b      	ldrh	r3, [r3, #4]
 8005956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005960:	2b20      	cmp	r3, #32
 8005962:	d004      	beq.n	800596e <USBD_StdEPReq+0x2a>
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d002      	beq.n	800596e <USBD_StdEPReq+0x2a>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <USBD_StdEPReq+0x3a>
 800596c:	e13d      	b.n	8005bea <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
      break;
 800597c:	e13a      	b.n	8005bf4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005986:	2b20      	cmp	r3, #32
 8005988:	d10a      	bne.n	80059a0 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	6839      	ldr	r1, [r7, #0]
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
 8005998:	4603      	mov	r3, r0
 800599a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	e12a      	b.n	8005bf6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d03e      	beq.n	8005a26 <USBD_StdEPReq+0xe2>
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d002      	beq.n	80059b2 <USBD_StdEPReq+0x6e>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d070      	beq.n	8005a92 <USBD_StdEPReq+0x14e>
 80059b0:	e115      	b.n	8005bde <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d002      	beq.n	80059c2 <USBD_StdEPReq+0x7e>
 80059bc:	2b03      	cmp	r3, #3
 80059be:	d015      	beq.n	80059ec <USBD_StdEPReq+0xa8>
 80059c0:	e02b      	b.n	8005a1a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00c      	beq.n	80059e2 <USBD_StdEPReq+0x9e>
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	2b80      	cmp	r3, #128	; 0x80
 80059cc:	d009      	beq.n	80059e2 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f003 fd88 	bl	80094e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f003 fd84 	bl	80094e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059e0:	e020      	b.n	8005a24 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fc1b 	bl	8006220 <USBD_CtlError>
              break;
 80059ea:	e01b      	b.n	8005a24 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	885b      	ldrh	r3, [r3, #2]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10e      	bne.n	8005a12 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00b      	beq.n	8005a12 <USBD_StdEPReq+0xce>
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d008      	beq.n	8005a12 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	88db      	ldrh	r3, [r3, #6]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f003 fd6b 	bl	80094e8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fccc 	bl	80063b0 <USBD_CtlSendStatus>

              break;
 8005a18:	e004      	b.n	8005a24 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fbff 	bl	8006220 <USBD_CtlError>
              break;
 8005a22:	bf00      	nop
          }
          break;
 8005a24:	e0e0      	b.n	8005be8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d002      	beq.n	8005a36 <USBD_StdEPReq+0xf2>
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d015      	beq.n	8005a60 <USBD_StdEPReq+0x11c>
 8005a34:	e026      	b.n	8005a84 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <USBD_StdEPReq+0x112>
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	2b80      	cmp	r3, #128	; 0x80
 8005a40:	d009      	beq.n	8005a56 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	4619      	mov	r1, r3
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f003 fd4e 	bl	80094e8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a4c:	2180      	movs	r1, #128	; 0x80
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f003 fd4a 	bl	80094e8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a54:	e01c      	b.n	8005a90 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fbe1 	bl	8006220 <USBD_CtlError>
              break;
 8005a5e:	e017      	b.n	8005a90 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	885b      	ldrh	r3, [r3, #2]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d112      	bne.n	8005a8e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a68:	7bbb      	ldrb	r3, [r7, #14]
 8005a6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f003 fd55 	bl	8009526 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fc97 	bl	80063b0 <USBD_CtlSendStatus>
              }
              break;
 8005a82:	e004      	b.n	8005a8e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fbca 	bl	8006220 <USBD_CtlError>
              break;
 8005a8c:	e000      	b.n	8005a90 <USBD_StdEPReq+0x14c>
              break;
 8005a8e:	bf00      	nop
          }
          break;
 8005a90:	e0aa      	b.n	8005be8 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d002      	beq.n	8005aa2 <USBD_StdEPReq+0x15e>
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d032      	beq.n	8005b06 <USBD_StdEPReq+0x1c2>
 8005aa0:	e097      	b.n	8005bd2 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aa2:	7bbb      	ldrb	r3, [r7, #14]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d007      	beq.n	8005ab8 <USBD_StdEPReq+0x174>
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b80      	cmp	r3, #128	; 0x80
 8005aac:	d004      	beq.n	8005ab8 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fbb5 	bl	8006220 <USBD_CtlError>
                break;
 8005ab6:	e091      	b.n	8005bdc <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da0b      	bge.n	8005ad8 <USBD_StdEPReq+0x194>
 8005ac0:	7bbb      	ldrb	r3, [r7, #14]
 8005ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	3310      	adds	r3, #16
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	e00b      	b.n	8005af0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	3304      	adds	r3, #4
 8005af0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2202      	movs	r2, #2
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fbf8 	bl	80062f4 <USBD_CtlSendData>
              break;
 8005b04:	e06a      	b.n	8005bdc <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	da11      	bge.n	8005b32 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	f003 020f 	and.w	r2, r3, #15
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	3318      	adds	r3, #24
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d117      	bne.n	8005b58 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b28:	6839      	ldr	r1, [r7, #0]
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fb78 	bl	8006220 <USBD_CtlError>
                  break;
 8005b30:	e054      	b.n	8005bdc <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	f003 020f 	and.w	r2, r3, #15
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fb65 	bl	8006220 <USBD_CtlError>
                  break;
 8005b56:	e041      	b.n	8005bdc <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da0b      	bge.n	8005b78 <USBD_StdEPReq+0x234>
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	3310      	adds	r3, #16
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	4413      	add	r3, r2
 8005b74:	3304      	adds	r3, #4
 8005b76:	e00b      	b.n	8005b90 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b78:	7bbb      	ldrb	r3, [r7, #14]
 8005b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	3304      	adds	r3, #4
 8005b90:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <USBD_StdEPReq+0x25a>
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d103      	bne.n	8005ba6 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	601a      	str	r2, [r3, #0]
 8005ba4:	e00e      	b.n	8005bc4 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f003 fcda 	bl	8009564 <USBD_LL_IsStallEP>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	e002      	b.n	8005bc4 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fb92 	bl	80062f4 <USBD_CtlSendData>
              break;
 8005bd0:	e004      	b.n	8005bdc <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fb23 	bl	8006220 <USBD_CtlError>
              break;
 8005bda:	bf00      	nop
          }
          break;
 8005bdc:	e004      	b.n	8005be8 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fb1d 	bl	8006220 <USBD_CtlError>
          break;
 8005be6:	bf00      	nop
      }
      break;
 8005be8:	e004      	b.n	8005bf4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fb17 	bl	8006220 <USBD_CtlError>
      break;
 8005bf2:	bf00      	nop
  }

  return ret;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
	...

08005c00 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	885b      	ldrh	r3, [r3, #2]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	2b06      	cmp	r3, #6
 8005c22:	f200 8128 	bhi.w	8005e76 <USBD_GetDescriptor+0x276>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <USBD_GetDescriptor+0x2c>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c61 	.word	0x08005c61
 8005c34:	08005ca1 	.word	0x08005ca1
 8005c38:	08005e77 	.word	0x08005e77
 8005c3c:	08005e77 	.word	0x08005e77
 8005c40:	08005e17 	.word	0x08005e17
 8005c44:	08005e43 	.word	0x08005e43
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	7c12      	ldrb	r2, [r2, #16]
 8005c54:	f107 0108 	add.w	r1, r7, #8
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
 8005c5c:	60f8      	str	r0, [r7, #12]
      break;
 8005c5e:	e112      	b.n	8005e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7c1b      	ldrb	r3, [r3, #16]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10d      	bne.n	8005c84 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	f107 0208 	add.w	r2, r7, #8
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
 8005c78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	2202      	movs	r2, #2
 8005c80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c82:	e100      	b.n	8005e86 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	f107 0208 	add.w	r2, r7, #8
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
 8005c94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	701a      	strb	r2, [r3, #0]
      break;
 8005c9e:	e0f2      	b.n	8005e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	885b      	ldrh	r3, [r3, #2]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b05      	cmp	r3, #5
 8005ca8:	f200 80ac 	bhi.w	8005e04 <USBD_GetDescriptor+0x204>
 8005cac:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_GetDescriptor+0xb4>)
 8005cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb2:	bf00      	nop
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005d01 	.word	0x08005d01
 8005cbc:	08005d35 	.word	0x08005d35
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d9d 	.word	0x08005d9d
 8005cc8:	08005dd1 	.word	0x08005dd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00b      	beq.n	8005cf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	7c12      	ldrb	r2, [r2, #16]
 8005ce4:	f107 0108 	add.w	r1, r7, #8
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cee:	e091      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fa94 	bl	8006220 <USBD_CtlError>
            err++;
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8005cfe:	e089      	b.n	8005e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	7c12      	ldrb	r2, [r2, #16]
 8005d18:	f107 0108 	add.w	r1, r7, #8
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d22:	e077      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa7a 	bl	8006220 <USBD_CtlError>
            err++;
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	72fb      	strb	r3, [r7, #11]
          break;
 8005d32:	e06f      	b.n	8005e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d56:	e05d      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa60 	bl	8006220 <USBD_CtlError>
            err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
          break;
 8005d66:	e055      	b.n	8005e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8a:	e043      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa46 	bl	8006220 <USBD_CtlError>
            err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9a:	e03b      	b.n	8005e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dbe:	e029      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa2c 	bl	8006220 <USBD_CtlError>
            err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dce:	e021      	b.n	8005e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005df2:	e00f      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa12 	bl	8006220 <USBD_CtlError>
            err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
          break;
 8005e02:	e007      	b.n	8005e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa0a 	bl	8006220 <USBD_CtlError>
          err++;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005e12:	e038      	b.n	8005e86 <USBD_GetDescriptor+0x286>
 8005e14:	e037      	b.n	8005e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7c1b      	ldrb	r3, [r3, #16]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	f107 0208 	add.w	r2, r7, #8
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4798      	blx	r3
 8005e2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e30:	e029      	b.n	8005e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f9f3 	bl	8006220 <USBD_CtlError>
        err++;
 8005e3a:	7afb      	ldrb	r3, [r7, #11]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8005e40:	e021      	b.n	8005e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7c1b      	ldrb	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10d      	bne.n	8005e66 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e52:	f107 0208 	add.w	r2, r7, #8
 8005e56:	4610      	mov	r0, r2
 8005e58:	4798      	blx	r3
 8005e5a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	2207      	movs	r2, #7
 8005e62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e64:	e00f      	b.n	8005e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e66:	6839      	ldr	r1, [r7, #0]
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f9d9 	bl	8006220 <USBD_CtlError>
        err++;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
 8005e70:	3301      	adds	r3, #1
 8005e72:	72fb      	strb	r3, [r7, #11]
      break;
 8005e74:	e007      	b.n	8005e86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f9d1 	bl	8006220 <USBD_CtlError>
      err++;
 8005e7e:	7afb      	ldrb	r3, [r7, #11]
 8005e80:	3301      	adds	r3, #1
 8005e82:	72fb      	strb	r3, [r7, #11]
      break;
 8005e84:	bf00      	nop
  }

  if (err != 0U)
 8005e86:	7afb      	ldrb	r3, [r7, #11]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d11c      	bne.n	8005ec6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e8c:	893b      	ldrh	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d011      	beq.n	8005eb6 <USBD_GetDescriptor+0x2b6>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	88db      	ldrh	r3, [r3, #6]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	88da      	ldrh	r2, [r3, #6]
 8005e9e:	893b      	ldrh	r3, [r7, #8]
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	bf28      	it	cs
 8005ea4:	4613      	movcs	r3, r2
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	461a      	mov	r2, r3
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fa1f 	bl	80062f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	88db      	ldrh	r3, [r3, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa76 	bl	80063b0 <USBD_CtlSendStatus>
 8005ec4:	e000      	b.n	8005ec8 <USBD_GetDescriptor+0x2c8>
    return;
 8005ec6:	bf00      	nop
    }
  }
}
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop

08005ed0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	889b      	ldrh	r3, [r3, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d130      	bne.n	8005f44 <USBD_SetAddress+0x74>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	88db      	ldrh	r3, [r3, #6]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d12c      	bne.n	8005f44 <USBD_SetAddress+0x74>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	885b      	ldrh	r3, [r3, #2]
 8005eee:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef0:	d828      	bhi.n	8005f44 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	885b      	ldrh	r3, [r3, #2]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005efc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f04:	2b03      	cmp	r3, #3
 8005f06:	d104      	bne.n	8005f12 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f988 	bl	8006220 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f10:	e01c      	b.n	8005f4c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f003 fb4c 	bl	80095bc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fa43 	bl	80063b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f38:	e008      	b.n	8005f4c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f42:	e003      	b.n	8005f4c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f96a 	bl	8006220 <USBD_CtlError>
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	885b      	ldrh	r3, [r3, #2]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	4b41      	ldr	r3, [pc, #260]	; (800606c <USBD_SetConfig+0x118>)
 8005f66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f68:	4b40      	ldr	r3, [pc, #256]	; (800606c <USBD_SetConfig+0x118>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d904      	bls.n	8005f7a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f954 	bl	8006220 <USBD_CtlError>
 8005f78:	e075      	b.n	8006066 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d002      	beq.n	8005f8a <USBD_SetConfig+0x36>
 8005f84:	2b03      	cmp	r3, #3
 8005f86:	d023      	beq.n	8005fd0 <USBD_SetConfig+0x7c>
 8005f88:	e062      	b.n	8006050 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f8a:	4b38      	ldr	r3, [pc, #224]	; (800606c <USBD_SetConfig+0x118>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d01a      	beq.n	8005fc8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f92:	4b36      	ldr	r3, [pc, #216]	; (800606c <USBD_SetConfig+0x118>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005fa4:	4b31      	ldr	r3, [pc, #196]	; (800606c <USBD_SetConfig+0x118>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff f9f3 	bl	8005396 <USBD_SetClassConfig>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d104      	bne.n	8005fc0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005fb6:	6839      	ldr	r1, [r7, #0]
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f931 	bl	8006220 <USBD_CtlError>
            return;
 8005fbe:	e052      	b.n	8006066 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9f5 	bl	80063b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005fc6:	e04e      	b.n	8006066 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f9f1 	bl	80063b0 <USBD_CtlSendStatus>
        break;
 8005fce:	e04a      	b.n	8006066 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005fd0:	4b26      	ldr	r3, [pc, #152]	; (800606c <USBD_SetConfig+0x118>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d112      	bne.n	8005ffe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005fe0:	4b22      	ldr	r3, [pc, #136]	; (800606c <USBD_SetConfig+0x118>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005fea:	4b20      	ldr	r3, [pc, #128]	; (800606c <USBD_SetConfig+0x118>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff f9ef 	bl	80053d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f9da 	bl	80063b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005ffc:	e033      	b.n	8006066 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <USBD_SetConfig+0x118>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d01d      	beq.n	8006048 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff f9dd 	bl	80053d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800601a:	4b14      	ldr	r3, [pc, #80]	; (800606c <USBD_SetConfig+0x118>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006024:	4b11      	ldr	r3, [pc, #68]	; (800606c <USBD_SetConfig+0x118>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff f9b3 	bl	8005396 <USBD_SetClassConfig>
 8006030:	4603      	mov	r3, r0
 8006032:	2b02      	cmp	r3, #2
 8006034:	d104      	bne.n	8006040 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8f1 	bl	8006220 <USBD_CtlError>
            return;
 800603e:	e012      	b.n	8006066 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f9b5 	bl	80063b0 <USBD_CtlSendStatus>
        break;
 8006046:	e00e      	b.n	8006066 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9b1 	bl	80063b0 <USBD_CtlSendStatus>
        break;
 800604e:	e00a      	b.n	8006066 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006050:	6839      	ldr	r1, [r7, #0]
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8e4 	bl	8006220 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <USBD_SetConfig+0x118>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff f9b8 	bl	80053d4 <USBD_ClrClassConfig>
        break;
 8006064:	bf00      	nop
    }
  }
}
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	2000019c 	.word	0x2000019c

08006070 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	88db      	ldrh	r3, [r3, #6]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d004      	beq.n	800608c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f8cb 	bl	8006220 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800608a:	e021      	b.n	80060d0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006092:	2b01      	cmp	r3, #1
 8006094:	db17      	blt.n	80060c6 <USBD_GetConfig+0x56>
 8006096:	2b02      	cmp	r3, #2
 8006098:	dd02      	ble.n	80060a0 <USBD_GetConfig+0x30>
 800609a:	2b03      	cmp	r3, #3
 800609c:	d00b      	beq.n	80060b6 <USBD_GetConfig+0x46>
 800609e:	e012      	b.n	80060c6 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	3308      	adds	r3, #8
 80060aa:	2201      	movs	r2, #1
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f920 	bl	80062f4 <USBD_CtlSendData>
        break;
 80060b4:	e00c      	b.n	80060d0 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3304      	adds	r3, #4
 80060ba:	2201      	movs	r2, #1
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f918 	bl	80062f4 <USBD_CtlSendData>
        break;
 80060c4:	e004      	b.n	80060d0 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8a9 	bl	8006220 <USBD_CtlError>
        break;
 80060ce:	bf00      	nop
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e8:	3b01      	subs	r3, #1
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d81e      	bhi.n	800612c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	88db      	ldrh	r3, [r3, #6]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d004      	beq.n	8006100 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f891 	bl	8006220 <USBD_CtlError>
        break;
 80060fe:	e01a      	b.n	8006136 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f043 0202 	orr.w	r2, r3, #2
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	330c      	adds	r3, #12
 8006120:	2202      	movs	r2, #2
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f8e5 	bl	80062f4 <USBD_CtlSendData>
      break;
 800612a:	e004      	b.n	8006136 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800612c:	6839      	ldr	r1, [r7, #0]
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f876 	bl	8006220 <USBD_CtlError>
      break;
 8006134:	bf00      	nop
  }
}
 8006136:	bf00      	nop
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	885b      	ldrh	r3, [r3, #2]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d106      	bne.n	800615e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f929 	bl	80063b0 <USBD_CtlSendStatus>
  }
}
 800615e:	bf00      	nop
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}

08006166 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006166:	b580      	push	{r7, lr}
 8006168:	b082      	sub	sp, #8
 800616a:	af00      	add	r7, sp, #0
 800616c:	6078      	str	r0, [r7, #4]
 800616e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006176:	3b01      	subs	r3, #1
 8006178:	2b02      	cmp	r3, #2
 800617a:	d80b      	bhi.n	8006194 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	885b      	ldrh	r3, [r3, #2]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d10c      	bne.n	800619e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f90f 	bl	80063b0 <USBD_CtlSendStatus>
      }
      break;
 8006192:	e004      	b.n	800619e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f842 	bl	8006220 <USBD_CtlError>
      break;
 800619c:	e000      	b.n	80061a0 <USBD_ClrFeature+0x3a>
      break;
 800619e:	bf00      	nop
  }
}
 80061a0:	bf00      	nop
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	785a      	ldrb	r2, [r3, #1]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	3302      	adds	r3, #2
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	3303      	adds	r3, #3
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	3304      	adds	r3, #4
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3305      	adds	r3, #5
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	3306      	adds	r3, #6
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	b29a      	uxth	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	3307      	adds	r3, #7
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	b29b      	uxth	r3, r3
 800620e:	4413      	add	r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	80da      	strh	r2, [r3, #6]

}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800622a:	2180      	movs	r1, #128	; 0x80
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f003 f95b 	bl	80094e8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006232:	2100      	movs	r1, #0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f003 f957 	bl	80094e8 <USBD_LL_StallEP>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d032      	beq.n	80062be <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f834 	bl	80062c6 <USBD_GetLen>
 800625e:	4603      	mov	r3, r0
 8006260:	3301      	adds	r3, #1
 8006262:	b29b      	uxth	r3, r3
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	75fa      	strb	r2, [r7, #23]
 8006272:	461a      	mov	r2, r3
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4413      	add	r3, r2
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	7812      	ldrb	r2, [r2, #0]
 800627c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800627e:	7dfb      	ldrb	r3, [r7, #23]
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	75fa      	strb	r2, [r7, #23]
 8006284:	461a      	mov	r2, r3
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	4413      	add	r3, r2
 800628a:	2203      	movs	r2, #3
 800628c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800628e:	e012      	b.n	80062b6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1c5a      	adds	r2, r3, #1
 8006294:	60fa      	str	r2, [r7, #12]
 8006296:	7dfa      	ldrb	r2, [r7, #23]
 8006298:	1c51      	adds	r1, r2, #1
 800629a:	75f9      	strb	r1, [r7, #23]
 800629c:	4611      	mov	r1, r2
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	440a      	add	r2, r1
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	75fa      	strb	r2, [r7, #23]
 80062ac:	461a      	mov	r2, r3
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	2200      	movs	r2, #0
 80062b4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e8      	bne.n	8006290 <USBD_GetString+0x4e>
    }
  }
}
 80062be:	bf00      	nop
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80062d2:	e005      	b.n	80062e0 <USBD_GetLen+0x1a>
  {
    len++;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	3301      	adds	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
    buf++;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3301      	adds	r3, #1
 80062de:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f5      	bne.n	80062d4 <USBD_GetLen+0xe>
  }

  return len;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2202      	movs	r2, #2
 8006306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006310:	88fa      	ldrh	r2, [r7, #6]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006316:	88fb      	ldrh	r3, [r7, #6]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	2100      	movs	r1, #0
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f003 f96c 	bl	80095fa <USBD_LL_Transmit>

  return USBD_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800633a:	88fb      	ldrh	r3, [r7, #6]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	2100      	movs	r1, #0
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f003 f95a 	bl	80095fa <USBD_LL_Transmit>

  return USBD_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2203      	movs	r2, #3
 8006362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006366:	88fa      	ldrh	r2, [r7, #6]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	2100      	movs	r1, #0
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f003 f95f 	bl	8009640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	2100      	movs	r1, #0
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f003 f94d 	bl	8009640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2204      	movs	r2, #4
 80063bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063c0:	2300      	movs	r3, #0
 80063c2:	2200      	movs	r2, #0
 80063c4:	2100      	movs	r1, #0
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f003 f917 	bl	80095fa <USBD_LL_Transmit>

  return USBD_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2205      	movs	r2, #5
 80063e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063e6:	2300      	movs	r3, #0
 80063e8:	2200      	movs	r2, #0
 80063ea:	2100      	movs	r1, #0
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f003 f927 	bl	8009640 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006402:	f3ef 8305 	mrs	r3, IPSR
 8006406:	60bb      	str	r3, [r7, #8]
  return(result);
 8006408:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10f      	bne.n	800642e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640e:	f3ef 8310 	mrs	r3, PRIMASK
 8006412:	607b      	str	r3, [r7, #4]
  return(result);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d109      	bne.n	800642e <osKernelInitialize+0x32>
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <osKernelInitialize+0x60>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b02      	cmp	r3, #2
 8006420:	d109      	bne.n	8006436 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006422:	f3ef 8311 	mrs	r3, BASEPRI
 8006426:	603b      	str	r3, [r7, #0]
  return(result);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800642e:	f06f 0305 	mvn.w	r3, #5
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	e00c      	b.n	8006450 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <osKernelInitialize+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d105      	bne.n	800644a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <osKernelInitialize+0x60>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006444:	2300      	movs	r3, #0
 8006446:	60fb      	str	r3, [r7, #12]
 8006448:	e002      	b.n	8006450 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006450:	68fb      	ldr	r3, [r7, #12]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr
 800645c:	200001a0 	.word	0x200001a0

08006460 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006466:	f3ef 8305 	mrs	r3, IPSR
 800646a:	60bb      	str	r3, [r7, #8]
  return(result);
 800646c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10f      	bne.n	8006492 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006472:	f3ef 8310 	mrs	r3, PRIMASK
 8006476:	607b      	str	r3, [r7, #4]
  return(result);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <osKernelStart+0x32>
 800647e:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <osKernelStart+0x64>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b02      	cmp	r3, #2
 8006484:	d109      	bne.n	800649a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006486:	f3ef 8311 	mrs	r3, BASEPRI
 800648a:	603b      	str	r3, [r7, #0]
  return(result);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <osKernelStart+0x3a>
    stat = osErrorISR;
 8006492:	f06f 0305 	mvn.w	r3, #5
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e00e      	b.n	80064b8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800649a:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <osKernelStart+0x64>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d107      	bne.n	80064b2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <osKernelStart+0x64>)
 80064a4:	2202      	movs	r2, #2
 80064a6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80064a8:	f001 f8d6 	bl	8007658 <vTaskStartScheduler>
      stat = osOK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e002      	b.n	80064b8 <osKernelStart+0x58>
    } else {
      stat = osError;
 80064b2:	f04f 33ff 	mov.w	r3, #4294967295
 80064b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80064b8:	68fb      	ldr	r3, [r7, #12]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	200001a0 	.word	0x200001a0

080064c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b092      	sub	sp, #72	; 0x48
 80064cc:	af04      	add	r7, sp, #16
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d8:	f3ef 8305 	mrs	r3, IPSR
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 8094 	bne.w	800660e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064e6:	f3ef 8310 	mrs	r3, PRIMASK
 80064ea:	623b      	str	r3, [r7, #32]
  return(result);
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f040 808d 	bne.w	800660e <osThreadNew+0x146>
 80064f4:	4b48      	ldr	r3, [pc, #288]	; (8006618 <osThreadNew+0x150>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d106      	bne.n	800650a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006500:	61fb      	str	r3, [r7, #28]
  return(result);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	2b00      	cmp	r3, #0
 8006506:	f040 8082 	bne.w	800660e <osThreadNew+0x146>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d07e      	beq.n	800660e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006514:	2318      	movs	r3, #24
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006518:	2300      	movs	r3, #0
 800651a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800651c:	f107 031b 	add.w	r3, r7, #27
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006522:	f04f 33ff 	mov.w	r3, #4294967295
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d045      	beq.n	80065ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <osThreadNew+0x74>
        name = attr->name;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <osThreadNew+0x9a>
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b38      	cmp	r3, #56	; 0x38
 8006554:	d805      	bhi.n	8006562 <osThreadNew+0x9a>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <osThreadNew+0x9e>
        return (NULL);
 8006562:	2300      	movs	r3, #0
 8006564:	e054      	b.n	8006610 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	089b      	lsrs	r3, r3, #2
 8006574:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00e      	beq.n	800659c <osThreadNew+0xd4>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	2b5b      	cmp	r3, #91	; 0x5b
 8006584:	d90a      	bls.n	800659c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800658a:	2b00      	cmp	r3, #0
 800658c:	d006      	beq.n	800659c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <osThreadNew+0xd4>
        mem = 1;
 8006596:	2301      	movs	r3, #1
 8006598:	62bb      	str	r3, [r7, #40]	; 0x28
 800659a:	e010      	b.n	80065be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d10c      	bne.n	80065be <osThreadNew+0xf6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d108      	bne.n	80065be <osThreadNew+0xf6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <osThreadNew+0xf6>
          mem = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b8:	e001      	b.n	80065be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80065ba:	2300      	movs	r3, #0
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d110      	bne.n	80065e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065cc:	9202      	str	r2, [sp, #8]
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fe02 	bl	80071e4 <xTaskCreateStatic>
 80065e0:	4603      	mov	r3, r0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e013      	b.n	800660e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80065e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d110      	bne.n	800660e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fe49 	bl	8007296 <xTaskCreate>
 8006604:	4603      	mov	r3, r0
 8006606:	2b01      	cmp	r3, #1
 8006608:	d001      	beq.n	800660e <osThreadNew+0x146>
          hTask = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800660e:	697b      	ldr	r3, [r7, #20]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3738      	adds	r7, #56	; 0x38
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	200001a0 	.word	0x200001a0

0800661c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006624:	f3ef 8305 	mrs	r3, IPSR
 8006628:	613b      	str	r3, [r7, #16]
  return(result);
 800662a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10f      	bne.n	8006650 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006630:	f3ef 8310 	mrs	r3, PRIMASK
 8006634:	60fb      	str	r3, [r7, #12]
  return(result);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d109      	bne.n	8006650 <osDelay+0x34>
 800663c:	4b0d      	ldr	r3, [pc, #52]	; (8006674 <osDelay+0x58>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b02      	cmp	r3, #2
 8006642:	d109      	bne.n	8006658 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006644:	f3ef 8311 	mrs	r3, BASEPRI
 8006648:	60bb      	str	r3, [r7, #8]
  return(result);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <osDelay+0x3c>
    stat = osErrorISR;
 8006650:	f06f 0305 	mvn.w	r3, #5
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	e007      	b.n	8006668 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006658:	2300      	movs	r3, #0
 800665a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 ffc4 	bl	80075f0 <vTaskDelay>
    }
  }

  return (stat);
 8006668:	697b      	ldr	r3, [r7, #20]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200001a0 	.word	0x200001a0

08006678 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vApplicationGetIdleTaskMemory+0x28>)
 8006688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800668e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2280      	movs	r2, #128	; 0x80
 8006694:	601a      	str	r2, [r3, #0]
}
 8006696:	bf00      	nop
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	bc80      	pop	{r7}
 800669e:	4770      	bx	lr
 80066a0:	200001a4 	.word	0x200001a4
 80066a4:	20000200 	.word	0x20000200

080066a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4a07      	ldr	r2, [pc, #28]	; (80066d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80066b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	4a06      	ldr	r2, [pc, #24]	; (80066d8 <vApplicationGetTimerTaskMemory+0x30>)
 80066be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066c6:	601a      	str	r2, [r3, #0]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000400 	.word	0x20000400
 80066d8:	2000045c 	.word	0x2000045c

080066dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f103 0208 	add.w	r2, r3, #8
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f103 0208 	add.w	r2, r3, #8
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f103 0208 	add.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	bc80      	pop	{r7}
 8006718:	4770      	bx	lr

0800671a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006732:	b480      	push	{r7}
 8006734:	b085      	sub	sp, #20
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr

08006778 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d103      	bne.n	8006798 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e00c      	b.n	80067b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3308      	adds	r3, #8
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	e002      	b.n	80067a6 <vListInsert+0x2e>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d2f6      	bcs.n	80067a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
}
 80067de:	bf00      	nop
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bc80      	pop	{r7}
 80067e6:	4770      	bx	lr

080067e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	6892      	ldr	r2, [r2, #8]
 80067fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6852      	ldr	r2, [r2, #4]
 8006808:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d103      	bne.n	800681c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689a      	ldr	r2, [r3, #8]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	1e5a      	subs	r2, r3, #1
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	bc80      	pop	{r7}
 8006838:	4770      	bx	lr
	...

0800683c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60bb      	str	r3, [r7, #8]
 8006862:	e7fe      	b.n	8006862 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006864:	f002 f808 	bl	8008878 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006874:	fb01 f303 	mul.w	r3, r1, r3
 8006878:	441a      	add	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	3b01      	subs	r3, #1
 8006896:	68f9      	ldr	r1, [r7, #12]
 8006898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	441a      	add	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	22ff      	movs	r2, #255	; 0xff
 80068a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	22ff      	movs	r2, #255	; 0xff
 80068b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d114      	bne.n	80068e4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01a      	beq.n	80068f8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	3310      	adds	r3, #16
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 f94a 	bl	8007b60 <xTaskRemoveFromEventList>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d012      	beq.n	80068f8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <xQueueGenericReset+0xcc>)
 80068d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d8:	601a      	str	r2, [r3, #0]
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	e009      	b.n	80068f8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3310      	adds	r3, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff fef7 	bl	80066dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3324      	adds	r3, #36	; 0x24
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7ff fef2 	bl	80066dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068f8:	f001 ffec 	bl	80088d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068fc:	2301      	movs	r3, #1
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08e      	sub	sp, #56	; 0x38
 8006910:	af02      	add	r7, sp, #8
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d109      	bne.n	8006934 <xQueueGenericCreateStatic+0x28>
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	62bb      	str	r3, [r7, #40]	; 0x28
 8006932:	e7fe      	b.n	8006932 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <xQueueGenericCreateStatic+0x42>
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	627b      	str	r3, [r7, #36]	; 0x24
 800694c:	e7fe      	b.n	800694c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <xQueueGenericCreateStatic+0x4e>
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <xQueueGenericCreateStatic+0x52>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <xQueueGenericCreateStatic+0x54>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d109      	bne.n	8006978 <xQueueGenericCreateStatic+0x6c>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
 8006970:	f3bf 8f4f 	dsb	sy
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e7fe      	b.n	8006976 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <xQueueGenericCreateStatic+0x78>
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <xQueueGenericCreateStatic+0x7c>
 8006984:	2301      	movs	r3, #1
 8006986:	e000      	b.n	800698a <xQueueGenericCreateStatic+0x7e>
 8006988:	2300      	movs	r3, #0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <xQueueGenericCreateStatic+0x96>
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069a2:	2350      	movs	r3, #80	; 0x50
 80069a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b50      	cmp	r3, #80	; 0x50
 80069aa:	d009      	beq.n	80069c0 <xQueueGenericCreateStatic+0xb4>
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	e7fe      	b.n	80069be <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	4613      	mov	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f805 	bl	80069f0 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3730      	adds	r7, #48	; 0x30
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e002      	b.n	8006a12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a1e:	2101      	movs	r1, #1
 8006a20:	69b8      	ldr	r0, [r7, #24]
 8006a22:	f7ff ff0b 	bl	800683c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	78fa      	ldrb	r2, [r7, #3]
 8006a2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a2e:	bf00      	nop
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
	...

08006a38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a46:	2300      	movs	r3, #0
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <xQueueGenericSend+0x30>
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a66:	e7fe      	b.n	8006a66 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d103      	bne.n	8006a76 <xQueueGenericSend+0x3e>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <xQueueGenericSend+0x42>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <xQueueGenericSend+0x44>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d109      	bne.n	8006a94 <xQueueGenericSend+0x5c>
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
 8006a92:	e7fe      	b.n	8006a92 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSend+0x6a>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSend+0x6e>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSend+0x70>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <xQueueGenericSend+0x88>
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	e7fe      	b.n	8006abe <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ac0:	f001 fa08 	bl	8007ed4 <xTaskGetSchedulerState>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d102      	bne.n	8006ad0 <xQueueGenericSend+0x98>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <xQueueGenericSend+0x9c>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <xQueueGenericSend+0x9e>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <xQueueGenericSend+0xb6>
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aee:	f001 fec3 	bl	8008878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <xQueueGenericSend+0xcc>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d129      	bne.n	8006b58 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b0a:	f000 f9ff 	bl	8006f0c <prvCopyDataToQueue>
 8006b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d010      	beq.n	8006b3a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	3324      	adds	r3, #36	; 0x24
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f001 f81f 	bl	8007b60 <xTaskRemoveFromEventList>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d013      	beq.n	8006b50 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b28:	4b3f      	ldr	r3, [pc, #252]	; (8006c28 <xQueueGenericSend+0x1f0>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	e00a      	b.n	8006b50 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b40:	4b39      	ldr	r3, [pc, #228]	; (8006c28 <xQueueGenericSend+0x1f0>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b50:	f001 fec0 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e063      	b.n	8006c20 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b5e:	f001 feb9 	bl	80088d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	e05c      	b.n	8006c20 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d106      	bne.n	8006b7a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b6c:	f107 0314 	add.w	r3, r7, #20
 8006b70:	4618      	mov	r0, r3
 8006b72:	f001 f857 	bl	8007c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b76:	2301      	movs	r3, #1
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b7a:	f001 feab 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b7e:	f000 fdcf 	bl	8007720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b82:	f001 fe79 	bl	8008878 <vPortEnterCritical>
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b8c:	b25b      	sxtb	r3, r3
 8006b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b92:	d103      	bne.n	8006b9c <xQueueGenericSend+0x164>
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba2:	b25b      	sxtb	r3, r3
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba8:	d103      	bne.n	8006bb2 <xQueueGenericSend+0x17a>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb2:	f001 fe8f 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bb6:	1d3a      	adds	r2, r7, #4
 8006bb8:	f107 0314 	add.w	r3, r7, #20
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 f846 	bl	8007c50 <xTaskCheckForTimeOut>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d124      	bne.n	8006c14 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bcc:	f000 fa96 	bl	80070fc <prvIsQueueFull>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d018      	beq.n	8006c08 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	3310      	adds	r3, #16
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	4611      	mov	r1, r2
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 ff70 	bl	8007ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be6:	f000 fa21 	bl	800702c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bea:	f000 fda7 	bl	800773c <xTaskResumeAll>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f47f af7c 	bne.w	8006aee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006bf6:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <xQueueGenericSend+0x1f0>)
 8006bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	e772      	b.n	8006aee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0a:	f000 fa0f 	bl	800702c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c0e:	f000 fd95 	bl	800773c <xTaskResumeAll>
 8006c12:	e76c      	b.n	8006aee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c16:	f000 fa09 	bl	800702c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c1a:	f000 fd8f 	bl	800773c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c1e:	2300      	movs	r3, #0
		}
	}
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3738      	adds	r7, #56	; 0x38
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08e      	sub	sp, #56	; 0x38
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <xQueueGenericSendFromISR+0x2c>
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
 8006c56:	e7fe      	b.n	8006c56 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d103      	bne.n	8006c66 <xQueueGenericSendFromISR+0x3a>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <xQueueGenericSendFromISR+0x3e>
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <xQueueGenericSendFromISR+0x40>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d109      	bne.n	8006c84 <xQueueGenericSendFromISR+0x58>
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	623b      	str	r3, [r7, #32]
 8006c82:	e7fe      	b.n	8006c82 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d103      	bne.n	8006c92 <xQueueGenericSendFromISR+0x66>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <xQueueGenericSendFromISR+0x6a>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <xQueueGenericSendFromISR+0x6c>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <xQueueGenericSendFromISR+0x84>
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	61fb      	str	r3, [r7, #28]
 8006cae:	e7fe      	b.n	8006cae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cb0:	f001 fe9c 	bl	80089ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cb4:	f3ef 8211 	mrs	r2, BASEPRI
 8006cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbc:	f383 8811 	msr	BASEPRI, r3
 8006cc0:	f3bf 8f6f 	isb	sy
 8006cc4:	f3bf 8f4f 	dsb	sy
 8006cc8:	61ba      	str	r2, [r7, #24]
 8006cca:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d302      	bcc.n	8006ce2 <xQueueGenericSendFromISR+0xb6>
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d12c      	bne.n	8006d3c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf2:	f000 f90b 	bl	8006f0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cf6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfe:	d112      	bne.n	8006d26 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d016      	beq.n	8006d36 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	3324      	adds	r3, #36	; 0x24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 ff27 	bl	8007b60 <xTaskRemoveFromEventList>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00b      	beq.n	8006d36 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e007      	b.n	8006d36 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	b25a      	sxtb	r2, r3
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d36:	2301      	movs	r3, #1
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d3a:	e001      	b.n	8006d40 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3738      	adds	r7, #56	; 0x38
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d60:	2300      	movs	r3, #0
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d109      	bne.n	8006d82 <xQueueReceive+0x2e>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	623b      	str	r3, [r7, #32]
 8006d80:	e7fe      	b.n	8006d80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <xQueueReceive+0x3c>
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <xQueueReceive+0x40>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <xQueueReceive+0x42>
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d109      	bne.n	8006dae <xQueueReceive+0x5a>
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	e7fe      	b.n	8006dac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dae:	f001 f891 	bl	8007ed4 <xTaskGetSchedulerState>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <xQueueReceive+0x6a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <xQueueReceive+0x6e>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e000      	b.n	8006dc4 <xQueueReceive+0x70>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d109      	bne.n	8006ddc <xQueueReceive+0x88>
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e7fe      	b.n	8006dda <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ddc:	f001 fd4c 	bl	8008878 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01f      	beq.n	8006e2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dec:	68b9      	ldr	r1, [r7, #8]
 8006dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df0:	f000 f8f6 	bl	8006fe0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	1e5a      	subs	r2, r3, #1
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00f      	beq.n	8006e24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	3310      	adds	r3, #16
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fea9 	bl	8007b60 <xTaskRemoveFromEventList>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e14:	4b3c      	ldr	r3, [pc, #240]	; (8006f08 <xQueueReceive+0x1b4>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e24:	f001 fd56 	bl	80088d4 <vPortExitCritical>
				return pdPASS;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e069      	b.n	8006f00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e32:	f001 fd4f 	bl	80088d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e062      	b.n	8006f00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 feed 	bl	8007c24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e4e:	f001 fd41 	bl	80088d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e52:	f000 fc65 	bl	8007720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e56:	f001 fd0f 	bl	8008878 <vPortEnterCritical>
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d103      	bne.n	8006e70 <xQueueReceive+0x11c>
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d103      	bne.n	8006e86 <xQueueReceive+0x132>
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e86:	f001 fd25 	bl	80088d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e8a:	1d3a      	adds	r2, r7, #4
 8006e8c:	f107 0310 	add.w	r3, r7, #16
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fedc 	bl	8007c50 <xTaskCheckForTimeOut>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d123      	bne.n	8006ee6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea0:	f000 f916 	bl	80070d0 <prvIsQueueEmpty>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d017      	beq.n	8006eda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	3324      	adds	r3, #36	; 0x24
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fe06 	bl	8007ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eba:	f000 f8b7 	bl	800702c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ebe:	f000 fc3d 	bl	800773c <xTaskResumeAll>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d189      	bne.n	8006ddc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <xQueueReceive+0x1b4>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	e780      	b.n	8006ddc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006edc:	f000 f8a6 	bl	800702c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee0:	f000 fc2c 	bl	800773c <xTaskResumeAll>
 8006ee4:	e77a      	b.n	8006ddc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ee8:	f000 f8a0 	bl	800702c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eec:	f000 fc26 	bl	800773c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef2:	f000 f8ed 	bl	80070d0 <prvIsQueueEmpty>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f43f af6f 	beq.w	8006ddc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006efe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3730      	adds	r7, #48	; 0x30
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10d      	bne.n	8006f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d14d      	bne.n	8006fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 ffea 	bl	8007f10 <xTaskPriorityDisinherit>
 8006f3c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	605a      	str	r2, [r3, #4]
 8006f44:	e043      	b.n	8006fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d119      	bne.n	8006f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6898      	ldr	r0, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f002 fc18 	bl	800978c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d32b      	bcc.n	8006fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	609a      	str	r2, [r3, #8]
 8006f7e:	e026      	b.n	8006fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68d8      	ldr	r0, [r3, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	f002 fbfe 	bl	800978c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	425b      	negs	r3, r3
 8006f9a:	441a      	add	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d207      	bcs.n	8006fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	441a      	add	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d105      	bne.n	8006fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fd6:	697b      	ldr	r3, [r7, #20]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d303      	bcc.n	8007014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68d9      	ldr	r1, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	461a      	mov	r2, r3
 800701e:	6838      	ldr	r0, [r7, #0]
 8007020:	f002 fbb4 	bl	800978c <memcpy>
	}
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007034:	f001 fc20 	bl	8008878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800703e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007040:	e011      	b.n	8007066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d012      	beq.n	8007070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3324      	adds	r3, #36	; 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fd86 	bl	8007b60 <xTaskRemoveFromEventList>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800705a:	f000 fe59 	bl	8007d10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	3b01      	subs	r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	dce9      	bgt.n	8007042 <prvUnlockQueue+0x16>
 800706e:	e000      	b.n	8007072 <prvUnlockQueue+0x46>
					break;
 8007070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800707a:	f001 fc2b 	bl	80088d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800707e:	f001 fbfb 	bl	8008878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800708a:	e011      	b.n	80070b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d012      	beq.n	80070ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3310      	adds	r3, #16
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fd61 	bl	8007b60 <xTaskRemoveFromEventList>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070a4:	f000 fe34 	bl	8007d10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dce9      	bgt.n	800708c <prvUnlockQueue+0x60>
 80070b8:	e000      	b.n	80070bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	22ff      	movs	r2, #255	; 0xff
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070c4:	f001 fc06 	bl	80088d4 <vPortExitCritical>
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d8:	f001 fbce 	bl	8008878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e001      	b.n	80070ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ee:	f001 fbf1 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007104:	f001 fbb8 	bl	8008878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007110:	429a      	cmp	r2, r3
 8007112:	d102      	bne.n	800711a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e001      	b.n	800711e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800711e:	f001 fbd9 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8007122:	68fb      	ldr	r3, [r7, #12]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e014      	b.n	8007166 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800713c:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <vQueueAddToRegistry+0x4c>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10b      	bne.n	8007160 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007148:	490b      	ldr	r1, [pc, #44]	; (8007178 <vQueueAddToRegistry+0x4c>)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007152:	4a09      	ldr	r2, [pc, #36]	; (8007178 <vQueueAddToRegistry+0x4c>)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	4413      	add	r3, r2
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800715e:	e005      	b.n	800716c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b07      	cmp	r3, #7
 800716a:	d9e7      	bls.n	800713c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800716c:	bf00      	nop
 800716e:	3714      	adds	r7, #20
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	20001cf0 	.word	0x20001cf0

0800717c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800718c:	f001 fb74 	bl	8008878 <vPortEnterCritical>
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007196:	b25b      	sxtb	r3, r3
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d103      	bne.n	80071a6 <vQueueWaitForMessageRestricted+0x2a>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ac:	b25b      	sxtb	r3, r3
 80071ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b2:	d103      	bne.n	80071bc <vQueueWaitForMessageRestricted+0x40>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071bc:	f001 fb8a 	bl	80088d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	3324      	adds	r3, #36	; 0x24
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f000 fc9b 	bl	8007b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f7ff ff28 	bl	800702c <prvUnlockQueue>
	}
 80071dc:	bf00      	nop
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08e      	sub	sp, #56	; 0x38
 80071e8:	af04      	add	r7, sp, #16
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <xTaskCreateStatic+0x28>
 80071f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fc:	f383 8811 	msr	BASEPRI, r3
 8007200:	f3bf 8f6f 	isb	sy
 8007204:	f3bf 8f4f 	dsb	sy
 8007208:	623b      	str	r3, [r7, #32]
 800720a:	e7fe      	b.n	800720a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <xTaskCreateStatic+0x42>
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	e7fe      	b.n	8007224 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007226:	235c      	movs	r3, #92	; 0x5c
 8007228:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b5c      	cmp	r3, #92	; 0x5c
 800722e:	d009      	beq.n	8007244 <xTaskCreateStatic+0x60>
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	e7fe      	b.n	8007242 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007246:	2b00      	cmp	r3, #0
 8007248:	d01e      	beq.n	8007288 <xTaskCreateStatic+0xa4>
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01b      	beq.n	8007288 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007258:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2202      	movs	r2, #2
 800725e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007262:	2300      	movs	r3, #0
 8007264:	9303      	str	r3, [sp, #12]
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	f107 0314 	add.w	r3, r7, #20
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f850 	bl	8007320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007282:	f000 f8d3 	bl	800742c <prvAddNewTaskToReadyList>
 8007286:	e001      	b.n	800728c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800728c:	697b      	ldr	r3, [r7, #20]
	}
 800728e:	4618      	mov	r0, r3
 8007290:	3728      	adds	r7, #40	; 0x28
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007296:	b580      	push	{r7, lr}
 8007298:	b08c      	sub	sp, #48	; 0x30
 800729a:	af04      	add	r7, sp, #16
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	603b      	str	r3, [r7, #0]
 80072a2:	4613      	mov	r3, r2
 80072a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072a6:	88fb      	ldrh	r3, [r7, #6]
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 fbda 	bl	8008a64 <pvPortMalloc>
 80072b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00e      	beq.n	80072d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80072b8:	205c      	movs	r0, #92	; 0x5c
 80072ba:	f001 fbd3 	bl	8008a64 <pvPortMalloc>
 80072be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	631a      	str	r2, [r3, #48]	; 0x30
 80072cc:	e005      	b.n	80072da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072ce:	6978      	ldr	r0, [r7, #20]
 80072d0:	f001 fc8a 	bl	8008be8 <vPortFree>
 80072d4:	e001      	b.n	80072da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d017      	beq.n	8007310 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	2300      	movs	r3, #0
 80072ec:	9303      	str	r3, [sp, #12]
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	9302      	str	r3, [sp, #8]
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68b9      	ldr	r1, [r7, #8]
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f80e 	bl	8007320 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007304:	69f8      	ldr	r0, [r7, #28]
 8007306:	f000 f891 	bl	800742c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800730a:	2301      	movs	r3, #1
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	e002      	b.n	8007316 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007310:	f04f 33ff 	mov.w	r3, #4294967295
 8007314:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007316:	69bb      	ldr	r3, [r7, #24]
	}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b088      	sub	sp, #32
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	461a      	mov	r2, r3
 8007338:	21a5      	movs	r1, #165	; 0xa5
 800733a:	f002 fa32 	bl	80097a2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007348:	3b01      	subs	r3, #1
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	2b00      	cmp	r3, #0
 8007360:	d009      	beq.n	8007376 <prvInitialiseNewTask+0x56>
 8007362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007366:	f383 8811 	msr	BASEPRI, r3
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	f3bf 8f4f 	dsb	sy
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	e7fe      	b.n	8007374 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007376:	2300      	movs	r3, #0
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	e012      	b.n	80073a2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	4413      	add	r3, r2
 8007382:	7819      	ldrb	r1, [r3, #0]
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	3334      	adds	r3, #52	; 0x34
 800738c:	460a      	mov	r2, r1
 800738e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d006      	beq.n	80073aa <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	3301      	adds	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	2b0f      	cmp	r3, #15
 80073a6:	d9e9      	bls.n	800737c <prvInitialiseNewTask+0x5c>
 80073a8:	e000      	b.n	80073ac <prvInitialiseNewTask+0x8c>
		{
			break;
 80073aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	2b37      	cmp	r3, #55	; 0x37
 80073b8:	d901      	bls.n	80073be <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ba:	2337      	movs	r3, #55	; 0x37
 80073bc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2200      	movs	r2, #0
 80073ce:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	3304      	adds	r3, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7ff f9a0 	bl	800671a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	3318      	adds	r3, #24
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff f99b 	bl	800671a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2200      	movs	r2, #0
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	68f9      	ldr	r1, [r7, #12]
 800740c:	69b8      	ldr	r0, [r7, #24]
 800740e:	f001 f949 	bl	80086a4 <pxPortInitialiseStack>
 8007412:	4602      	mov	r2, r0
 8007414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007416:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007422:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007424:	bf00      	nop
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007434:	f001 fa20 	bl	8008878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007438:	4b2d      	ldr	r3, [pc, #180]	; (80074f0 <prvAddNewTaskToReadyList+0xc4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3301      	adds	r3, #1
 800743e:	4a2c      	ldr	r2, [pc, #176]	; (80074f0 <prvAddNewTaskToReadyList+0xc4>)
 8007440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007442:	4b2c      	ldr	r3, [pc, #176]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d109      	bne.n	800745e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800744a:	4a2a      	ldr	r2, [pc, #168]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007450:	4b27      	ldr	r3, [pc, #156]	; (80074f0 <prvAddNewTaskToReadyList+0xc4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d110      	bne.n	800747a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007458:	f000 fc7e 	bl	8007d58 <prvInitialiseTaskLists>
 800745c:	e00d      	b.n	800747a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800745e:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <prvAddNewTaskToReadyList+0xcc>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007466:	4b23      	ldr	r3, [pc, #140]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	429a      	cmp	r2, r3
 8007472:	d802      	bhi.n	800747a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007474:	4a1f      	ldr	r2, [pc, #124]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800747a:	4b20      	ldr	r3, [pc, #128]	; (80074fc <prvAddNewTaskToReadyList+0xd0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	3301      	adds	r3, #1
 8007480:	4a1e      	ldr	r2, [pc, #120]	; (80074fc <prvAddNewTaskToReadyList+0xd0>)
 8007482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007484:	4b1d      	ldr	r3, [pc, #116]	; (80074fc <prvAddNewTaskToReadyList+0xd0>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <prvAddNewTaskToReadyList+0xd4>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	429a      	cmp	r2, r3
 8007496:	d903      	bls.n	80074a0 <prvAddNewTaskToReadyList+0x74>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a18      	ldr	r2, [pc, #96]	; (8007500 <prvAddNewTaskToReadyList+0xd4>)
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4a15      	ldr	r2, [pc, #84]	; (8007504 <prvAddNewTaskToReadyList+0xd8>)
 80074ae:	441a      	add	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4619      	mov	r1, r3
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7ff f93b 	bl	8006732 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074bc:	f001 fa0a 	bl	80088d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074c0:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <prvAddNewTaskToReadyList+0xcc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00e      	beq.n	80074e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074c8:	4b0a      	ldr	r3, [pc, #40]	; (80074f4 <prvAddNewTaskToReadyList+0xc8>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d207      	bcs.n	80074e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074d6:	4b0c      	ldr	r3, [pc, #48]	; (8007508 <prvAddNewTaskToReadyList+0xdc>)
 80074d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074dc:	601a      	str	r2, [r3, #0]
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	20000d30 	.word	0x20000d30
 80074f4:	2000085c 	.word	0x2000085c
 80074f8:	20000d3c 	.word	0x20000d3c
 80074fc:	20000d4c 	.word	0x20000d4c
 8007500:	20000d38 	.word	0x20000d38
 8007504:	20000860 	.word	0x20000860
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007514:	f001 f9b0 	bl	8008878 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <vTaskDelete+0x18>
 800751e:	4b2c      	ldr	r3, [pc, #176]	; (80075d0 <vTaskDelete+0xc4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	e000      	b.n	8007526 <vTaskDelete+0x1a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3304      	adds	r3, #4
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff f95b 	bl	80067e8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3318      	adds	r3, #24
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff f952 	bl	80067e8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8007544:	4b23      	ldr	r3, [pc, #140]	; (80075d4 <vTaskDelete+0xc8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <vTaskDelete+0xc8>)
 800754c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800754e:	4b20      	ldr	r3, [pc, #128]	; (80075d0 <vTaskDelete+0xc4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	429a      	cmp	r2, r3
 8007556:	d10b      	bne.n	8007570 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	481e      	ldr	r0, [pc, #120]	; (80075d8 <vTaskDelete+0xcc>)
 8007560:	f7ff f8e7 	bl	8006732 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007564:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <vTaskDelete+0xd0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <vTaskDelete+0xd0>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e009      	b.n	8007584 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007570:	4b1b      	ldr	r3, [pc, #108]	; (80075e0 <vTaskDelete+0xd4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3b01      	subs	r3, #1
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <vTaskDelete+0xd4>)
 8007578:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 fc58 	bl	8007e30 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007580:	f000 fc84 	bl	8007e8c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8007584:	f001 f9a6 	bl	80088d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007588:	4b16      	ldr	r3, [pc, #88]	; (80075e4 <vTaskDelete+0xd8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d01a      	beq.n	80075c6 <vTaskDelete+0xba>
		{
			if( pxTCB == pxCurrentTCB )
 8007590:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <vTaskDelete+0xc4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	429a      	cmp	r2, r3
 8007598:	d115      	bne.n	80075c6 <vTaskDelete+0xba>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800759a:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <vTaskDelete+0xdc>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <vTaskDelete+0xaa>
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60bb      	str	r3, [r7, #8]
 80075b4:	e7fe      	b.n	80075b4 <vTaskDelete+0xa8>
				portYIELD_WITHIN_API();
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <vTaskDelete+0xe0>)
 80075b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075bc:	601a      	str	r2, [r3, #0]
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	2000085c 	.word	0x2000085c
 80075d4:	20000d4c 	.word	0x20000d4c
 80075d8:	20000d04 	.word	0x20000d04
 80075dc:	20000d18 	.word	0x20000d18
 80075e0:	20000d30 	.word	0x20000d30
 80075e4:	20000d3c 	.word	0x20000d3c
 80075e8:	20000d58 	.word	0x20000d58
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d016      	beq.n	8007630 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007602:	4b13      	ldr	r3, [pc, #76]	; (8007650 <vTaskDelay+0x60>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d009      	beq.n	800761e <vTaskDelay+0x2e>
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	e7fe      	b.n	800761c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800761e:	f000 f87f 	bl	8007720 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007622:	2100      	movs	r1, #0
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fcdf 	bl	8007fe8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800762a:	f000 f887 	bl	800773c <xTaskResumeAll>
 800762e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d107      	bne.n	8007646 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8007636:	4b07      	ldr	r3, [pc, #28]	; (8007654 <vTaskDelay+0x64>)
 8007638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000d58 	.word	0x20000d58
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	; 0x28
 800765c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007666:	463a      	mov	r2, r7
 8007668:	1d39      	adds	r1, r7, #4
 800766a:	f107 0308 	add.w	r3, r7, #8
 800766e:	4618      	mov	r0, r3
 8007670:	f7ff f802 	bl	8006678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	9202      	str	r2, [sp, #8]
 800767c:	9301      	str	r3, [sp, #4]
 800767e:	2300      	movs	r3, #0
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	2300      	movs	r3, #0
 8007684:	460a      	mov	r2, r1
 8007686:	4920      	ldr	r1, [pc, #128]	; (8007708 <vTaskStartScheduler+0xb0>)
 8007688:	4820      	ldr	r0, [pc, #128]	; (800770c <vTaskStartScheduler+0xb4>)
 800768a:	f7ff fdab 	bl	80071e4 <xTaskCreateStatic>
 800768e:	4602      	mov	r2, r0
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <vTaskStartScheduler+0xb8>)
 8007692:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007694:	4b1e      	ldr	r3, [pc, #120]	; (8007710 <vTaskStartScheduler+0xb8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e001      	b.n	80076a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d102      	bne.n	80076b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076ac:	f000 fcf0 	bl	8008090 <xTimerCreateTimerTask>
 80076b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d115      	bne.n	80076e4 <vTaskStartScheduler+0x8c>
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <vTaskStartScheduler+0xbc>)
 80076cc:	f04f 32ff 	mov.w	r2, #4294967295
 80076d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <vTaskStartScheduler+0xc0>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80076d8:	4b10      	ldr	r3, [pc, #64]	; (800771c <vTaskStartScheduler+0xc4>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076de:	f001 f85b 	bl	8008798 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076e2:	e00d      	b.n	8007700 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ea:	d109      	bne.n	8007700 <vTaskStartScheduler+0xa8>
 80076ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f0:	f383 8811 	msr	BASEPRI, r3
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	f3bf 8f4f 	dsb	sy
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e7fe      	b.n	80076fe <vTaskStartScheduler+0xa6>
}
 8007700:	bf00      	nop
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	08009834 	.word	0x08009834
 800770c:	08007d29 	.word	0x08007d29
 8007710:	20000d54 	.word	0x20000d54
 8007714:	20000d50 	.word	0x20000d50
 8007718:	20000d3c 	.word	0x20000d3c
 800771c:	20000d34 	.word	0x20000d34

08007720 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007724:	4b04      	ldr	r3, [pc, #16]	; (8007738 <vTaskSuspendAll+0x18>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3301      	adds	r3, #1
 800772a:	4a03      	ldr	r2, [pc, #12]	; (8007738 <vTaskSuspendAll+0x18>)
 800772c:	6013      	str	r3, [r2, #0]
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20000d58 	.word	0x20000d58

0800773c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800774a:	4b41      	ldr	r3, [pc, #260]	; (8007850 <xTaskResumeAll+0x114>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <xTaskResumeAll+0x2a>
 8007752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007756:	f383 8811 	msr	BASEPRI, r3
 800775a:	f3bf 8f6f 	isb	sy
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	603b      	str	r3, [r7, #0]
 8007764:	e7fe      	b.n	8007764 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007766:	f001 f887 	bl	8008878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800776a:	4b39      	ldr	r3, [pc, #228]	; (8007850 <xTaskResumeAll+0x114>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3b01      	subs	r3, #1
 8007770:	4a37      	ldr	r2, [pc, #220]	; (8007850 <xTaskResumeAll+0x114>)
 8007772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <xTaskResumeAll+0x114>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d162      	bne.n	8007842 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800777c:	4b35      	ldr	r3, [pc, #212]	; (8007854 <xTaskResumeAll+0x118>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d05e      	beq.n	8007842 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007784:	e02f      	b.n	80077e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007786:	4b34      	ldr	r3, [pc, #208]	; (8007858 <xTaskResumeAll+0x11c>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3318      	adds	r3, #24
 8007792:	4618      	mov	r0, r3
 8007794:	f7ff f828 	bl	80067e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3304      	adds	r3, #4
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff f823 	bl	80067e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a6:	4b2d      	ldr	r3, [pc, #180]	; (800785c <xTaskResumeAll+0x120>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d903      	bls.n	80077b6 <xTaskResumeAll+0x7a>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	4a2a      	ldr	r2, [pc, #168]	; (800785c <xTaskResumeAll+0x120>)
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a27      	ldr	r2, [pc, #156]	; (8007860 <xTaskResumeAll+0x124>)
 80077c4:	441a      	add	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	3304      	adds	r3, #4
 80077ca:	4619      	mov	r1, r3
 80077cc:	4610      	mov	r0, r2
 80077ce:	f7fe ffb0 	bl	8006732 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	4b23      	ldr	r3, [pc, #140]	; (8007864 <xTaskResumeAll+0x128>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	429a      	cmp	r2, r3
 80077de:	d302      	bcc.n	80077e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80077e0:	4b21      	ldr	r3, [pc, #132]	; (8007868 <xTaskResumeAll+0x12c>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077e6:	4b1c      	ldr	r3, [pc, #112]	; (8007858 <xTaskResumeAll+0x11c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1cb      	bne.n	8007786 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077f4:	f000 fb4a 	bl	8007e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077f8:	4b1c      	ldr	r3, [pc, #112]	; (800786c <xTaskResumeAll+0x130>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007804:	f000 f844 	bl	8007890 <xTaskIncrementTick>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800780e:	4b16      	ldr	r3, [pc, #88]	; (8007868 <xTaskResumeAll+0x12c>)
 8007810:	2201      	movs	r2, #1
 8007812:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3b01      	subs	r3, #1
 8007818:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f1      	bne.n	8007804 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007820:	4b12      	ldr	r3, [pc, #72]	; (800786c <xTaskResumeAll+0x130>)
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <xTaskResumeAll+0x12c>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d009      	beq.n	8007842 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800782e:	2301      	movs	r3, #1
 8007830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskResumeAll+0x134>)
 8007834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007842:	f001 f847 	bl	80088d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007846:	68bb      	ldr	r3, [r7, #8]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000d58 	.word	0x20000d58
 8007854:	20000d30 	.word	0x20000d30
 8007858:	20000cf0 	.word	0x20000cf0
 800785c:	20000d38 	.word	0x20000d38
 8007860:	20000860 	.word	0x20000860
 8007864:	2000085c 	.word	0x2000085c
 8007868:	20000d44 	.word	0x20000d44
 800786c:	20000d40 	.word	0x20000d40
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <xTaskGetTickCount+0x18>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007880:	687b      	ldr	r3, [r7, #4]
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr
 800788c:	20000d34 	.word	0x20000d34

08007890 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789a:	4b51      	ldr	r3, [pc, #324]	; (80079e0 <xTaskIncrementTick+0x150>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f040 808d 	bne.w	80079be <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a4:	4b4f      	ldr	r3, [pc, #316]	; (80079e4 <xTaskIncrementTick+0x154>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078ac:	4a4d      	ldr	r2, [pc, #308]	; (80079e4 <xTaskIncrementTick+0x154>)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11f      	bne.n	80078f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80078b8:	4b4b      	ldr	r3, [pc, #300]	; (80079e8 <xTaskIncrementTick+0x158>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <xTaskIncrementTick+0x46>
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	e7fe      	b.n	80078d4 <xTaskIncrementTick+0x44>
 80078d6:	4b44      	ldr	r3, [pc, #272]	; (80079e8 <xTaskIncrementTick+0x158>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	4b43      	ldr	r3, [pc, #268]	; (80079ec <xTaskIncrementTick+0x15c>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a41      	ldr	r2, [pc, #260]	; (80079e8 <xTaskIncrementTick+0x158>)
 80078e2:	6013      	str	r3, [r2, #0]
 80078e4:	4a41      	ldr	r2, [pc, #260]	; (80079ec <xTaskIncrementTick+0x15c>)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <xTaskIncrementTick+0x160>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3301      	adds	r3, #1
 80078f0:	4a3f      	ldr	r2, [pc, #252]	; (80079f0 <xTaskIncrementTick+0x160>)
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	f000 faca 	bl	8007e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80078f8:	4b3e      	ldr	r3, [pc, #248]	; (80079f4 <xTaskIncrementTick+0x164>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d34e      	bcc.n	80079a0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007902:	4b39      	ldr	r3, [pc, #228]	; (80079e8 <xTaskIncrementTick+0x158>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <xTaskIncrementTick+0x80>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <xTaskIncrementTick+0x82>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007916:	4b37      	ldr	r3, [pc, #220]	; (80079f4 <xTaskIncrementTick+0x164>)
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	601a      	str	r2, [r3, #0]
					break;
 800791e:	e03f      	b.n	80079a0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007920:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <xTaskIncrementTick+0x158>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d203      	bcs.n	8007940 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007938:	4a2e      	ldr	r2, [pc, #184]	; (80079f4 <xTaskIncrementTick+0x164>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
						break;
 800793e:	e02f      	b.n	80079a0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe ff4f 	bl	80067e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3318      	adds	r3, #24
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe ff46 	bl	80067e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <xTaskIncrementTick+0x168>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d903      	bls.n	8007970 <xTaskIncrementTick+0xe0>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <xTaskIncrementTick+0x168>)
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <xTaskIncrementTick+0x16c>)
 800797e:	441a      	add	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fe fed3 	bl	8006732 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <xTaskIncrementTick+0x170>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	429a      	cmp	r2, r3
 8007998:	d3b3      	bcc.n	8007902 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799e:	e7b0      	b.n	8007902 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <xTaskIncrementTick+0x170>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	4915      	ldr	r1, [pc, #84]	; (80079fc <xTaskIncrementTick+0x16c>)
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d907      	bls.n	80079c8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e004      	b.n	80079c8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <xTaskIncrementTick+0x174>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a0f      	ldr	r2, [pc, #60]	; (8007a04 <xTaskIncrementTick+0x174>)
 80079c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079c8:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <xTaskIncrementTick+0x178>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079d4:	697b      	ldr	r3, [r7, #20]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000d58 	.word	0x20000d58
 80079e4:	20000d34 	.word	0x20000d34
 80079e8:	20000ce8 	.word	0x20000ce8
 80079ec:	20000cec 	.word	0x20000cec
 80079f0:	20000d48 	.word	0x20000d48
 80079f4:	20000d50 	.word	0x20000d50
 80079f8:	20000d38 	.word	0x20000d38
 80079fc:	20000860 	.word	0x20000860
 8007a00:	2000085c 	.word	0x2000085c
 8007a04:	20000d40 	.word	0x20000d40
 8007a08:	20000d44 	.word	0x20000d44

08007a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a12:	4b27      	ldr	r3, [pc, #156]	; (8007ab0 <vTaskSwitchContext+0xa4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a1a:	4b26      	ldr	r3, [pc, #152]	; (8007ab4 <vTaskSwitchContext+0xa8>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a20:	e040      	b.n	8007aa4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007a22:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <vTaskSwitchContext+0xa8>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007a28:	4b23      	ldr	r3, [pc, #140]	; (8007ab8 <vTaskSwitchContext+0xac>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e00f      	b.n	8007a50 <vTaskSwitchContext+0x44>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <vTaskSwitchContext+0x3e>
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	e7fe      	b.n	8007a48 <vTaskSwitchContext+0x3c>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	491a      	ldr	r1, [pc, #104]	; (8007abc <vTaskSwitchContext+0xb0>)
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0e5      	beq.n	8007a30 <vTaskSwitchContext+0x24>
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4a13      	ldr	r2, [pc, #76]	; (8007abc <vTaskSwitchContext+0xb0>)
 8007a70:	4413      	add	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	605a      	str	r2, [r3, #4]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	3308      	adds	r3, #8
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d104      	bne.n	8007a94 <vTaskSwitchContext+0x88>
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	605a      	str	r2, [r3, #4]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	4a09      	ldr	r2, [pc, #36]	; (8007ac0 <vTaskSwitchContext+0xb4>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4a06      	ldr	r2, [pc, #24]	; (8007ab8 <vTaskSwitchContext+0xac>)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	3714      	adds	r7, #20
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	20000d58 	.word	0x20000d58
 8007ab4:	20000d44 	.word	0x20000d44
 8007ab8:	20000d38 	.word	0x20000d38
 8007abc:	20000860 	.word	0x20000860
 8007ac0:	2000085c 	.word	0x2000085c

08007ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d109      	bne.n	8007ae8 <vTaskPlaceOnEventList+0x24>
 8007ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	60fb      	str	r3, [r7, #12]
 8007ae6:	e7fe      	b.n	8007ae6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <vTaskPlaceOnEventList+0x44>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3318      	adds	r3, #24
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fe fe41 	bl	8006778 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007af6:	2101      	movs	r1, #1
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	f000 fa75 	bl	8007fe8 <prvAddCurrentTaskToDelayedList>
}
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2000085c 	.word	0x2000085c

08007b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d109      	bne.n	8007b32 <vTaskPlaceOnEventListRestricted+0x26>
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e7fe      	b.n	8007b30 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b32:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <vTaskPlaceOnEventListRestricted+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	3318      	adds	r3, #24
 8007b38:	4619      	mov	r1, r3
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f7fe fdf9 	bl	8006732 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	68b8      	ldr	r0, [r7, #8]
 8007b50:	f000 fa4a 	bl	8007fe8 <prvAddCurrentTaskToDelayedList>
	}
 8007b54:	bf00      	nop
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	2000085c 	.word	0x2000085c

08007b60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <xTaskRemoveFromEventList+0x2a>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e7fe      	b.n	8007b88 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	3318      	adds	r3, #24
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe fe2a 	bl	80067e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <xTaskRemoveFromEventList+0xac>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11d      	bne.n	8007bd8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fe21 	bl	80067e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <xTaskRemoveFromEventList+0xb0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d903      	bls.n	8007bba <xTaskRemoveFromEventList+0x5a>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb6:	4a16      	ldr	r2, [pc, #88]	; (8007c10 <xTaskRemoveFromEventList+0xb0>)
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <xTaskRemoveFromEventList+0xb4>)
 8007bc8:	441a      	add	r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f7fe fdae 	bl	8006732 <vListInsertEnd>
 8007bd6:	e005      	b.n	8007be4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3318      	adds	r3, #24
 8007bdc:	4619      	mov	r1, r3
 8007bde:	480e      	ldr	r0, [pc, #56]	; (8007c18 <xTaskRemoveFromEventList+0xb8>)
 8007be0:	f7fe fda7 	bl	8006732 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <xTaskRemoveFromEventList+0xbc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d905      	bls.n	8007bfe <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <xTaskRemoveFromEventList+0xc0>)
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e001      	b.n	8007c02 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007c02:	697b      	ldr	r3, [r7, #20]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3718      	adds	r7, #24
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	20000d58 	.word	0x20000d58
 8007c10:	20000d38 	.word	0x20000d38
 8007c14:	20000860 	.word	0x20000860
 8007c18:	20000cf0 	.word	0x20000cf0
 8007c1c:	2000085c 	.word	0x2000085c
 8007c20:	20000d44 	.word	0x20000d44

08007c24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c2c:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <vTaskInternalSetTimeOutState+0x24>)
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <vTaskInternalSetTimeOutState+0x28>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	605a      	str	r2, [r3, #4]
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000d48 	.word	0x20000d48
 8007c4c:	20000d34 	.word	0x20000d34

08007c50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <xTaskCheckForTimeOut+0x24>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	613b      	str	r3, [r7, #16]
 8007c72:	e7fe      	b.n	8007c72 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <xTaskCheckForTimeOut+0x3e>
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	e7fe      	b.n	8007c8c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007c8e:	f000 fdf3 	bl	8008878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c92:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <xTaskCheckForTimeOut+0xb8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007caa:	d102      	bne.n	8007cb2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	e023      	b.n	8007cfa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b15      	ldr	r3, [pc, #84]	; (8007d0c <xTaskCheckForTimeOut+0xbc>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d007      	beq.n	8007cce <xTaskCheckForTimeOut+0x7e>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d302      	bcc.n	8007cce <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	e015      	b.n	8007cfa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d20b      	bcs.n	8007cf0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	1ad2      	subs	r2, r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff ff9d 	bl	8007c24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	e004      	b.n	8007cfa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007cfa:	f000 fdeb 	bl	80088d4 <vPortExitCritical>

	return xReturn;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20000d34 	.word	0x20000d34
 8007d0c:	20000d48 	.word	0x20000d48

08007d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d14:	4b03      	ldr	r3, [pc, #12]	; (8007d24 <vTaskMissedYield+0x14>)
 8007d16:	2201      	movs	r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	20000d44 	.word	0x20000d44

08007d28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d30:	f000 f852 	bl	8007dd8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <prvIdleTask+0x28>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d9f9      	bls.n	8007d30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d3c:	4b05      	ldr	r3, [pc, #20]	; (8007d54 <prvIdleTask+0x2c>)
 8007d3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d4c:	e7f0      	b.n	8007d30 <prvIdleTask+0x8>
 8007d4e:	bf00      	nop
 8007d50:	20000860 	.word	0x20000860
 8007d54:	e000ed04 	.word	0xe000ed04

08007d58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d5e:	2300      	movs	r3, #0
 8007d60:	607b      	str	r3, [r7, #4]
 8007d62:	e00c      	b.n	8007d7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4a12      	ldr	r2, [pc, #72]	; (8007db8 <prvInitialiseTaskLists+0x60>)
 8007d70:	4413      	add	r3, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe fcb2 	bl	80066dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	607b      	str	r3, [r7, #4]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b37      	cmp	r3, #55	; 0x37
 8007d82:	d9ef      	bls.n	8007d64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d84:	480d      	ldr	r0, [pc, #52]	; (8007dbc <prvInitialiseTaskLists+0x64>)
 8007d86:	f7fe fca9 	bl	80066dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d8a:	480d      	ldr	r0, [pc, #52]	; (8007dc0 <prvInitialiseTaskLists+0x68>)
 8007d8c:	f7fe fca6 	bl	80066dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d90:	480c      	ldr	r0, [pc, #48]	; (8007dc4 <prvInitialiseTaskLists+0x6c>)
 8007d92:	f7fe fca3 	bl	80066dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d96:	480c      	ldr	r0, [pc, #48]	; (8007dc8 <prvInitialiseTaskLists+0x70>)
 8007d98:	f7fe fca0 	bl	80066dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d9c:	480b      	ldr	r0, [pc, #44]	; (8007dcc <prvInitialiseTaskLists+0x74>)
 8007d9e:	f7fe fc9d 	bl	80066dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007da2:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <prvInitialiseTaskLists+0x78>)
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <prvInitialiseTaskLists+0x64>)
 8007da6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007da8:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <prvInitialiseTaskLists+0x7c>)
 8007daa:	4a05      	ldr	r2, [pc, #20]	; (8007dc0 <prvInitialiseTaskLists+0x68>)
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20000860 	.word	0x20000860
 8007dbc:	20000cc0 	.word	0x20000cc0
 8007dc0:	20000cd4 	.word	0x20000cd4
 8007dc4:	20000cf0 	.word	0x20000cf0
 8007dc8:	20000d04 	.word	0x20000d04
 8007dcc:	20000d1c 	.word	0x20000d1c
 8007dd0:	20000ce8 	.word	0x20000ce8
 8007dd4:	20000cec 	.word	0x20000cec

08007dd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dde:	e019      	b.n	8007e14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007de0:	f000 fd4a 	bl	8008878 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007de4:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <prvCheckTasksWaitingTermination+0x4c>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	3304      	adds	r3, #4
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7fe fcf9 	bl	80067e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvCheckTasksWaitingTermination+0x50>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	4a0a      	ldr	r2, [pc, #40]	; (8007e28 <prvCheckTasksWaitingTermination+0x50>)
 8007dfe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e00:	4b0a      	ldr	r3, [pc, #40]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007e08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e0a:	f000 fd63 	bl	80088d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f80e 	bl	8007e30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e14:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <prvCheckTasksWaitingTermination+0x54>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1e1      	bne.n	8007de0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e1c:	bf00      	nop
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000d04 	.word	0x20000d04
 8007e28:	20000d30 	.word	0x20000d30
 8007e2c:	20000d18 	.word	0x20000d18

08007e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d108      	bne.n	8007e54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fece 	bl	8008be8 <vPortFree>
				vPortFree( pxTCB );
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fecb 	bl	8008be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e52:	e017      	b.n	8007e84 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d103      	bne.n	8007e66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fec2 	bl	8008be8 <vPortFree>
	}
 8007e64:	e00e      	b.n	8007e84 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d009      	beq.n	8007e84 <prvDeleteTCB+0x54>
 8007e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	e7fe      	b.n	8007e82 <prvDeleteTCB+0x52>
	}
 8007e84:	bf00      	nop
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e92:	4b0e      	ldr	r3, [pc, #56]	; (8007ecc <prvResetNextTaskUnblockTime+0x40>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <prvResetNextTaskUnblockTime+0x14>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <prvResetNextTaskUnblockTime+0x16>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvResetNextTaskUnblockTime+0x44>)
 8007ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8007eac:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007eae:	e008      	b.n	8007ec2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvResetNextTaskUnblockTime+0x40>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4a04      	ldr	r2, [pc, #16]	; (8007ed0 <prvResetNextTaskUnblockTime+0x44>)
 8007ec0:	6013      	str	r3, [r2, #0]
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr
 8007ecc:	20000ce8 	.word	0x20000ce8
 8007ed0:	20000d50 	.word	0x20000d50

08007ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007eda:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <xTaskGetSchedulerState+0x34>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	e008      	b.n	8007efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ee8:	4b08      	ldr	r3, [pc, #32]	; (8007f0c <xTaskGetSchedulerState+0x38>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	607b      	str	r3, [r7, #4]
 8007ef4:	e001      	b.n	8007efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007efa:	687b      	ldr	r3, [r7, #4]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bc80      	pop	{r7}
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000d3c 	.word	0x20000d3c
 8007f0c:	20000d58 	.word	0x20000d58

08007f10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d054      	beq.n	8007fd0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f26:	4b2d      	ldr	r3, [pc, #180]	; (8007fdc <xTaskPriorityDisinherit+0xcc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d009      	beq.n	8007f44 <xTaskPriorityDisinherit+0x34>
 8007f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	60fb      	str	r3, [r7, #12]
 8007f42:	e7fe      	b.n	8007f42 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d109      	bne.n	8007f60 <xTaskPriorityDisinherit+0x50>
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60bb      	str	r3, [r7, #8]
 8007f5e:	e7fe      	b.n	8007f5e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f64:	1e5a      	subs	r2, r3, #1
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d02c      	beq.n	8007fd0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d128      	bne.n	8007fd0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	3304      	adds	r3, #4
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe fc30 	bl	80067e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <xTaskPriorityDisinherit+0xd0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d903      	bls.n	8007fb0 <xTaskPriorityDisinherit+0xa0>
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	4a0c      	ldr	r2, [pc, #48]	; (8007fe0 <xTaskPriorityDisinherit+0xd0>)
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4a09      	ldr	r2, [pc, #36]	; (8007fe4 <xTaskPriorityDisinherit+0xd4>)
 8007fbe:	441a      	add	r2, r3
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	f7fe fbb3 	bl	8006732 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fd0:	697b      	ldr	r3, [r7, #20]
	}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3718      	adds	r7, #24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	2000085c 	.word	0x2000085c
 8007fe0:	20000d38 	.word	0x20000d38
 8007fe4:	20000860 	.word	0x20000860

08007fe8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ff2:	4b21      	ldr	r3, [pc, #132]	; (8008078 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ff8:	4b20      	ldr	r3, [pc, #128]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fe fbf2 	bl	80067e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d10a      	bne.n	8008022 <prvAddCurrentTaskToDelayedList+0x3a>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008012:	4b1a      	ldr	r3, [pc, #104]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3304      	adds	r3, #4
 8008018:	4619      	mov	r1, r3
 800801a:	4819      	ldr	r0, [pc, #100]	; (8008080 <prvAddCurrentTaskToDelayedList+0x98>)
 800801c:	f7fe fb89 	bl	8006732 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008020:	e026      	b.n	8008070 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4413      	add	r3, r2
 8008028:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800802a:	4b14      	ldr	r3, [pc, #80]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	429a      	cmp	r2, r3
 8008038:	d209      	bcs.n	800804e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <prvAddCurrentTaskToDelayedList+0x9c>)
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3304      	adds	r3, #4
 8008044:	4619      	mov	r1, r3
 8008046:	4610      	mov	r0, r2
 8008048:	f7fe fb96 	bl	8006778 <vListInsert>
}
 800804c:	e010      	b.n	8008070 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	4b0a      	ldr	r3, [pc, #40]	; (800807c <prvAddCurrentTaskToDelayedList+0x94>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3304      	adds	r3, #4
 8008058:	4619      	mov	r1, r3
 800805a:	4610      	mov	r0, r2
 800805c:	f7fe fb8c 	bl	8006778 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	429a      	cmp	r2, r3
 8008068:	d202      	bcs.n	8008070 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800806a:	4a08      	ldr	r2, [pc, #32]	; (800808c <prvAddCurrentTaskToDelayedList+0xa4>)
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6013      	str	r3, [r2, #0]
}
 8008070:	bf00      	nop
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20000d34 	.word	0x20000d34
 800807c:	2000085c 	.word	0x2000085c
 8008080:	20000d1c 	.word	0x20000d1c
 8008084:	20000cec 	.word	0x20000cec
 8008088:	20000ce8 	.word	0x20000ce8
 800808c:	20000d50 	.word	0x20000d50

08008090 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	; 0x28
 8008094:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008096:	2300      	movs	r3, #0
 8008098:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800809a:	f000 fac3 	bl	8008624 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800809e:	4b1c      	ldr	r3, [pc, #112]	; (8008110 <xTimerCreateTimerTask+0x80>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d021      	beq.n	80080ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080ae:	1d3a      	adds	r2, r7, #4
 80080b0:	f107 0108 	add.w	r1, r7, #8
 80080b4:	f107 030c 	add.w	r3, r7, #12
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7fe faf5 	bl	80066a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080be:	6879      	ldr	r1, [r7, #4]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	9202      	str	r2, [sp, #8]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	2302      	movs	r3, #2
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	2300      	movs	r3, #0
 80080ce:	460a      	mov	r2, r1
 80080d0:	4910      	ldr	r1, [pc, #64]	; (8008114 <xTimerCreateTimerTask+0x84>)
 80080d2:	4811      	ldr	r0, [pc, #68]	; (8008118 <xTimerCreateTimerTask+0x88>)
 80080d4:	f7ff f886 	bl	80071e4 <xTaskCreateStatic>
 80080d8:	4602      	mov	r2, r0
 80080da:	4b10      	ldr	r3, [pc, #64]	; (800811c <xTimerCreateTimerTask+0x8c>)
 80080dc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <xTimerCreateTimerTask+0x8c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80080e6:	2301      	movs	r3, #1
 80080e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d109      	bne.n	8008104 <xTimerCreateTimerTask+0x74>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	e7fe      	b.n	8008102 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000d8c 	.word	0x20000d8c
 8008114:	0800983c 	.word	0x0800983c
 8008118:	08008239 	.word	0x08008239
 800811c:	20000d90 	.word	0x20000d90

08008120 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800812e:	2300      	movs	r3, #0
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d109      	bne.n	800814c <xTimerGenericCommand+0x2c>
 8008138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813c:	f383 8811 	msr	BASEPRI, r3
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	f3bf 8f4f 	dsb	sy
 8008148:	623b      	str	r3, [r7, #32]
 800814a:	e7fe      	b.n	800814a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <xTimerGenericCommand+0x94>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02a      	beq.n	80081aa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b05      	cmp	r3, #5
 8008164:	dc18      	bgt.n	8008198 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008166:	f7ff feb5 	bl	8007ed4 <xTaskGetSchedulerState>
 800816a:	4603      	mov	r3, r0
 800816c:	2b02      	cmp	r3, #2
 800816e:	d109      	bne.n	8008184 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <xTimerGenericCommand+0x94>)
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	f107 0110 	add.w	r1, r7, #16
 8008178:	2300      	movs	r3, #0
 800817a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800817c:	f7fe fc5c 	bl	8006a38 <xQueueGenericSend>
 8008180:	6278      	str	r0, [r7, #36]	; 0x24
 8008182:	e012      	b.n	80081aa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <xTimerGenericCommand+0x94>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f107 0110 	add.w	r1, r7, #16
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	f7fe fc52 	bl	8006a38 <xQueueGenericSend>
 8008194:	6278      	str	r0, [r7, #36]	; 0x24
 8008196:	e008      	b.n	80081aa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008198:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <xTimerGenericCommand+0x94>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	f107 0110 	add.w	r1, r7, #16
 80081a0:	2300      	movs	r3, #0
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	f7fe fd42 	bl	8006c2c <xQueueGenericSendFromISR>
 80081a8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3728      	adds	r7, #40	; 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20000d8c 	.word	0x20000d8c

080081b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081c2:	4b1c      	ldr	r3, [pc, #112]	; (8008234 <prvProcessExpiredTimer+0x7c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	3304      	adds	r3, #4
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fb09 	bl	80067e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	69db      	ldr	r3, [r3, #28]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d121      	bne.n	8008222 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	18d1      	adds	r1, r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	683a      	ldr	r2, [r7, #0]
 80081ea:	6978      	ldr	r0, [r7, #20]
 80081ec:	f000 f8c8 	bl	8008380 <prvInsertTimerInActiveList>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d015      	beq.n	8008222 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081f6:	2300      	movs	r3, #0
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	2300      	movs	r3, #0
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	2100      	movs	r1, #0
 8008200:	6978      	ldr	r0, [r7, #20]
 8008202:	f7ff ff8d 	bl	8008120 <xTimerGenericCommand>
 8008206:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d109      	bne.n	8008222 <prvProcessExpiredTimer+0x6a>
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e7fe      	b.n	8008220 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	6978      	ldr	r0, [r7, #20]
 8008228:	4798      	blx	r3
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000d84 	.word	0x20000d84

08008238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008240:	f107 0308 	add.w	r3, r7, #8
 8008244:	4618      	mov	r0, r3
 8008246:	f000 f857 	bl	80082f8 <prvGetNextExpireTime>
 800824a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4619      	mov	r1, r3
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f803 	bl	800825c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008256:	f000 f8d5 	bl	8008404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800825a:	e7f1      	b.n	8008240 <prvTimerTask+0x8>

0800825c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008266:	f7ff fa5b 	bl	8007720 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4618      	mov	r0, r3
 8008270:	f000 f866 	bl	8008340 <prvSampleTimeNow>
 8008274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d130      	bne.n	80082de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10a      	bne.n	8008298 <prvProcessTimerOrBlockTask+0x3c>
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	429a      	cmp	r2, r3
 8008288:	d806      	bhi.n	8008298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800828a:	f7ff fa57 	bl	800773c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f7ff ff91 	bl	80081b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008296:	e024      	b.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d008      	beq.n	80082b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800829e:	4b13      	ldr	r3, [pc, #76]	; (80082ec <prvProcessTimerOrBlockTask+0x90>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	bf0c      	ite	eq
 80082a8:	2301      	moveq	r3, #1
 80082aa:	2300      	movne	r3, #0
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <prvProcessTimerOrBlockTask+0x94>)
 80082b2:	6818      	ldr	r0, [r3, #0]
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	4619      	mov	r1, r3
 80082be:	f7fe ff5d 	bl	800717c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80082c2:	f7ff fa3b 	bl	800773c <xTaskResumeAll>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10a      	bne.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <prvProcessTimerOrBlockTask+0x98>)
 80082ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	f3bf 8f4f 	dsb	sy
 80082d8:	f3bf 8f6f 	isb	sy
}
 80082dc:	e001      	b.n	80082e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082de:	f7ff fa2d 	bl	800773c <xTaskResumeAll>
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	20000d88 	.word	0x20000d88
 80082f0:	20000d8c 	.word	0x20000d8c
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <prvGetNextExpireTime+0x44>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d105      	bne.n	800832a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800831e:	4b07      	ldr	r3, [pc, #28]	; (800833c <prvGetNextExpireTime+0x44>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e001      	b.n	800832e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800832e:	68fb      	ldr	r3, [r7, #12]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000d84 	.word	0x20000d84

08008340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008348:	f7ff fa94 	bl	8007874 <xTaskGetTickCount>
 800834c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <prvSampleTimeNow+0x3c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	429a      	cmp	r2, r3
 8008356:	d205      	bcs.n	8008364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008358:	f000 f904 	bl	8008564 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e002      	b.n	800836a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800836a:	4a04      	ldr	r2, [pc, #16]	; (800837c <prvSampleTimeNow+0x3c>)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008370:	68fb      	ldr	r3, [r7, #12]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000d94 	.word	0x20000d94

08008380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800838e:	2300      	movs	r3, #0
 8008390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d812      	bhi.n	80083cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d302      	bcc.n	80083ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083b4:	2301      	movs	r3, #1
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	e01b      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083ba:	4b10      	ldr	r3, [pc, #64]	; (80083fc <prvInsertTimerInActiveList+0x7c>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3304      	adds	r3, #4
 80083c2:	4619      	mov	r1, r3
 80083c4:	4610      	mov	r0, r2
 80083c6:	f7fe f9d7 	bl	8006778 <vListInsert>
 80083ca:	e012      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d206      	bcs.n	80083e2 <prvInsertTimerInActiveList+0x62>
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d302      	bcc.n	80083e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
 80083e0:	e007      	b.n	80083f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083e2:	4b07      	ldr	r3, [pc, #28]	; (8008400 <prvInsertTimerInActiveList+0x80>)
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4619      	mov	r1, r3
 80083ec:	4610      	mov	r0, r2
 80083ee:	f7fe f9c3 	bl	8006778 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083f2:	697b      	ldr	r3, [r7, #20]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3718      	adds	r7, #24
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000d88 	.word	0x20000d88
 8008400:	20000d84 	.word	0x20000d84

08008404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08e      	sub	sp, #56	; 0x38
 8008408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800840a:	e099      	b.n	8008540 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	da17      	bge.n	8008442 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008412:	1d3b      	adds	r3, r7, #4
 8008414:	3304      	adds	r3, #4
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <prvProcessReceivedCommands+0x2e>
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e7fe      	b.n	8008430 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008438:	6850      	ldr	r0, [r2, #4]
 800843a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800843c:	6892      	ldr	r2, [r2, #8]
 800843e:	4611      	mov	r1, r2
 8008440:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b00      	cmp	r3, #0
 8008446:	db7a      	blt.n	800853e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800844c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe f9c5 	bl	80067e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800845e:	463b      	mov	r3, r7
 8008460:	4618      	mov	r0, r3
 8008462:	f7ff ff6d 	bl	8008340 <prvSampleTimeNow>
 8008466:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b09      	cmp	r3, #9
 800846c:	d868      	bhi.n	8008540 <prvProcessReceivedCommands+0x13c>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <prvProcessReceivedCommands+0x70>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	0800849d 	.word	0x0800849d
 8008478:	0800849d 	.word	0x0800849d
 800847c:	0800849d 	.word	0x0800849d
 8008480:	08008541 	.word	0x08008541
 8008484:	080084f7 	.word	0x080084f7
 8008488:	0800852d 	.word	0x0800852d
 800848c:	0800849d 	.word	0x0800849d
 8008490:	0800849d 	.word	0x0800849d
 8008494:	08008541 	.word	0x08008541
 8008498:	080084f7 	.word	0x080084f7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	18d1      	adds	r1, r2, r3
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084aa:	f7ff ff69 	bl	8008380 <prvInsertTimerInActiveList>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d045      	beq.n	8008540 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084ba:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	69db      	ldr	r3, [r3, #28]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d13d      	bne.n	8008540 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	441a      	add	r2, r3
 80084cc:	2300      	movs	r3, #0
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	2300      	movs	r3, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d6:	f7ff fe23 	bl	8008120 <xTimerGenericCommand>
 80084da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12e      	bne.n	8008540 <prvProcessReceivedCommands+0x13c>
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61bb      	str	r3, [r7, #24]
 80084f4:	e7fe      	b.n	80084f4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <prvProcessReceivedCommands+0x114>
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	e7fe      	b.n	8008516 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	18d1      	adds	r1, r2, r3
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008526:	f7ff ff2b 	bl	8008380 <prvInsertTimerInActiveList>
					break;
 800852a:	e009      	b.n	8008540 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008532:	2b00      	cmp	r3, #0
 8008534:	d104      	bne.n	8008540 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8008536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008538:	f000 fb56 	bl	8008be8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800853c:	e000      	b.n	8008540 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800853e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <prvProcessReceivedCommands+0x15c>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	1d39      	adds	r1, r7, #4
 8008546:	2200      	movs	r2, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fc03 	bl	8006d54 <xQueueReceive>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f47f af5b 	bne.w	800840c <prvProcessReceivedCommands+0x8>
	}
}
 8008556:	bf00      	nop
 8008558:	3730      	adds	r7, #48	; 0x30
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000d8c 	.word	0x20000d8c

08008564 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800856a:	e044      	b.n	80085f6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800856c:	4b2b      	ldr	r3, [pc, #172]	; (800861c <prvSwitchTimerLists+0xb8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008576:	4b29      	ldr	r3, [pc, #164]	; (800861c <prvSwitchTimerLists+0xb8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	3304      	adds	r3, #4
 8008584:	4618      	mov	r0, r3
 8008586:	f7fe f92f 	bl	80067e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d12d      	bne.n	80085f6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	4413      	add	r3, r2
 80085a2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d90e      	bls.n	80085ca <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085b8:	4b18      	ldr	r3, [pc, #96]	; (800861c <prvSwitchTimerLists+0xb8>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3304      	adds	r3, #4
 80085c0:	4619      	mov	r1, r3
 80085c2:	4610      	mov	r0, r2
 80085c4:	f7fe f8d8 	bl	8006778 <vListInsert>
 80085c8:	e015      	b.n	80085f6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085ca:	2300      	movs	r3, #0
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	2300      	movs	r3, #0
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	2100      	movs	r1, #0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fda3 	bl	8008120 <xTimerGenericCommand>
 80085da:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d109      	bne.n	80085f6 <prvSwitchTimerLists+0x92>
 80085e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	603b      	str	r3, [r7, #0]
 80085f4:	e7fe      	b.n	80085f4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <prvSwitchTimerLists+0xb8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1b5      	bne.n	800856c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008600:	4b06      	ldr	r3, [pc, #24]	; (800861c <prvSwitchTimerLists+0xb8>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008606:	4b06      	ldr	r3, [pc, #24]	; (8008620 <prvSwitchTimerLists+0xbc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a04      	ldr	r2, [pc, #16]	; (800861c <prvSwitchTimerLists+0xb8>)
 800860c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800860e:	4a04      	ldr	r2, [pc, #16]	; (8008620 <prvSwitchTimerLists+0xbc>)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	6013      	str	r3, [r2, #0]
}
 8008614:	bf00      	nop
 8008616:	3718      	adds	r7, #24
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000d84 	.word	0x20000d84
 8008620:	20000d88 	.word	0x20000d88

08008624 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800862a:	f000 f925 	bl	8008878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800862e:	4b15      	ldr	r3, [pc, #84]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d120      	bne.n	8008678 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008636:	4814      	ldr	r0, [pc, #80]	; (8008688 <prvCheckForValidListAndQueue+0x64>)
 8008638:	f7fe f850 	bl	80066dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800863c:	4813      	ldr	r0, [pc, #76]	; (800868c <prvCheckForValidListAndQueue+0x68>)
 800863e:	f7fe f84d 	bl	80066dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008642:	4b13      	ldr	r3, [pc, #76]	; (8008690 <prvCheckForValidListAndQueue+0x6c>)
 8008644:	4a10      	ldr	r2, [pc, #64]	; (8008688 <prvCheckForValidListAndQueue+0x64>)
 8008646:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008648:	4b12      	ldr	r3, [pc, #72]	; (8008694 <prvCheckForValidListAndQueue+0x70>)
 800864a:	4a10      	ldr	r2, [pc, #64]	; (800868c <prvCheckForValidListAndQueue+0x68>)
 800864c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800864e:	2300      	movs	r3, #0
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	4b11      	ldr	r3, [pc, #68]	; (8008698 <prvCheckForValidListAndQueue+0x74>)
 8008654:	4a11      	ldr	r2, [pc, #68]	; (800869c <prvCheckForValidListAndQueue+0x78>)
 8008656:	2110      	movs	r1, #16
 8008658:	200a      	movs	r0, #10
 800865a:	f7fe f957 	bl	800690c <xQueueGenericCreateStatic>
 800865e:	4602      	mov	r2, r0
 8008660:	4b08      	ldr	r3, [pc, #32]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 8008662:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008664:	4b07      	ldr	r3, [pc, #28]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <prvCheckForValidListAndQueue+0x60>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	490b      	ldr	r1, [pc, #44]	; (80086a0 <prvCheckForValidListAndQueue+0x7c>)
 8008672:	4618      	mov	r0, r3
 8008674:	f7fe fd5a 	bl	800712c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008678:	f000 f92c 	bl	80088d4 <vPortExitCritical>
}
 800867c:	bf00      	nop
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000d8c 	.word	0x20000d8c
 8008688:	20000d5c 	.word	0x20000d5c
 800868c:	20000d70 	.word	0x20000d70
 8008690:	20000d84 	.word	0x20000d84
 8008694:	20000d88 	.word	0x20000d88
 8008698:	20000e38 	.word	0x20000e38
 800869c:	20000d98 	.word	0x20000d98
 80086a0:	08009844 	.word	0x08009844

080086a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	3b04      	subs	r3, #4
 80086b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80086bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3b04      	subs	r3, #4
 80086c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f023 0201 	bic.w	r2, r3, #1
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	3b04      	subs	r3, #4
 80086d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086d4:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <pxPortInitialiseStack+0x54>)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b14      	subs	r3, #20
 80086de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3b20      	subs	r3, #32
 80086ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086ec:	68fb      	ldr	r3, [r7, #12]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr
 80086f8:	080086fd 	.word	0x080086fd

080086fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008702:	2300      	movs	r3, #0
 8008704:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008706:	4b10      	ldr	r3, [pc, #64]	; (8008748 <prvTaskExitError+0x4c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800870e:	d009      	beq.n	8008724 <prvTaskExitError+0x28>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e7fe      	b.n	8008722 <prvTaskExitError+0x26>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008736:	bf00      	nop
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d0fc      	beq.n	8008738 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800873e:	bf00      	nop
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	bc80      	pop	{r7}
 8008746:	4770      	bx	lr
 8008748:	2000011c 	.word	0x2000011c
 800874c:	00000000 	.word	0x00000000

08008750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008750:	4b07      	ldr	r3, [pc, #28]	; (8008770 <pxCurrentTCBConst2>)
 8008752:	6819      	ldr	r1, [r3, #0]
 8008754:	6808      	ldr	r0, [r1, #0]
 8008756:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800875a:	f380 8809 	msr	PSP, r0
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8811 	msr	BASEPRI, r0
 800876a:	f04e 0e0d 	orr.w	lr, lr, #13
 800876e:	4770      	bx	lr

08008770 <pxCurrentTCBConst2>:
 8008770:	2000085c 	.word	0x2000085c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008774:	bf00      	nop
 8008776:	bf00      	nop

08008778 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008778:	4806      	ldr	r0, [pc, #24]	; (8008794 <prvPortStartFirstTask+0x1c>)
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	6800      	ldr	r0, [r0, #0]
 800877e:	f380 8808 	msr	MSP, r0
 8008782:	b662      	cpsie	i
 8008784:	b661      	cpsie	f
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	df00      	svc	0
 8008790:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008792:	bf00      	nop
 8008794:	e000ed08 	.word	0xe000ed08

08008798 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800879e:	4b31      	ldr	r3, [pc, #196]	; (8008864 <xPortStartScheduler+0xcc>)
 80087a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	4b29      	ldr	r3, [pc, #164]	; (8008868 <xPortStartScheduler+0xd0>)
 80087c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087c6:	4b29      	ldr	r3, [pc, #164]	; (800886c <xPortStartScheduler+0xd4>)
 80087c8:	2207      	movs	r2, #7
 80087ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087cc:	e009      	b.n	80087e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80087ce:	4b27      	ldr	r3, [pc, #156]	; (800886c <xPortStartScheduler+0xd4>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	4a25      	ldr	r2, [pc, #148]	; (800886c <xPortStartScheduler+0xd4>)
 80087d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b80      	cmp	r3, #128	; 0x80
 80087ec:	d0ef      	beq.n	80087ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087ee:	4b1f      	ldr	r3, [pc, #124]	; (800886c <xPortStartScheduler+0xd4>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f1c3 0307 	rsb	r3, r3, #7
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d009      	beq.n	800880e <xPortStartScheduler+0x76>
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60bb      	str	r3, [r7, #8]
 800880c:	e7fe      	b.n	800880c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800880e:	4b17      	ldr	r3, [pc, #92]	; (800886c <xPortStartScheduler+0xd4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <xPortStartScheduler+0xd4>)
 8008816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008818:	4b14      	ldr	r3, [pc, #80]	; (800886c <xPortStartScheduler+0xd4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008820:	4a12      	ldr	r2, [pc, #72]	; (800886c <xPortStartScheduler+0xd4>)
 8008822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <xPortStartScheduler+0xd8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a0f      	ldr	r2, [pc, #60]	; (8008870 <xPortStartScheduler+0xd8>)
 8008832:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008838:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <xPortStartScheduler+0xd8>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0c      	ldr	r2, [pc, #48]	; (8008870 <xPortStartScheduler+0xd8>)
 800883e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008844:	f000 f8b0 	bl	80089a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008848:	4b0a      	ldr	r3, [pc, #40]	; (8008874 <xPortStartScheduler+0xdc>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800884e:	f7ff ff93 	bl	8008778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008852:	f7ff f8db 	bl	8007a0c <vTaskSwitchContext>
	prvTaskExitError();
 8008856:	f7ff ff51 	bl	80086fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	e000e400 	.word	0xe000e400
 8008868:	20000e88 	.word	0x20000e88
 800886c:	20000e8c 	.word	0x20000e8c
 8008870:	e000ed20 	.word	0xe000ed20
 8008874:	2000011c 	.word	0x2000011c

08008878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008890:	4b0e      	ldr	r3, [pc, #56]	; (80088cc <vPortEnterCritical+0x54>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	4a0d      	ldr	r2, [pc, #52]	; (80088cc <vPortEnterCritical+0x54>)
 8008898:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <vPortEnterCritical+0x54>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d10e      	bne.n	80088c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <vPortEnterCritical+0x58>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <vPortEnterCritical+0x48>
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	e7fe      	b.n	80088be <vPortEnterCritical+0x46>
	}
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	2000011c 	.word	0x2000011c
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <vPortExitCritical+0x48>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d109      	bne.n	80088f6 <vPortExitCritical+0x22>
 80088e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	e7fe      	b.n	80088f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80088f6:	4b09      	ldr	r3, [pc, #36]	; (800891c <vPortExitCritical+0x48>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	4a07      	ldr	r2, [pc, #28]	; (800891c <vPortExitCritical+0x48>)
 80088fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <vPortExitCritical+0x48>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d104      	bne.n	8008912 <vPortExitCritical+0x3e>
 8008908:	2300      	movs	r3, #0
 800890a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	bc80      	pop	{r7}
 800891a:	4770      	bx	lr
 800891c:	2000011c 	.word	0x2000011c

08008920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008920:	f3ef 8009 	mrs	r0, PSP
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <pxCurrentTCBConst>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008930:	6010      	str	r0, [r2, #0]
 8008932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800893a:	f380 8811 	msr	BASEPRI, r0
 800893e:	f7ff f865 	bl	8007a0c <vTaskSwitchContext>
 8008942:	f04f 0000 	mov.w	r0, #0
 8008946:	f380 8811 	msr	BASEPRI, r0
 800894a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	6808      	ldr	r0, [r1, #0]
 8008952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008956:	f380 8809 	msr	PSP, r0
 800895a:	f3bf 8f6f 	isb	sy
 800895e:	4770      	bx	lr

08008960 <pxCurrentTCBConst>:
 8008960:	2000085c 	.word	0x2000085c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008964:	bf00      	nop
 8008966:	bf00      	nop

08008968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008980:	f7fe ff86 	bl	8007890 <xTaskIncrementTick>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <xPortSysTickHandler+0x3c>)
 800898c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008990:	601a      	str	r2, [r3, #0]
 8008992:	2300      	movs	r3, #0
 8008994:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089a8:	b480      	push	{r7}
 80089aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <vPortSetupTimerInterrupt+0x30>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <vPortSetupTimerInterrupt+0x34>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <vPortSetupTimerInterrupt+0x38>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <vPortSetupTimerInterrupt+0x3c>)
 80089be:	fba2 2303 	umull	r2, r3, r2, r3
 80089c2:	099b      	lsrs	r3, r3, #6
 80089c4:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <vPortSetupTimerInterrupt+0x40>)
 80089c6:	3b01      	subs	r3, #1
 80089c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ca:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <vPortSetupTimerInterrupt+0x30>)
 80089cc:	2207      	movs	r2, #7
 80089ce:	601a      	str	r2, [r3, #0]
}
 80089d0:	bf00      	nop
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc80      	pop	{r7}
 80089d6:	4770      	bx	lr
 80089d8:	e000e010 	.word	0xe000e010
 80089dc:	e000e018 	.word	0xe000e018
 80089e0:	20000000 	.word	0x20000000
 80089e4:	10624dd3 	.word	0x10624dd3
 80089e8:	e000e014 	.word	0xe000e014

080089ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089f2:	f3ef 8305 	mrs	r3, IPSR
 80089f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b0f      	cmp	r3, #15
 80089fc:	d913      	bls.n	8008a26 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089fe:	4a15      	ldr	r2, [pc, #84]	; (8008a54 <vPortValidateInterruptPriority+0x68>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a08:	4b13      	ldr	r3, [pc, #76]	; (8008a58 <vPortValidateInterruptPriority+0x6c>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	7afa      	ldrb	r2, [r7, #11]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d209      	bcs.n	8008a26 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	607b      	str	r3, [r7, #4]
 8008a24:	e7fe      	b.n	8008a24 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <vPortValidateInterruptPriority+0x70>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a2e:	4b0c      	ldr	r3, [pc, #48]	; (8008a60 <vPortValidateInterruptPriority+0x74>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d909      	bls.n	8008a4a <vPortValidateInterruptPriority+0x5e>
 8008a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	e7fe      	b.n	8008a48 <vPortValidateInterruptPriority+0x5c>
	}
 8008a4a:	bf00      	nop
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr
 8008a54:	e000e3f0 	.word	0xe000e3f0
 8008a58:	20000e88 	.word	0x20000e88
 8008a5c:	e000ed0c 	.word	0xe000ed0c
 8008a60:	20000e8c 	.word	0x20000e8c

08008a64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08a      	sub	sp, #40	; 0x28
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a70:	f7fe fe56 	bl	8007720 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a74:	4b57      	ldr	r3, [pc, #348]	; (8008bd4 <pvPortMalloc+0x170>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a7c:	f000 f90c 	bl	8008c98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a80:	4b55      	ldr	r3, [pc, #340]	; (8008bd8 <pvPortMalloc+0x174>)
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4013      	ands	r3, r2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f040 808c 	bne.w	8008ba6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01c      	beq.n	8008ace <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008a94:	2208      	movs	r2, #8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4413      	add	r3, r2
 8008a9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d013      	beq.n	8008ace <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f023 0307 	bic.w	r3, r3, #7
 8008aac:	3308      	adds	r3, #8
 8008aae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <pvPortMalloc+0x6a>
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	e7fe      	b.n	8008acc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d068      	beq.n	8008ba6 <pvPortMalloc+0x142>
 8008ad4:	4b41      	ldr	r3, [pc, #260]	; (8008bdc <pvPortMalloc+0x178>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d863      	bhi.n	8008ba6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ade:	4b40      	ldr	r3, [pc, #256]	; (8008be0 <pvPortMalloc+0x17c>)
 8008ae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ae2:	4b3f      	ldr	r3, [pc, #252]	; (8008be0 <pvPortMalloc+0x17c>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ae8:	e004      	b.n	8008af4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d903      	bls.n	8008b06 <pvPortMalloc+0xa2>
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1f1      	bne.n	8008aea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b06:	4b33      	ldr	r3, [pc, #204]	; (8008bd4 <pvPortMalloc+0x170>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d04a      	beq.n	8008ba6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2208      	movs	r2, #8
 8008b16:	4413      	add	r3, r2
 8008b18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	685a      	ldr	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	1ad2      	subs	r2, r2, r3
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d91e      	bls.n	8008b70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d009      	beq.n	8008b58 <pvPortMalloc+0xf4>
 8008b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	e7fe      	b.n	8008b56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b6a:	69b8      	ldr	r0, [r7, #24]
 8008b6c:	f000 f8f6 	bl	8008d5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b70:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <pvPortMalloc+0x178>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <pvPortMalloc+0x178>)
 8008b7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <pvPortMalloc+0x178>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <pvPortMalloc+0x180>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d203      	bcs.n	8008b92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b8a:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <pvPortMalloc+0x178>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <pvPortMalloc+0x180>)
 8008b90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	4b10      	ldr	r3, [pc, #64]	; (8008bd8 <pvPortMalloc+0x174>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ba6:	f7fe fdc9 	bl	800773c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f003 0307 	and.w	r3, r3, #7
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <pvPortMalloc+0x164>
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	60fb      	str	r3, [r7, #12]
 8008bc6:	e7fe      	b.n	8008bc6 <pvPortMalloc+0x162>
	return pvReturn;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3728      	adds	r7, #40	; 0x28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20001a98 	.word	0x20001a98
 8008bd8:	20001aa4 	.word	0x20001aa4
 8008bdc:	20001a9c 	.word	0x20001a9c
 8008be0:	20001a90 	.word	0x20001a90
 8008be4:	20001aa0 	.word	0x20001aa0

08008be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d046      	beq.n	8008c88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bfa:	2308      	movs	r3, #8
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4413      	add	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	4b20      	ldr	r3, [pc, #128]	; (8008c90 <vPortFree+0xa8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d109      	bne.n	8008c2a <vPortFree+0x42>
 8008c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1a:	f383 8811 	msr	BASEPRI, r3
 8008c1e:	f3bf 8f6f 	isb	sy
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	e7fe      	b.n	8008c28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <vPortFree+0x5e>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60bb      	str	r3, [r7, #8]
 8008c44:	e7fe      	b.n	8008c44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	685a      	ldr	r2, [r3, #4]
 8008c4a:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <vPortFree+0xa8>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4013      	ands	r3, r2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d019      	beq.n	8008c88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d115      	bne.n	8008c88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <vPortFree+0xa8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	43db      	mvns	r3, r3
 8008c66:	401a      	ands	r2, r3
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c6c:	f7fe fd58 	bl	8007720 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <vPortFree+0xac>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4413      	add	r3, r2
 8008c7a:	4a06      	ldr	r2, [pc, #24]	; (8008c94 <vPortFree+0xac>)
 8008c7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c7e:	6938      	ldr	r0, [r7, #16]
 8008c80:	f000 f86c 	bl	8008d5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c84:	f7fe fd5a 	bl	800773c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c88:	bf00      	nop
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20001aa4 	.word	0x20001aa4
 8008c94:	20001a9c 	.word	0x20001a9c

08008c98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008ca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ca4:	4b27      	ldr	r3, [pc, #156]	; (8008d44 <prvHeapInit+0xac>)
 8008ca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0307 	and.w	r3, r3, #7
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00c      	beq.n	8008ccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	3307      	adds	r3, #7
 8008cb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0307 	bic.w	r3, r3, #7
 8008cbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	4a1f      	ldr	r2, [pc, #124]	; (8008d44 <prvHeapInit+0xac>)
 8008cc8:	4413      	add	r3, r2
 8008cca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cd0:	4a1d      	ldr	r2, [pc, #116]	; (8008d48 <prvHeapInit+0xb0>)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cd6:	4b1c      	ldr	r3, [pc, #112]	; (8008d48 <prvHeapInit+0xb0>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0307 	bic.w	r3, r3, #7
 8008cf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <prvHeapInit+0xb4>)
 8008cf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cfa:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <prvHeapInit+0xb4>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d02:	4b12      	ldr	r3, [pc, #72]	; (8008d4c <prvHeapInit+0xb4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2200      	movs	r2, #0
 8008d08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	1ad2      	subs	r2, r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <prvHeapInit+0xb4>)
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	4a0a      	ldr	r2, [pc, #40]	; (8008d50 <prvHeapInit+0xb8>)
 8008d26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <prvHeapInit+0xbc>)
 8008d2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d30:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <prvHeapInit+0xc0>)
 8008d32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d36:	601a      	str	r2, [r3, #0]
}
 8008d38:	bf00      	nop
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000e90 	.word	0x20000e90
 8008d48:	20001a90 	.word	0x20001a90
 8008d4c:	20001a98 	.word	0x20001a98
 8008d50:	20001aa0 	.word	0x20001aa0
 8008d54:	20001a9c 	.word	0x20001a9c
 8008d58:	20001aa4 	.word	0x20001aa4

08008d5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d64:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <prvInsertBlockIntoFreeList+0xa8>)
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	e002      	b.n	8008d70 <prvInsertBlockIntoFreeList+0x14>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d8f7      	bhi.n	8008d6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	68ba      	ldr	r2, [r7, #8]
 8008d84:	4413      	add	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d108      	bne.n	8008d9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d118      	bne.n	8008de4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <prvInsertBlockIntoFreeList+0xac>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d00d      	beq.n	8008dda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	441a      	add	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e008      	b.n	8008dec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dda:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <prvInsertBlockIntoFreeList+0xac>)
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e003      	b.n	8008dec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d002      	beq.n	8008dfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dfa:	bf00      	nop
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr
 8008e04:	20001a90 	.word	0x20001a90
 8008e08:	20001a98 	.word	0x20001a98

08008e0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e10:	2200      	movs	r2, #0
 8008e12:	4912      	ldr	r1, [pc, #72]	; (8008e5c <MX_USB_DEVICE_Init+0x50>)
 8008e14:	4812      	ldr	r0, [pc, #72]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e16:	f7fc fa64 	bl	80052e2 <USBD_Init>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d001      	beq.n	8008e24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e20:	f7f7 fb28 	bl	8000474 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008e24:	490f      	ldr	r1, [pc, #60]	; (8008e64 <MX_USB_DEVICE_Init+0x58>)
 8008e26:	480e      	ldr	r0, [pc, #56]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e28:	f7fc fa86 	bl	8005338 <USBD_RegisterClass>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d001      	beq.n	8008e36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008e32:	f7f7 fb1f 	bl	8000474 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008e36:	490c      	ldr	r1, [pc, #48]	; (8008e68 <MX_USB_DEVICE_Init+0x5c>)
 8008e38:	4809      	ldr	r0, [pc, #36]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e3a:	f7fc f9b7 	bl	80051ac <USBD_CDC_RegisterInterface>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008e44:	f7f7 fb16 	bl	8000474 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008e48:	4805      	ldr	r0, [pc, #20]	; (8008e60 <MX_USB_DEVICE_Init+0x54>)
 8008e4a:	f7fc fa8e 	bl	800536a <USBD_Start>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008e54:	f7f7 fb0e 	bl	8000474 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008e58:	bf00      	nop
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	20000130 	.word	0x20000130
 8008e60:	20001d30 	.word	0x20001d30
 8008e64:	20000018 	.word	0x20000018
 8008e68:	20000120 	.word	0x20000120

08008e6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e70:	2200      	movs	r2, #0
 8008e72:	4905      	ldr	r1, [pc, #20]	; (8008e88 <CDC_Init_FS+0x1c>)
 8008e74:	4805      	ldr	r0, [pc, #20]	; (8008e8c <CDC_Init_FS+0x20>)
 8008e76:	f7fc f9af 	bl	80051d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e7a:	4905      	ldr	r1, [pc, #20]	; (8008e90 <CDC_Init_FS+0x24>)
 8008e7c:	4803      	ldr	r0, [pc, #12]	; (8008e8c <CDC_Init_FS+0x20>)
 8008e7e:	f7fc f9c4 	bl	800520a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20002034 	.word	0x20002034
 8008e8c:	20001d30 	.word	0x20001d30
 8008e90:	20001ff4 	.word	0x20001ff4

08008e94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr
	...

08008ea4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	4603      	mov	r3, r0
 8008eac:	6039      	str	r1, [r7, #0]
 8008eae:	71fb      	strb	r3, [r7, #7]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	2b23      	cmp	r3, #35	; 0x23
 8008eb8:	d84a      	bhi.n	8008f50 <CDC_Control_FS+0xac>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <CDC_Control_FS+0x1c>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008f51 	.word	0x08008f51
 8008ec4:	08008f51 	.word	0x08008f51
 8008ec8:	08008f51 	.word	0x08008f51
 8008ecc:	08008f51 	.word	0x08008f51
 8008ed0:	08008f51 	.word	0x08008f51
 8008ed4:	08008f51 	.word	0x08008f51
 8008ed8:	08008f51 	.word	0x08008f51
 8008edc:	08008f51 	.word	0x08008f51
 8008ee0:	08008f51 	.word	0x08008f51
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	08008f51 	.word	0x08008f51
 8008eec:	08008f51 	.word	0x08008f51
 8008ef0:	08008f51 	.word	0x08008f51
 8008ef4:	08008f51 	.word	0x08008f51
 8008ef8:	08008f51 	.word	0x08008f51
 8008efc:	08008f51 	.word	0x08008f51
 8008f00:	08008f51 	.word	0x08008f51
 8008f04:	08008f51 	.word	0x08008f51
 8008f08:	08008f51 	.word	0x08008f51
 8008f0c:	08008f51 	.word	0x08008f51
 8008f10:	08008f51 	.word	0x08008f51
 8008f14:	08008f51 	.word	0x08008f51
 8008f18:	08008f51 	.word	0x08008f51
 8008f1c:	08008f51 	.word	0x08008f51
 8008f20:	08008f51 	.word	0x08008f51
 8008f24:	08008f51 	.word	0x08008f51
 8008f28:	08008f51 	.word	0x08008f51
 8008f2c:	08008f51 	.word	0x08008f51
 8008f30:	08008f51 	.word	0x08008f51
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f51 	.word	0x08008f51
 8008f3c:	08008f51 	.word	0x08008f51
 8008f40:	08008f51 	.word	0x08008f51
 8008f44:	08008f51 	.word	0x08008f51
 8008f48:	08008f51 	.word	0x08008f51
 8008f4c:	08008f51 	.word	0x08008f51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f50:	bf00      	nop
  }

  return (USBD_OK);
 8008f52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop

08008f60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f6a:	6879      	ldr	r1, [r7, #4]
 8008f6c:	4805      	ldr	r0, [pc, #20]	; (8008f84 <CDC_Receive_FS+0x24>)
 8008f6e:	f7fc f94c 	bl	800520a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f72:	4804      	ldr	r0, [pc, #16]	; (8008f84 <CDC_Receive_FS+0x24>)
 8008f74:	f7fc f98b 	bl	800528e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008f78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20001d30 	.word	0x20001d30

08008f88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f98:	4b0d      	ldr	r3, [pc, #52]	; (8008fd0 <CDC_Transmit_FS+0x48>)
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e00b      	b.n	8008fc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008fae:	887b      	ldrh	r3, [r7, #2]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	6879      	ldr	r1, [r7, #4]
 8008fb4:	4806      	ldr	r0, [pc, #24]	; (8008fd0 <CDC_Transmit_FS+0x48>)
 8008fb6:	f7fc f90f 	bl	80051d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fba:	4805      	ldr	r0, [pc, #20]	; (8008fd0 <CDC_Transmit_FS+0x48>)
 8008fbc:	f7fc f938 	bl	8005230 <USBD_CDC_TransmitPacket>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20001d30 	.word	0x20001d30

08008fd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6039      	str	r1, [r7, #0]
 8008fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2212      	movs	r2, #18
 8008fe4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008fe6:	4b03      	ldr	r3, [pc, #12]	; (8008ff4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	2000014c 	.word	0x2000014c

08008ff8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	6039      	str	r1, [r7, #0]
 8009002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	2204      	movs	r2, #4
 8009008:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800900a:	4b03      	ldr	r3, [pc, #12]	; (8009018 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	bc80      	pop	{r7}
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	20000160 	.word	0x20000160

0800901c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d105      	bne.n	800903a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	4907      	ldr	r1, [pc, #28]	; (8009050 <USBD_FS_ProductStrDescriptor+0x34>)
 8009032:	4808      	ldr	r0, [pc, #32]	; (8009054 <USBD_FS_ProductStrDescriptor+0x38>)
 8009034:	f7fd f905 	bl	8006242 <USBD_GetString>
 8009038:	e004      	b.n	8009044 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	4904      	ldr	r1, [pc, #16]	; (8009050 <USBD_FS_ProductStrDescriptor+0x34>)
 800903e:	4805      	ldr	r0, [pc, #20]	; (8009054 <USBD_FS_ProductStrDescriptor+0x38>)
 8009040:	f7fd f8ff 	bl	8006242 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009044:	4b02      	ldr	r3, [pc, #8]	; (8009050 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20002074 	.word	0x20002074
 8009054:	0800984c 	.word	0x0800984c

08009058 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	4904      	ldr	r1, [pc, #16]	; (8009078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009068:	4804      	ldr	r0, [pc, #16]	; (800907c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800906a:	f7fd f8ea 	bl	8006242 <USBD_GetString>
  return USBD_StrDesc;
 800906e:	4b02      	ldr	r3, [pc, #8]	; (8009078 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009070:	4618      	mov	r0, r3
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	20002074 	.word	0x20002074
 800907c:	08009864 	.word	0x08009864

08009080 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	6039      	str	r1, [r7, #0]
 800908a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	221a      	movs	r2, #26
 8009090:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009092:	f000 f843 	bl	800911c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009096:	4b02      	ldr	r3, [pc, #8]	; (80090a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009098:	4618      	mov	r0, r3
 800909a:	3708      	adds	r7, #8
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	20000164 	.word	0x20000164

080090a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090b0:	79fb      	ldrb	r3, [r7, #7]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	4907      	ldr	r1, [pc, #28]	; (80090d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090ba:	4808      	ldr	r0, [pc, #32]	; (80090dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090bc:	f7fd f8c1 	bl	8006242 <USBD_GetString>
 80090c0:	e004      	b.n	80090cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4904      	ldr	r1, [pc, #16]	; (80090d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090c6:	4805      	ldr	r0, [pc, #20]	; (80090dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80090c8:	f7fd f8bb 	bl	8006242 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090cc:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20002074 	.word	0x20002074
 80090dc:	08009878 	.word	0x08009878

080090e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	4603      	mov	r3, r0
 80090e8:	6039      	str	r1, [r7, #0]
 80090ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d105      	bne.n	80090fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	4907      	ldr	r1, [pc, #28]	; (8009114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80090f6:	4808      	ldr	r0, [pc, #32]	; (8009118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090f8:	f7fd f8a3 	bl	8006242 <USBD_GetString>
 80090fc:	e004      	b.n	8009108 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	4904      	ldr	r1, [pc, #16]	; (8009114 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009102:	4805      	ldr	r0, [pc, #20]	; (8009118 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009104:	f7fd f89d 	bl	8006242 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009108:	4b02      	ldr	r3, [pc, #8]	; (8009114 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800910a:	4618      	mov	r0, r3
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20002074 	.word	0x20002074
 8009118:	08009884 	.word	0x08009884

0800911c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009122:	4b0f      	ldr	r3, [pc, #60]	; (8009160 <Get_SerialNum+0x44>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009128:	4b0e      	ldr	r3, [pc, #56]	; (8009164 <Get_SerialNum+0x48>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800912e:	4b0e      	ldr	r3, [pc, #56]	; (8009168 <Get_SerialNum+0x4c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4413      	add	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009142:	2208      	movs	r2, #8
 8009144:	4909      	ldr	r1, [pc, #36]	; (800916c <Get_SerialNum+0x50>)
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 f814 	bl	8009174 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800914c:	2204      	movs	r2, #4
 800914e:	4908      	ldr	r1, [pc, #32]	; (8009170 <Get_SerialNum+0x54>)
 8009150:	68b8      	ldr	r0, [r7, #8]
 8009152:	f000 f80f 	bl	8009174 <IntToUnicode>
  }
}
 8009156:	bf00      	nop
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	1ffff7e8 	.word	0x1ffff7e8
 8009164:	1ffff7ec 	.word	0x1ffff7ec
 8009168:	1ffff7f0 	.word	0x1ffff7f0
 800916c:	20000166 	.word	0x20000166
 8009170:	20000176 	.word	0x20000176

08009174 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	4613      	mov	r3, r2
 8009180:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009186:	2300      	movs	r3, #0
 8009188:	75fb      	strb	r3, [r7, #23]
 800918a:	e027      	b.n	80091dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	0f1b      	lsrs	r3, r3, #28
 8009190:	2b09      	cmp	r3, #9
 8009192:	d80b      	bhi.n	80091ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	0f1b      	lsrs	r3, r3, #28
 8009198:	b2da      	uxtb	r2, r3
 800919a:	7dfb      	ldrb	r3, [r7, #23]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	4619      	mov	r1, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	440b      	add	r3, r1
 80091a4:	3230      	adds	r2, #48	; 0x30
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e00a      	b.n	80091c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	0f1b      	lsrs	r3, r3, #28
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	7dfb      	ldrb	r3, [r7, #23]
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4619      	mov	r1, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	440b      	add	r3, r1
 80091bc:	3237      	adds	r2, #55	; 0x37
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	3301      	adds	r3, #1
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	4413      	add	r3, r2
 80091d2:	2200      	movs	r2, #0
 80091d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	3301      	adds	r3, #1
 80091da:	75fb      	strb	r3, [r7, #23]
 80091dc:	7dfa      	ldrb	r2, [r7, #23]
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d3d3      	bcc.n	800918c <IntToUnicode+0x18>
  }
}
 80091e4:	bf00      	nop
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bc80      	pop	{r7}
 80091ec:	4770      	bx	lr
	...

080091f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a0d      	ldr	r2, [pc, #52]	; (8009234 <HAL_PCD_MspInit+0x44>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d113      	bne.n	800922a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009202:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <HAL_PCD_MspInit+0x48>)
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	4a0c      	ldr	r2, [pc, #48]	; (8009238 <HAL_PCD_MspInit+0x48>)
 8009208:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800920c:	61d3      	str	r3, [r2, #28]
 800920e:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <HAL_PCD_MspInit+0x48>)
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800921a:	2200      	movs	r2, #0
 800921c:	2105      	movs	r1, #5
 800921e:	2014      	movs	r0, #20
 8009220:	f7f7 faf5 	bl	800080e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009224:	2014      	movs	r0, #20
 8009226:	f7f7 fb0e 	bl	8000846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800922a:	bf00      	nop
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	40005c00 	.word	0x40005c00
 8009238:	40021000 	.word	0x40021000

0800923c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009250:	4619      	mov	r1, r3
 8009252:	4610      	mov	r0, r2
 8009254:	f7fc f8d1 	bl	80053fa <USBD_LL_SetupStage>
}
 8009258:	bf00      	nop
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009272:	78fa      	ldrb	r2, [r7, #3]
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	440b      	add	r3, r1
 8009280:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	4619      	mov	r1, r3
 800928a:	f7fc f901 	bl	8005490 <USBD_LL_DataOutStage>
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b082      	sub	sp, #8
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80092a8:	78fa      	ldrb	r2, [r7, #3]
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	4413      	add	r3, r2
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	440b      	add	r3, r1
 80092b6:	333c      	adds	r3, #60	; 0x3c
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	4619      	mov	r1, r3
 80092be:	f7fc f958 	bl	8005572 <USBD_LL_DataInStage>
}
 80092c2:	bf00      	nop
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}

080092ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ca:	b580      	push	{r7, lr}
 80092cc:	b082      	sub	sp, #8
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fc fa68 	bl	80057ae <USBD_LL_SOF>
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80092ee:	2301      	movs	r3, #1
 80092f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d001      	beq.n	80092fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80092fa:	f7f7 f8bb 	bl	8000474 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009304:	7bfa      	ldrb	r2, [r7, #15]
 8009306:	4611      	mov	r1, r2
 8009308:	4618      	mov	r0, r3
 800930a:	f7fc fa18 	bl	800573e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009314:	4618      	mov	r0, r3
 8009316:	f7fc f9d1 	bl	80056bc <USBD_LL_Reset>
}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009332:	4618      	mov	r0, r3
 8009334:	f7fc fa12 	bl	800575c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009340:	4b04      	ldr	r3, [pc, #16]	; (8009354 <HAL_PCD_SuspendCallback+0x30>)
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	4a03      	ldr	r2, [pc, #12]	; (8009354 <HAL_PCD_SuspendCallback+0x30>)
 8009346:	f043 0306 	orr.w	r3, r3, #6
 800934a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	e000ed00 	.word	0xe000ed00

08009358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009366:	4618      	mov	r0, r3
 8009368:	f7fc fa0c 	bl	8005784 <USBD_LL_Resume>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800937c:	4a28      	ldr	r2, [pc, #160]	; (8009420 <USBD_LL_Init+0xac>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a26      	ldr	r2, [pc, #152]	; (8009420 <USBD_LL_Init+0xac>)
 8009388:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800938c:	4b24      	ldr	r3, [pc, #144]	; (8009420 <USBD_LL_Init+0xac>)
 800938e:	4a25      	ldr	r2, [pc, #148]	; (8009424 <USBD_LL_Init+0xb0>)
 8009390:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009392:	4b23      	ldr	r3, [pc, #140]	; (8009420 <USBD_LL_Init+0xac>)
 8009394:	2208      	movs	r2, #8
 8009396:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009398:	4b21      	ldr	r3, [pc, #132]	; (8009420 <USBD_LL_Init+0xac>)
 800939a:	2202      	movs	r2, #2
 800939c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800939e:	4b20      	ldr	r3, [pc, #128]	; (8009420 <USBD_LL_Init+0xac>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80093a4:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <USBD_LL_Init+0xac>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80093aa:	4b1d      	ldr	r3, [pc, #116]	; (8009420 <USBD_LL_Init+0xac>)
 80093ac:	2200      	movs	r2, #0
 80093ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80093b0:	481b      	ldr	r0, [pc, #108]	; (8009420 <USBD_LL_Init+0xac>)
 80093b2:	f7f7 fbee 	bl	8000b92 <HAL_PCD_Init>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80093bc:	f7f7 f85a 	bl	8000474 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093c6:	2318      	movs	r3, #24
 80093c8:	2200      	movs	r2, #0
 80093ca:	2100      	movs	r1, #0
 80093cc:	f7f8 ff22 	bl	8002214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d6:	2358      	movs	r3, #88	; 0x58
 80093d8:	2200      	movs	r2, #0
 80093da:	2180      	movs	r1, #128	; 0x80
 80093dc:	f7f8 ff1a 	bl	8002214 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093e6:	23c0      	movs	r3, #192	; 0xc0
 80093e8:	2200      	movs	r2, #0
 80093ea:	2181      	movs	r1, #129	; 0x81
 80093ec:	f7f8 ff12 	bl	8002214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093f6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80093fa:	2200      	movs	r2, #0
 80093fc:	2101      	movs	r1, #1
 80093fe:	f7f8 ff09 	bl	8002214 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800940c:	2200      	movs	r2, #0
 800940e:	2182      	movs	r1, #130	; 0x82
 8009410:	f7f8 ff00 	bl	8002214 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3708      	adds	r7, #8
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	20002274 	.word	0x20002274
 8009424:	40005c00 	.word	0x40005c00

08009428 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009430:	2300      	movs	r3, #0
 8009432:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009434:	2300      	movs	r3, #0
 8009436:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800943e:	4618      	mov	r0, r3
 8009440:	f7f7 fcb2 	bl	8000da8 <HAL_PCD_Start>
 8009444:	4603      	mov	r3, r0
 8009446:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 f94e 	bl	80096ec <USBD_Get_USB_Status>
 8009450:	4603      	mov	r3, r0
 8009452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009454:	7bbb      	ldrb	r3, [r7, #14]
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	4608      	mov	r0, r1
 8009468:	4611      	mov	r1, r2
 800946a:	461a      	mov	r2, r3
 800946c:	4603      	mov	r3, r0
 800946e:	70fb      	strb	r3, [r7, #3]
 8009470:	460b      	mov	r3, r1
 8009472:	70bb      	strb	r3, [r7, #2]
 8009474:	4613      	mov	r3, r2
 8009476:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800947c:	2300      	movs	r3, #0
 800947e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009486:	78bb      	ldrb	r3, [r7, #2]
 8009488:	883a      	ldrh	r2, [r7, #0]
 800948a:	78f9      	ldrb	r1, [r7, #3]
 800948c:	f7f7 fe2c 	bl	80010e8 <HAL_PCD_EP_Open>
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009494:	7bfb      	ldrb	r3, [r7, #15]
 8009496:	4618      	mov	r0, r3
 8009498:	f000 f928 	bl	80096ec <USBD_Get_USB_Status>
 800949c:	4603      	mov	r3, r0
 800949e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7f7 fe73 	bl	80011b4 <HAL_PCD_EP_Close>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f909 	bl	80096ec <USBD_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7f7 ff33 	bl	8001372 <HAL_PCD_EP_SetStall>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 f8ea 	bl	80096ec <USBD_Get_USB_Status>
 8009518:	4603      	mov	r3, r0
 800951a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800951c:	7bbb      	ldrb	r3, [r7, #14]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	4618      	mov	r0, r3
 8009546:	f7f7 ff74 	bl	8001432 <HAL_PCD_EP_ClrStall>
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	4618      	mov	r0, r3
 8009552:	f000 f8cb 	bl	80096ec <USBD_Get_USB_Status>
 8009556:	4603      	mov	r3, r0
 8009558:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800955a:	7bbb      	ldrb	r3, [r7, #14]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009576:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800957c:	2b00      	cmp	r3, #0
 800957e:	da0c      	bge.n	800959a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	4613      	mov	r3, r2
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	440b      	add	r3, r1
 8009594:	3302      	adds	r3, #2
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	e00b      	b.n	80095b2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800959a:	78fb      	ldrb	r3, [r7, #3]
 800959c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095a0:	68f9      	ldr	r1, [r7, #12]
 80095a2:	4613      	mov	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	440b      	add	r3, r1
 80095ac:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80095b0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bc80      	pop	{r7}
 80095ba:	4770      	bx	lr

080095bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c8:	2300      	movs	r3, #0
 80095ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095d6:	78fa      	ldrb	r2, [r7, #3]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7f7 fd5f 	bl	800109e <HAL_PCD_SetAddress>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 f880 	bl	80096ec <USBD_Get_USB_Status>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b086      	sub	sp, #24
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	607a      	str	r2, [r7, #4]
 8009604:	461a      	mov	r2, r3
 8009606:	460b      	mov	r3, r1
 8009608:	72fb      	strb	r3, [r7, #11]
 800960a:	4613      	mov	r3, r2
 800960c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800961c:	893b      	ldrh	r3, [r7, #8]
 800961e:	7af9      	ldrb	r1, [r7, #11]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	f7f7 fe63 	bl	80012ec <HAL_PCD_EP_Transmit>
 8009626:	4603      	mov	r3, r0
 8009628:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	4618      	mov	r0, r3
 800962e:	f000 f85d 	bl	80096ec <USBD_Get_USB_Status>
 8009632:	4603      	mov	r3, r0
 8009634:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009636:	7dbb      	ldrb	r3, [r7, #22]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	607a      	str	r2, [r7, #4]
 800964a:	461a      	mov	r2, r3
 800964c:	460b      	mov	r3, r1
 800964e:	72fb      	strb	r3, [r7, #11]
 8009650:	4613      	mov	r3, r2
 8009652:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009662:	893b      	ldrh	r3, [r7, #8]
 8009664:	7af9      	ldrb	r1, [r7, #11]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	f7f7 fdec 	bl	8001244 <HAL_PCD_EP_Receive>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f83a 	bl	80096ec <USBD_Get_USB_Status>
 8009678:	4603      	mov	r3, r0
 800967a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800967c:	7dbb      	ldrb	r3, [r7, #22]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3718      	adds	r7, #24
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009698:	78fa      	ldrb	r2, [r7, #3]
 800969a:	4611      	mov	r1, r2
 800969c:	4618      	mov	r0, r3
 800969e:	f7f7 fe0e 	bl	80012be <HAL_PCD_EP_GetRxCount>
 80096a2:	4603      	mov	r3, r0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096b4:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <USBD_static_malloc+0x14>)
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	370c      	adds	r7, #12
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bc80      	pop	{r7}
 80096be:	4770      	bx	lr
 80096c0:	20001aa8 	.word	0x20001aa8

080096c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]

}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bc80      	pop	{r7}
 80096d4:	4770      	bx	lr

080096d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
 80096de:	460b      	mov	r3, r1
 80096e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80096e2:	bf00      	nop
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	4603      	mov	r3, r0
 80096f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d817      	bhi.n	8009730 <USBD_Get_USB_Status+0x44>
 8009700:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <USBD_Get_USB_Status+0x1c>)
 8009702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009706:	bf00      	nop
 8009708:	08009719 	.word	0x08009719
 800970c:	0800971f 	.word	0x0800971f
 8009710:	08009725 	.word	0x08009725
 8009714:	0800972b 	.word	0x0800972b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73fb      	strb	r3, [r7, #15]
    break;
 800971c:	e00b      	b.n	8009736 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800971e:	2302      	movs	r3, #2
 8009720:	73fb      	strb	r3, [r7, #15]
    break;
 8009722:	e008      	b.n	8009736 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009724:	2301      	movs	r3, #1
 8009726:	73fb      	strb	r3, [r7, #15]
    break;
 8009728:	e005      	b.n	8009736 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800972a:	2302      	movs	r3, #2
 800972c:	73fb      	strb	r3, [r7, #15]
    break;
 800972e:	e002      	b.n	8009736 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009730:	2302      	movs	r3, #2
 8009732:	73fb      	strb	r3, [r7, #15]
    break;
 8009734:	bf00      	nop
  }
  return usb_status;
 8009736:	7bfb      	ldrb	r3, [r7, #15]
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop

08009744 <__libc_init_array>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	2500      	movs	r5, #0
 8009748:	4e0c      	ldr	r6, [pc, #48]	; (800977c <__libc_init_array+0x38>)
 800974a:	4c0d      	ldr	r4, [pc, #52]	; (8009780 <__libc_init_array+0x3c>)
 800974c:	1ba4      	subs	r4, r4, r6
 800974e:	10a4      	asrs	r4, r4, #2
 8009750:	42a5      	cmp	r5, r4
 8009752:	d109      	bne.n	8009768 <__libc_init_array+0x24>
 8009754:	f000 f82e 	bl	80097b4 <_init>
 8009758:	2500      	movs	r5, #0
 800975a:	4e0a      	ldr	r6, [pc, #40]	; (8009784 <__libc_init_array+0x40>)
 800975c:	4c0a      	ldr	r4, [pc, #40]	; (8009788 <__libc_init_array+0x44>)
 800975e:	1ba4      	subs	r4, r4, r6
 8009760:	10a4      	asrs	r4, r4, #2
 8009762:	42a5      	cmp	r5, r4
 8009764:	d105      	bne.n	8009772 <__libc_init_array+0x2e>
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800976c:	4798      	blx	r3
 800976e:	3501      	adds	r5, #1
 8009770:	e7ee      	b.n	8009750 <__libc_init_array+0xc>
 8009772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009776:	4798      	blx	r3
 8009778:	3501      	adds	r5, #1
 800977a:	e7f2      	b.n	8009762 <__libc_init_array+0x1e>
 800977c:	080098c8 	.word	0x080098c8
 8009780:	080098c8 	.word	0x080098c8
 8009784:	080098c8 	.word	0x080098c8
 8009788:	080098cc 	.word	0x080098cc

0800978c <memcpy>:
 800978c:	b510      	push	{r4, lr}
 800978e:	1e43      	subs	r3, r0, #1
 8009790:	440a      	add	r2, r1
 8009792:	4291      	cmp	r1, r2
 8009794:	d100      	bne.n	8009798 <memcpy+0xc>
 8009796:	bd10      	pop	{r4, pc}
 8009798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800979c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097a0:	e7f7      	b.n	8009792 <memcpy+0x6>

080097a2 <memset>:
 80097a2:	4603      	mov	r3, r0
 80097a4:	4402      	add	r2, r0
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d100      	bne.n	80097ac <memset+0xa>
 80097aa:	4770      	bx	lr
 80097ac:	f803 1b01 	strb.w	r1, [r3], #1
 80097b0:	e7f9      	b.n	80097a6 <memset+0x4>
	...

080097b4 <_init>:
 80097b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b6:	bf00      	nop
 80097b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ba:	bc08      	pop	{r3}
 80097bc:	469e      	mov	lr, r3
 80097be:	4770      	bx	lr

080097c0 <_fini>:
 80097c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097c2:	bf00      	nop
 80097c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c6:	bc08      	pop	{r3}
 80097c8:	469e      	mov	lr, r3
 80097ca:	4770      	bx	lr
